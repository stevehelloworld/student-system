
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Course
 * 
 */
export type Course = $Result.DefaultSelection<Prisma.$CoursePayload>
/**
 * Model Enrollment
 * 
 */
export type Enrollment = $Result.DefaultSelection<Prisma.$EnrollmentPayload>
/**
 * Model Session
 * 
 */
export type Session = $Result.DefaultSelection<Prisma.$SessionPayload>
/**
 * Model AttendanceRecord
 * 
 */
export type AttendanceRecord = $Result.DefaultSelection<Prisma.$AttendanceRecordPayload>
/**
 * Model LeaveRequest
 * 
 */
export type LeaveRequest = $Result.DefaultSelection<Prisma.$LeaveRequestPayload>
/**
 * Model MakeUpSession
 * 
 */
export type MakeUpSession = $Result.DefaultSelection<Prisma.$MakeUpSessionPayload>
/**
 * Model StudentPerformance
 * 
 */
export type StudentPerformance = $Result.DefaultSelection<Prisma.$StudentPerformancePayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.course`: Exposes CRUD operations for the **Course** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Courses
    * const courses = await prisma.course.findMany()
    * ```
    */
  get course(): Prisma.CourseDelegate<ExtArgs>;

  /**
   * `prisma.enrollment`: Exposes CRUD operations for the **Enrollment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Enrollments
    * const enrollments = await prisma.enrollment.findMany()
    * ```
    */
  get enrollment(): Prisma.EnrollmentDelegate<ExtArgs>;

  /**
   * `prisma.session`: Exposes CRUD operations for the **Session** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sessions
    * const sessions = await prisma.session.findMany()
    * ```
    */
  get session(): Prisma.SessionDelegate<ExtArgs>;

  /**
   * `prisma.attendanceRecord`: Exposes CRUD operations for the **AttendanceRecord** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AttendanceRecords
    * const attendanceRecords = await prisma.attendanceRecord.findMany()
    * ```
    */
  get attendanceRecord(): Prisma.AttendanceRecordDelegate<ExtArgs>;

  /**
   * `prisma.leaveRequest`: Exposes CRUD operations for the **LeaveRequest** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more LeaveRequests
    * const leaveRequests = await prisma.leaveRequest.findMany()
    * ```
    */
  get leaveRequest(): Prisma.LeaveRequestDelegate<ExtArgs>;

  /**
   * `prisma.makeUpSession`: Exposes CRUD operations for the **MakeUpSession** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MakeUpSessions
    * const makeUpSessions = await prisma.makeUpSession.findMany()
    * ```
    */
  get makeUpSession(): Prisma.MakeUpSessionDelegate<ExtArgs>;

  /**
   * `prisma.studentPerformance`: Exposes CRUD operations for the **StudentPerformance** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more StudentPerformances
    * const studentPerformances = await prisma.studentPerformance.findMany()
    * ```
    */
  get studentPerformance(): Prisma.StudentPerformanceDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Course: 'Course',
    Enrollment: 'Enrollment',
    Session: 'Session',
    AttendanceRecord: 'AttendanceRecord',
    LeaveRequest: 'LeaveRequest',
    MakeUpSession: 'MakeUpSession',
    StudentPerformance: 'StudentPerformance'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "user" | "course" | "enrollment" | "session" | "attendanceRecord" | "leaveRequest" | "makeUpSession" | "studentPerformance"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Course: {
        payload: Prisma.$CoursePayload<ExtArgs>
        fields: Prisma.CourseFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CourseFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CourseFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>
          }
          findFirst: {
            args: Prisma.CourseFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CourseFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>
          }
          findMany: {
            args: Prisma.CourseFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>[]
          }
          create: {
            args: Prisma.CourseCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>
          }
          createMany: {
            args: Prisma.CourseCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CourseCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>[]
          }
          delete: {
            args: Prisma.CourseDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>
          }
          update: {
            args: Prisma.CourseUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>
          }
          deleteMany: {
            args: Prisma.CourseDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CourseUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CourseUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>
          }
          aggregate: {
            args: Prisma.CourseAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCourse>
          }
          groupBy: {
            args: Prisma.CourseGroupByArgs<ExtArgs>
            result: $Utils.Optional<CourseGroupByOutputType>[]
          }
          count: {
            args: Prisma.CourseCountArgs<ExtArgs>
            result: $Utils.Optional<CourseCountAggregateOutputType> | number
          }
        }
      }
      Enrollment: {
        payload: Prisma.$EnrollmentPayload<ExtArgs>
        fields: Prisma.EnrollmentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EnrollmentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EnrollmentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EnrollmentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EnrollmentPayload>
          }
          findFirst: {
            args: Prisma.EnrollmentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EnrollmentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EnrollmentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EnrollmentPayload>
          }
          findMany: {
            args: Prisma.EnrollmentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EnrollmentPayload>[]
          }
          create: {
            args: Prisma.EnrollmentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EnrollmentPayload>
          }
          createMany: {
            args: Prisma.EnrollmentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.EnrollmentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EnrollmentPayload>[]
          }
          delete: {
            args: Prisma.EnrollmentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EnrollmentPayload>
          }
          update: {
            args: Prisma.EnrollmentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EnrollmentPayload>
          }
          deleteMany: {
            args: Prisma.EnrollmentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EnrollmentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.EnrollmentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EnrollmentPayload>
          }
          aggregate: {
            args: Prisma.EnrollmentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEnrollment>
          }
          groupBy: {
            args: Prisma.EnrollmentGroupByArgs<ExtArgs>
            result: $Utils.Optional<EnrollmentGroupByOutputType>[]
          }
          count: {
            args: Prisma.EnrollmentCountArgs<ExtArgs>
            result: $Utils.Optional<EnrollmentCountAggregateOutputType> | number
          }
        }
      }
      Session: {
        payload: Prisma.$SessionPayload<ExtArgs>
        fields: Prisma.SessionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SessionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SessionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          findFirst: {
            args: Prisma.SessionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SessionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          findMany: {
            args: Prisma.SessionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          create: {
            args: Prisma.SessionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          createMany: {
            args: Prisma.SessionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SessionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          delete: {
            args: Prisma.SessionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          update: {
            args: Prisma.SessionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          deleteMany: {
            args: Prisma.SessionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SessionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SessionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          aggregate: {
            args: Prisma.SessionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSession>
          }
          groupBy: {
            args: Prisma.SessionGroupByArgs<ExtArgs>
            result: $Utils.Optional<SessionGroupByOutputType>[]
          }
          count: {
            args: Prisma.SessionCountArgs<ExtArgs>
            result: $Utils.Optional<SessionCountAggregateOutputType> | number
          }
        }
      }
      AttendanceRecord: {
        payload: Prisma.$AttendanceRecordPayload<ExtArgs>
        fields: Prisma.AttendanceRecordFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AttendanceRecordFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttendanceRecordPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AttendanceRecordFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttendanceRecordPayload>
          }
          findFirst: {
            args: Prisma.AttendanceRecordFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttendanceRecordPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AttendanceRecordFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttendanceRecordPayload>
          }
          findMany: {
            args: Prisma.AttendanceRecordFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttendanceRecordPayload>[]
          }
          create: {
            args: Prisma.AttendanceRecordCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttendanceRecordPayload>
          }
          createMany: {
            args: Prisma.AttendanceRecordCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AttendanceRecordCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttendanceRecordPayload>[]
          }
          delete: {
            args: Prisma.AttendanceRecordDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttendanceRecordPayload>
          }
          update: {
            args: Prisma.AttendanceRecordUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttendanceRecordPayload>
          }
          deleteMany: {
            args: Prisma.AttendanceRecordDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AttendanceRecordUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AttendanceRecordUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttendanceRecordPayload>
          }
          aggregate: {
            args: Prisma.AttendanceRecordAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAttendanceRecord>
          }
          groupBy: {
            args: Prisma.AttendanceRecordGroupByArgs<ExtArgs>
            result: $Utils.Optional<AttendanceRecordGroupByOutputType>[]
          }
          count: {
            args: Prisma.AttendanceRecordCountArgs<ExtArgs>
            result: $Utils.Optional<AttendanceRecordCountAggregateOutputType> | number
          }
        }
      }
      LeaveRequest: {
        payload: Prisma.$LeaveRequestPayload<ExtArgs>
        fields: Prisma.LeaveRequestFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LeaveRequestFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeaveRequestPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LeaveRequestFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeaveRequestPayload>
          }
          findFirst: {
            args: Prisma.LeaveRequestFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeaveRequestPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LeaveRequestFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeaveRequestPayload>
          }
          findMany: {
            args: Prisma.LeaveRequestFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeaveRequestPayload>[]
          }
          create: {
            args: Prisma.LeaveRequestCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeaveRequestPayload>
          }
          createMany: {
            args: Prisma.LeaveRequestCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.LeaveRequestCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeaveRequestPayload>[]
          }
          delete: {
            args: Prisma.LeaveRequestDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeaveRequestPayload>
          }
          update: {
            args: Prisma.LeaveRequestUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeaveRequestPayload>
          }
          deleteMany: {
            args: Prisma.LeaveRequestDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LeaveRequestUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.LeaveRequestUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeaveRequestPayload>
          }
          aggregate: {
            args: Prisma.LeaveRequestAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLeaveRequest>
          }
          groupBy: {
            args: Prisma.LeaveRequestGroupByArgs<ExtArgs>
            result: $Utils.Optional<LeaveRequestGroupByOutputType>[]
          }
          count: {
            args: Prisma.LeaveRequestCountArgs<ExtArgs>
            result: $Utils.Optional<LeaveRequestCountAggregateOutputType> | number
          }
        }
      }
      MakeUpSession: {
        payload: Prisma.$MakeUpSessionPayload<ExtArgs>
        fields: Prisma.MakeUpSessionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MakeUpSessionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MakeUpSessionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MakeUpSessionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MakeUpSessionPayload>
          }
          findFirst: {
            args: Prisma.MakeUpSessionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MakeUpSessionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MakeUpSessionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MakeUpSessionPayload>
          }
          findMany: {
            args: Prisma.MakeUpSessionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MakeUpSessionPayload>[]
          }
          create: {
            args: Prisma.MakeUpSessionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MakeUpSessionPayload>
          }
          createMany: {
            args: Prisma.MakeUpSessionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MakeUpSessionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MakeUpSessionPayload>[]
          }
          delete: {
            args: Prisma.MakeUpSessionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MakeUpSessionPayload>
          }
          update: {
            args: Prisma.MakeUpSessionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MakeUpSessionPayload>
          }
          deleteMany: {
            args: Prisma.MakeUpSessionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MakeUpSessionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.MakeUpSessionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MakeUpSessionPayload>
          }
          aggregate: {
            args: Prisma.MakeUpSessionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMakeUpSession>
          }
          groupBy: {
            args: Prisma.MakeUpSessionGroupByArgs<ExtArgs>
            result: $Utils.Optional<MakeUpSessionGroupByOutputType>[]
          }
          count: {
            args: Prisma.MakeUpSessionCountArgs<ExtArgs>
            result: $Utils.Optional<MakeUpSessionCountAggregateOutputType> | number
          }
        }
      }
      StudentPerformance: {
        payload: Prisma.$StudentPerformancePayload<ExtArgs>
        fields: Prisma.StudentPerformanceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StudentPerformanceFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPerformancePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StudentPerformanceFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPerformancePayload>
          }
          findFirst: {
            args: Prisma.StudentPerformanceFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPerformancePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StudentPerformanceFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPerformancePayload>
          }
          findMany: {
            args: Prisma.StudentPerformanceFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPerformancePayload>[]
          }
          create: {
            args: Prisma.StudentPerformanceCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPerformancePayload>
          }
          createMany: {
            args: Prisma.StudentPerformanceCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.StudentPerformanceCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPerformancePayload>[]
          }
          delete: {
            args: Prisma.StudentPerformanceDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPerformancePayload>
          }
          update: {
            args: Prisma.StudentPerformanceUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPerformancePayload>
          }
          deleteMany: {
            args: Prisma.StudentPerformanceDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.StudentPerformanceUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.StudentPerformanceUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPerformancePayload>
          }
          aggregate: {
            args: Prisma.StudentPerformanceAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStudentPerformance>
          }
          groupBy: {
            args: Prisma.StudentPerformanceGroupByArgs<ExtArgs>
            result: $Utils.Optional<StudentPerformanceGroupByOutputType>[]
          }
          count: {
            args: Prisma.StudentPerformanceCountArgs<ExtArgs>
            result: $Utils.Optional<StudentPerformanceCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    enrollments: number
    teachingSessions: number
    attendanceRecords: number
    updatedAttendances: number
    leaveRequests: number
    approvedLeaveRequests: number
    makeUpSessions: number
    createdMakeUpSessions: number
    performances: number
    createdPerformances: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    enrollments?: boolean | UserCountOutputTypeCountEnrollmentsArgs
    teachingSessions?: boolean | UserCountOutputTypeCountTeachingSessionsArgs
    attendanceRecords?: boolean | UserCountOutputTypeCountAttendanceRecordsArgs
    updatedAttendances?: boolean | UserCountOutputTypeCountUpdatedAttendancesArgs
    leaveRequests?: boolean | UserCountOutputTypeCountLeaveRequestsArgs
    approvedLeaveRequests?: boolean | UserCountOutputTypeCountApprovedLeaveRequestsArgs
    makeUpSessions?: boolean | UserCountOutputTypeCountMakeUpSessionsArgs
    createdMakeUpSessions?: boolean | UserCountOutputTypeCountCreatedMakeUpSessionsArgs
    performances?: boolean | UserCountOutputTypeCountPerformancesArgs
    createdPerformances?: boolean | UserCountOutputTypeCountCreatedPerformancesArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountEnrollmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EnrollmentWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountTeachingSessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAttendanceRecordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AttendanceRecordWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountUpdatedAttendancesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AttendanceRecordWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountLeaveRequestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LeaveRequestWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountApprovedLeaveRequestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LeaveRequestWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountMakeUpSessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MakeUpSessionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCreatedMakeUpSessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MakeUpSessionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountPerformancesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StudentPerformanceWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCreatedPerformancesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StudentPerformanceWhereInput
  }


  /**
   * Count Type CourseCountOutputType
   */

  export type CourseCountOutputType = {
    enrollments: number
    sessions: number
  }

  export type CourseCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    enrollments?: boolean | CourseCountOutputTypeCountEnrollmentsArgs
    sessions?: boolean | CourseCountOutputTypeCountSessionsArgs
  }

  // Custom InputTypes
  /**
   * CourseCountOutputType without action
   */
  export type CourseCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseCountOutputType
     */
    select?: CourseCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CourseCountOutputType without action
   */
  export type CourseCountOutputTypeCountEnrollmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EnrollmentWhereInput
  }

  /**
   * CourseCountOutputType without action
   */
  export type CourseCountOutputTypeCountSessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionWhereInput
  }


  /**
   * Count Type SessionCountOutputType
   */

  export type SessionCountOutputType = {
    attendanceRecords: number
    performances: number
    leaveRequests: number
    makeUpSessions: number
  }

  export type SessionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    attendanceRecords?: boolean | SessionCountOutputTypeCountAttendanceRecordsArgs
    performances?: boolean | SessionCountOutputTypeCountPerformancesArgs
    leaveRequests?: boolean | SessionCountOutputTypeCountLeaveRequestsArgs
    makeUpSessions?: boolean | SessionCountOutputTypeCountMakeUpSessionsArgs
  }

  // Custom InputTypes
  /**
   * SessionCountOutputType without action
   */
  export type SessionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionCountOutputType
     */
    select?: SessionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SessionCountOutputType without action
   */
  export type SessionCountOutputTypeCountAttendanceRecordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AttendanceRecordWhereInput
  }

  /**
   * SessionCountOutputType without action
   */
  export type SessionCountOutputTypeCountPerformancesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StudentPerformanceWhereInput
  }

  /**
   * SessionCountOutputType without action
   */
  export type SessionCountOutputTypeCountLeaveRequestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LeaveRequestWhereInput
  }

  /**
   * SessionCountOutputType without action
   */
  export type SessionCountOutputTypeCountMakeUpSessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MakeUpSessionWhereInput
  }


  /**
   * Count Type LeaveRequestCountOutputType
   */

  export type LeaveRequestCountOutputType = {
    makeUps: number
  }

  export type LeaveRequestCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    makeUps?: boolean | LeaveRequestCountOutputTypeCountMakeUpsArgs
  }

  // Custom InputTypes
  /**
   * LeaveRequestCountOutputType without action
   */
  export type LeaveRequestCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeaveRequestCountOutputType
     */
    select?: LeaveRequestCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * LeaveRequestCountOutputType without action
   */
  export type LeaveRequestCountOutputTypeCountMakeUpsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MakeUpSessionWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
    grade: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
    grade: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    name: string | null
    role: string | null
    email: string | null
    passwordHash: string | null
    grade: number | null
    school: string | null
    parentName: string | null
    parentPhone: string | null
    studentNo: string | null
    createdAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    name: string | null
    role: string | null
    email: string | null
    passwordHash: string | null
    grade: number | null
    school: string | null
    parentName: string | null
    parentPhone: string | null
    studentNo: string | null
    createdAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    name: number
    role: number
    email: number
    passwordHash: number
    grade: number
    school: number
    parentName: number
    parentPhone: number
    studentNo: number
    createdAt: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
    grade?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
    grade?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    name?: true
    role?: true
    email?: true
    passwordHash?: true
    grade?: true
    school?: true
    parentName?: true
    parentPhone?: true
    studentNo?: true
    createdAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    name?: true
    role?: true
    email?: true
    passwordHash?: true
    grade?: true
    school?: true
    parentName?: true
    parentPhone?: true
    studentNo?: true
    createdAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    name?: true
    role?: true
    email?: true
    passwordHash?: true
    grade?: true
    school?: true
    parentName?: true
    parentPhone?: true
    studentNo?: true
    createdAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    name: string
    role: string
    email: string
    passwordHash: string
    grade: number | null
    school: string | null
    parentName: string | null
    parentPhone: string | null
    studentNo: string | null
    createdAt: Date
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    role?: boolean
    email?: boolean
    passwordHash?: boolean
    grade?: boolean
    school?: boolean
    parentName?: boolean
    parentPhone?: boolean
    studentNo?: boolean
    createdAt?: boolean
    enrollments?: boolean | User$enrollmentsArgs<ExtArgs>
    teachingSessions?: boolean | User$teachingSessionsArgs<ExtArgs>
    attendanceRecords?: boolean | User$attendanceRecordsArgs<ExtArgs>
    updatedAttendances?: boolean | User$updatedAttendancesArgs<ExtArgs>
    leaveRequests?: boolean | User$leaveRequestsArgs<ExtArgs>
    approvedLeaveRequests?: boolean | User$approvedLeaveRequestsArgs<ExtArgs>
    makeUpSessions?: boolean | User$makeUpSessionsArgs<ExtArgs>
    createdMakeUpSessions?: boolean | User$createdMakeUpSessionsArgs<ExtArgs>
    performances?: boolean | User$performancesArgs<ExtArgs>
    createdPerformances?: boolean | User$createdPerformancesArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    role?: boolean
    email?: boolean
    passwordHash?: boolean
    grade?: boolean
    school?: boolean
    parentName?: boolean
    parentPhone?: boolean
    studentNo?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    name?: boolean
    role?: boolean
    email?: boolean
    passwordHash?: boolean
    grade?: boolean
    school?: boolean
    parentName?: boolean
    parentPhone?: boolean
    studentNo?: boolean
    createdAt?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    enrollments?: boolean | User$enrollmentsArgs<ExtArgs>
    teachingSessions?: boolean | User$teachingSessionsArgs<ExtArgs>
    attendanceRecords?: boolean | User$attendanceRecordsArgs<ExtArgs>
    updatedAttendances?: boolean | User$updatedAttendancesArgs<ExtArgs>
    leaveRequests?: boolean | User$leaveRequestsArgs<ExtArgs>
    approvedLeaveRequests?: boolean | User$approvedLeaveRequestsArgs<ExtArgs>
    makeUpSessions?: boolean | User$makeUpSessionsArgs<ExtArgs>
    createdMakeUpSessions?: boolean | User$createdMakeUpSessionsArgs<ExtArgs>
    performances?: boolean | User$performancesArgs<ExtArgs>
    createdPerformances?: boolean | User$createdPerformancesArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      enrollments: Prisma.$EnrollmentPayload<ExtArgs>[]
      teachingSessions: Prisma.$SessionPayload<ExtArgs>[]
      attendanceRecords: Prisma.$AttendanceRecordPayload<ExtArgs>[]
      updatedAttendances: Prisma.$AttendanceRecordPayload<ExtArgs>[]
      leaveRequests: Prisma.$LeaveRequestPayload<ExtArgs>[]
      approvedLeaveRequests: Prisma.$LeaveRequestPayload<ExtArgs>[]
      makeUpSessions: Prisma.$MakeUpSessionPayload<ExtArgs>[]
      createdMakeUpSessions: Prisma.$MakeUpSessionPayload<ExtArgs>[]
      performances: Prisma.$StudentPerformancePayload<ExtArgs>[]
      createdPerformances: Prisma.$StudentPerformancePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      role: string
      email: string
      passwordHash: string
      grade: number | null
      school: string | null
      parentName: string | null
      parentPhone: string | null
      studentNo: string | null
      createdAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    enrollments<T extends User$enrollmentsArgs<ExtArgs> = {}>(args?: Subset<T, User$enrollmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EnrollmentPayload<ExtArgs>, T, "findMany"> | Null>
    teachingSessions<T extends User$teachingSessionsArgs<ExtArgs> = {}>(args?: Subset<T, User$teachingSessionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findMany"> | Null>
    attendanceRecords<T extends User$attendanceRecordsArgs<ExtArgs> = {}>(args?: Subset<T, User$attendanceRecordsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AttendanceRecordPayload<ExtArgs>, T, "findMany"> | Null>
    updatedAttendances<T extends User$updatedAttendancesArgs<ExtArgs> = {}>(args?: Subset<T, User$updatedAttendancesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AttendanceRecordPayload<ExtArgs>, T, "findMany"> | Null>
    leaveRequests<T extends User$leaveRequestsArgs<ExtArgs> = {}>(args?: Subset<T, User$leaveRequestsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LeaveRequestPayload<ExtArgs>, T, "findMany"> | Null>
    approvedLeaveRequests<T extends User$approvedLeaveRequestsArgs<ExtArgs> = {}>(args?: Subset<T, User$approvedLeaveRequestsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LeaveRequestPayload<ExtArgs>, T, "findMany"> | Null>
    makeUpSessions<T extends User$makeUpSessionsArgs<ExtArgs> = {}>(args?: Subset<T, User$makeUpSessionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MakeUpSessionPayload<ExtArgs>, T, "findMany"> | Null>
    createdMakeUpSessions<T extends User$createdMakeUpSessionsArgs<ExtArgs> = {}>(args?: Subset<T, User$createdMakeUpSessionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MakeUpSessionPayload<ExtArgs>, T, "findMany"> | Null>
    performances<T extends User$performancesArgs<ExtArgs> = {}>(args?: Subset<T, User$performancesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentPerformancePayload<ExtArgs>, T, "findMany"> | Null>
    createdPerformances<T extends User$createdPerformancesArgs<ExtArgs> = {}>(args?: Subset<T, User$createdPerformancesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentPerformancePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'Int'>
    readonly name: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly passwordHash: FieldRef<"User", 'String'>
    readonly grade: FieldRef<"User", 'Int'>
    readonly school: FieldRef<"User", 'String'>
    readonly parentName: FieldRef<"User", 'String'>
    readonly parentPhone: FieldRef<"User", 'String'>
    readonly studentNo: FieldRef<"User", 'String'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.enrollments
   */
  export type User$enrollmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Enrollment
     */
    select?: EnrollmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnrollmentInclude<ExtArgs> | null
    where?: EnrollmentWhereInput
    orderBy?: EnrollmentOrderByWithRelationInput | EnrollmentOrderByWithRelationInput[]
    cursor?: EnrollmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EnrollmentScalarFieldEnum | EnrollmentScalarFieldEnum[]
  }

  /**
   * User.teachingSessions
   */
  export type User$teachingSessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    where?: SessionWhereInput
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    cursor?: SessionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * User.attendanceRecords
   */
  export type User$attendanceRecordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AttendanceRecord
     */
    select?: AttendanceRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceRecordInclude<ExtArgs> | null
    where?: AttendanceRecordWhereInput
    orderBy?: AttendanceRecordOrderByWithRelationInput | AttendanceRecordOrderByWithRelationInput[]
    cursor?: AttendanceRecordWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AttendanceRecordScalarFieldEnum | AttendanceRecordScalarFieldEnum[]
  }

  /**
   * User.updatedAttendances
   */
  export type User$updatedAttendancesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AttendanceRecord
     */
    select?: AttendanceRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceRecordInclude<ExtArgs> | null
    where?: AttendanceRecordWhereInput
    orderBy?: AttendanceRecordOrderByWithRelationInput | AttendanceRecordOrderByWithRelationInput[]
    cursor?: AttendanceRecordWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AttendanceRecordScalarFieldEnum | AttendanceRecordScalarFieldEnum[]
  }

  /**
   * User.leaveRequests
   */
  export type User$leaveRequestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeaveRequest
     */
    select?: LeaveRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaveRequestInclude<ExtArgs> | null
    where?: LeaveRequestWhereInput
    orderBy?: LeaveRequestOrderByWithRelationInput | LeaveRequestOrderByWithRelationInput[]
    cursor?: LeaveRequestWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LeaveRequestScalarFieldEnum | LeaveRequestScalarFieldEnum[]
  }

  /**
   * User.approvedLeaveRequests
   */
  export type User$approvedLeaveRequestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeaveRequest
     */
    select?: LeaveRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaveRequestInclude<ExtArgs> | null
    where?: LeaveRequestWhereInput
    orderBy?: LeaveRequestOrderByWithRelationInput | LeaveRequestOrderByWithRelationInput[]
    cursor?: LeaveRequestWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LeaveRequestScalarFieldEnum | LeaveRequestScalarFieldEnum[]
  }

  /**
   * User.makeUpSessions
   */
  export type User$makeUpSessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MakeUpSession
     */
    select?: MakeUpSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MakeUpSessionInclude<ExtArgs> | null
    where?: MakeUpSessionWhereInput
    orderBy?: MakeUpSessionOrderByWithRelationInput | MakeUpSessionOrderByWithRelationInput[]
    cursor?: MakeUpSessionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MakeUpSessionScalarFieldEnum | MakeUpSessionScalarFieldEnum[]
  }

  /**
   * User.createdMakeUpSessions
   */
  export type User$createdMakeUpSessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MakeUpSession
     */
    select?: MakeUpSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MakeUpSessionInclude<ExtArgs> | null
    where?: MakeUpSessionWhereInput
    orderBy?: MakeUpSessionOrderByWithRelationInput | MakeUpSessionOrderByWithRelationInput[]
    cursor?: MakeUpSessionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MakeUpSessionScalarFieldEnum | MakeUpSessionScalarFieldEnum[]
  }

  /**
   * User.performances
   */
  export type User$performancesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentPerformance
     */
    select?: StudentPerformanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentPerformanceInclude<ExtArgs> | null
    where?: StudentPerformanceWhereInput
    orderBy?: StudentPerformanceOrderByWithRelationInput | StudentPerformanceOrderByWithRelationInput[]
    cursor?: StudentPerformanceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StudentPerformanceScalarFieldEnum | StudentPerformanceScalarFieldEnum[]
  }

  /**
   * User.createdPerformances
   */
  export type User$createdPerformancesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentPerformance
     */
    select?: StudentPerformanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentPerformanceInclude<ExtArgs> | null
    where?: StudentPerformanceWhereInput
    orderBy?: StudentPerformanceOrderByWithRelationInput | StudentPerformanceOrderByWithRelationInput[]
    cursor?: StudentPerformanceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StudentPerformanceScalarFieldEnum | StudentPerformanceScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Course
   */

  export type AggregateCourse = {
    _count: CourseCountAggregateOutputType | null
    _avg: CourseAvgAggregateOutputType | null
    _sum: CourseSumAggregateOutputType | null
    _min: CourseMinAggregateOutputType | null
    _max: CourseMaxAggregateOutputType | null
  }

  export type CourseAvgAggregateOutputType = {
    id: number | null
  }

  export type CourseSumAggregateOutputType = {
    id: number | null
  }

  export type CourseMinAggregateOutputType = {
    id: number | null
    name: string | null
    level: string | null
    startDate: Date | null
    endDate: Date | null
    createdAt: Date | null
  }

  export type CourseMaxAggregateOutputType = {
    id: number | null
    name: string | null
    level: string | null
    startDate: Date | null
    endDate: Date | null
    createdAt: Date | null
  }

  export type CourseCountAggregateOutputType = {
    id: number
    name: number
    level: number
    startDate: number
    endDate: number
    createdAt: number
    _all: number
  }


  export type CourseAvgAggregateInputType = {
    id?: true
  }

  export type CourseSumAggregateInputType = {
    id?: true
  }

  export type CourseMinAggregateInputType = {
    id?: true
    name?: true
    level?: true
    startDate?: true
    endDate?: true
    createdAt?: true
  }

  export type CourseMaxAggregateInputType = {
    id?: true
    name?: true
    level?: true
    startDate?: true
    endDate?: true
    createdAt?: true
  }

  export type CourseCountAggregateInputType = {
    id?: true
    name?: true
    level?: true
    startDate?: true
    endDate?: true
    createdAt?: true
    _all?: true
  }

  export type CourseAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Course to aggregate.
     */
    where?: CourseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Courses to fetch.
     */
    orderBy?: CourseOrderByWithRelationInput | CourseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CourseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Courses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Courses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Courses
    **/
    _count?: true | CourseCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CourseAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CourseSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CourseMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CourseMaxAggregateInputType
  }

  export type GetCourseAggregateType<T extends CourseAggregateArgs> = {
        [P in keyof T & keyof AggregateCourse]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCourse[P]>
      : GetScalarType<T[P], AggregateCourse[P]>
  }




  export type CourseGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CourseWhereInput
    orderBy?: CourseOrderByWithAggregationInput | CourseOrderByWithAggregationInput[]
    by: CourseScalarFieldEnum[] | CourseScalarFieldEnum
    having?: CourseScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CourseCountAggregateInputType | true
    _avg?: CourseAvgAggregateInputType
    _sum?: CourseSumAggregateInputType
    _min?: CourseMinAggregateInputType
    _max?: CourseMaxAggregateInputType
  }

  export type CourseGroupByOutputType = {
    id: number
    name: string
    level: string | null
    startDate: Date
    endDate: Date
    createdAt: Date
    _count: CourseCountAggregateOutputType | null
    _avg: CourseAvgAggregateOutputType | null
    _sum: CourseSumAggregateOutputType | null
    _min: CourseMinAggregateOutputType | null
    _max: CourseMaxAggregateOutputType | null
  }

  type GetCourseGroupByPayload<T extends CourseGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CourseGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CourseGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CourseGroupByOutputType[P]>
            : GetScalarType<T[P], CourseGroupByOutputType[P]>
        }
      >
    >


  export type CourseSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    level?: boolean
    startDate?: boolean
    endDate?: boolean
    createdAt?: boolean
    enrollments?: boolean | Course$enrollmentsArgs<ExtArgs>
    sessions?: boolean | Course$sessionsArgs<ExtArgs>
    _count?: boolean | CourseCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["course"]>

  export type CourseSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    level?: boolean
    startDate?: boolean
    endDate?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["course"]>

  export type CourseSelectScalar = {
    id?: boolean
    name?: boolean
    level?: boolean
    startDate?: boolean
    endDate?: boolean
    createdAt?: boolean
  }

  export type CourseInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    enrollments?: boolean | Course$enrollmentsArgs<ExtArgs>
    sessions?: boolean | Course$sessionsArgs<ExtArgs>
    _count?: boolean | CourseCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CourseIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $CoursePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Course"
    objects: {
      enrollments: Prisma.$EnrollmentPayload<ExtArgs>[]
      sessions: Prisma.$SessionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      level: string | null
      startDate: Date
      endDate: Date
      createdAt: Date
    }, ExtArgs["result"]["course"]>
    composites: {}
  }

  type CourseGetPayload<S extends boolean | null | undefined | CourseDefaultArgs> = $Result.GetResult<Prisma.$CoursePayload, S>

  type CourseCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CourseFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CourseCountAggregateInputType | true
    }

  export interface CourseDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Course'], meta: { name: 'Course' } }
    /**
     * Find zero or one Course that matches the filter.
     * @param {CourseFindUniqueArgs} args - Arguments to find a Course
     * @example
     * // Get one Course
     * const course = await prisma.course.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CourseFindUniqueArgs>(args: SelectSubset<T, CourseFindUniqueArgs<ExtArgs>>): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Course that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CourseFindUniqueOrThrowArgs} args - Arguments to find a Course
     * @example
     * // Get one Course
     * const course = await prisma.course.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CourseFindUniqueOrThrowArgs>(args: SelectSubset<T, CourseFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Course that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseFindFirstArgs} args - Arguments to find a Course
     * @example
     * // Get one Course
     * const course = await prisma.course.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CourseFindFirstArgs>(args?: SelectSubset<T, CourseFindFirstArgs<ExtArgs>>): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Course that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseFindFirstOrThrowArgs} args - Arguments to find a Course
     * @example
     * // Get one Course
     * const course = await prisma.course.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CourseFindFirstOrThrowArgs>(args?: SelectSubset<T, CourseFindFirstOrThrowArgs<ExtArgs>>): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Courses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Courses
     * const courses = await prisma.course.findMany()
     * 
     * // Get first 10 Courses
     * const courses = await prisma.course.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const courseWithIdOnly = await prisma.course.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CourseFindManyArgs>(args?: SelectSubset<T, CourseFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Course.
     * @param {CourseCreateArgs} args - Arguments to create a Course.
     * @example
     * // Create one Course
     * const Course = await prisma.course.create({
     *   data: {
     *     // ... data to create a Course
     *   }
     * })
     * 
     */
    create<T extends CourseCreateArgs>(args: SelectSubset<T, CourseCreateArgs<ExtArgs>>): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Courses.
     * @param {CourseCreateManyArgs} args - Arguments to create many Courses.
     * @example
     * // Create many Courses
     * const course = await prisma.course.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CourseCreateManyArgs>(args?: SelectSubset<T, CourseCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Courses and returns the data saved in the database.
     * @param {CourseCreateManyAndReturnArgs} args - Arguments to create many Courses.
     * @example
     * // Create many Courses
     * const course = await prisma.course.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Courses and only return the `id`
     * const courseWithIdOnly = await prisma.course.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CourseCreateManyAndReturnArgs>(args?: SelectSubset<T, CourseCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Course.
     * @param {CourseDeleteArgs} args - Arguments to delete one Course.
     * @example
     * // Delete one Course
     * const Course = await prisma.course.delete({
     *   where: {
     *     // ... filter to delete one Course
     *   }
     * })
     * 
     */
    delete<T extends CourseDeleteArgs>(args: SelectSubset<T, CourseDeleteArgs<ExtArgs>>): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Course.
     * @param {CourseUpdateArgs} args - Arguments to update one Course.
     * @example
     * // Update one Course
     * const course = await prisma.course.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CourseUpdateArgs>(args: SelectSubset<T, CourseUpdateArgs<ExtArgs>>): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Courses.
     * @param {CourseDeleteManyArgs} args - Arguments to filter Courses to delete.
     * @example
     * // Delete a few Courses
     * const { count } = await prisma.course.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CourseDeleteManyArgs>(args?: SelectSubset<T, CourseDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Courses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Courses
     * const course = await prisma.course.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CourseUpdateManyArgs>(args: SelectSubset<T, CourseUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Course.
     * @param {CourseUpsertArgs} args - Arguments to update or create a Course.
     * @example
     * // Update or create a Course
     * const course = await prisma.course.upsert({
     *   create: {
     *     // ... data to create a Course
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Course we want to update
     *   }
     * })
     */
    upsert<T extends CourseUpsertArgs>(args: SelectSubset<T, CourseUpsertArgs<ExtArgs>>): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Courses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseCountArgs} args - Arguments to filter Courses to count.
     * @example
     * // Count the number of Courses
     * const count = await prisma.course.count({
     *   where: {
     *     // ... the filter for the Courses we want to count
     *   }
     * })
    **/
    count<T extends CourseCountArgs>(
      args?: Subset<T, CourseCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CourseCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Course.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CourseAggregateArgs>(args: Subset<T, CourseAggregateArgs>): Prisma.PrismaPromise<GetCourseAggregateType<T>>

    /**
     * Group by Course.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CourseGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CourseGroupByArgs['orderBy'] }
        : { orderBy?: CourseGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CourseGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCourseGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Course model
   */
  readonly fields: CourseFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Course.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CourseClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    enrollments<T extends Course$enrollmentsArgs<ExtArgs> = {}>(args?: Subset<T, Course$enrollmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EnrollmentPayload<ExtArgs>, T, "findMany"> | Null>
    sessions<T extends Course$sessionsArgs<ExtArgs> = {}>(args?: Subset<T, Course$sessionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Course model
   */ 
  interface CourseFieldRefs {
    readonly id: FieldRef<"Course", 'Int'>
    readonly name: FieldRef<"Course", 'String'>
    readonly level: FieldRef<"Course", 'String'>
    readonly startDate: FieldRef<"Course", 'DateTime'>
    readonly endDate: FieldRef<"Course", 'DateTime'>
    readonly createdAt: FieldRef<"Course", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Course findUnique
   */
  export type CourseFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * Filter, which Course to fetch.
     */
    where: CourseWhereUniqueInput
  }

  /**
   * Course findUniqueOrThrow
   */
  export type CourseFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * Filter, which Course to fetch.
     */
    where: CourseWhereUniqueInput
  }

  /**
   * Course findFirst
   */
  export type CourseFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * Filter, which Course to fetch.
     */
    where?: CourseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Courses to fetch.
     */
    orderBy?: CourseOrderByWithRelationInput | CourseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Courses.
     */
    cursor?: CourseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Courses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Courses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Courses.
     */
    distinct?: CourseScalarFieldEnum | CourseScalarFieldEnum[]
  }

  /**
   * Course findFirstOrThrow
   */
  export type CourseFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * Filter, which Course to fetch.
     */
    where?: CourseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Courses to fetch.
     */
    orderBy?: CourseOrderByWithRelationInput | CourseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Courses.
     */
    cursor?: CourseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Courses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Courses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Courses.
     */
    distinct?: CourseScalarFieldEnum | CourseScalarFieldEnum[]
  }

  /**
   * Course findMany
   */
  export type CourseFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * Filter, which Courses to fetch.
     */
    where?: CourseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Courses to fetch.
     */
    orderBy?: CourseOrderByWithRelationInput | CourseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Courses.
     */
    cursor?: CourseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Courses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Courses.
     */
    skip?: number
    distinct?: CourseScalarFieldEnum | CourseScalarFieldEnum[]
  }

  /**
   * Course create
   */
  export type CourseCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * The data needed to create a Course.
     */
    data: XOR<CourseCreateInput, CourseUncheckedCreateInput>
  }

  /**
   * Course createMany
   */
  export type CourseCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Courses.
     */
    data: CourseCreateManyInput | CourseCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Course createManyAndReturn
   */
  export type CourseCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Courses.
     */
    data: CourseCreateManyInput | CourseCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Course update
   */
  export type CourseUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * The data needed to update a Course.
     */
    data: XOR<CourseUpdateInput, CourseUncheckedUpdateInput>
    /**
     * Choose, which Course to update.
     */
    where: CourseWhereUniqueInput
  }

  /**
   * Course updateMany
   */
  export type CourseUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Courses.
     */
    data: XOR<CourseUpdateManyMutationInput, CourseUncheckedUpdateManyInput>
    /**
     * Filter which Courses to update
     */
    where?: CourseWhereInput
  }

  /**
   * Course upsert
   */
  export type CourseUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * The filter to search for the Course to update in case it exists.
     */
    where: CourseWhereUniqueInput
    /**
     * In case the Course found by the `where` argument doesn't exist, create a new Course with this data.
     */
    create: XOR<CourseCreateInput, CourseUncheckedCreateInput>
    /**
     * In case the Course was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CourseUpdateInput, CourseUncheckedUpdateInput>
  }

  /**
   * Course delete
   */
  export type CourseDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * Filter which Course to delete.
     */
    where: CourseWhereUniqueInput
  }

  /**
   * Course deleteMany
   */
  export type CourseDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Courses to delete
     */
    where?: CourseWhereInput
  }

  /**
   * Course.enrollments
   */
  export type Course$enrollmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Enrollment
     */
    select?: EnrollmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnrollmentInclude<ExtArgs> | null
    where?: EnrollmentWhereInput
    orderBy?: EnrollmentOrderByWithRelationInput | EnrollmentOrderByWithRelationInput[]
    cursor?: EnrollmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EnrollmentScalarFieldEnum | EnrollmentScalarFieldEnum[]
  }

  /**
   * Course.sessions
   */
  export type Course$sessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    where?: SessionWhereInput
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    cursor?: SessionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Course without action
   */
  export type CourseDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
  }


  /**
   * Model Enrollment
   */

  export type AggregateEnrollment = {
    _count: EnrollmentCountAggregateOutputType | null
    _avg: EnrollmentAvgAggregateOutputType | null
    _sum: EnrollmentSumAggregateOutputType | null
    _min: EnrollmentMinAggregateOutputType | null
    _max: EnrollmentMaxAggregateOutputType | null
  }

  export type EnrollmentAvgAggregateOutputType = {
    id: number | null
    courseId: number | null
    studentId: number | null
  }

  export type EnrollmentSumAggregateOutputType = {
    id: number | null
    courseId: number | null
    studentId: number | null
  }

  export type EnrollmentMinAggregateOutputType = {
    id: number | null
    courseId: number | null
    studentId: number | null
  }

  export type EnrollmentMaxAggregateOutputType = {
    id: number | null
    courseId: number | null
    studentId: number | null
  }

  export type EnrollmentCountAggregateOutputType = {
    id: number
    courseId: number
    studentId: number
    _all: number
  }


  export type EnrollmentAvgAggregateInputType = {
    id?: true
    courseId?: true
    studentId?: true
  }

  export type EnrollmentSumAggregateInputType = {
    id?: true
    courseId?: true
    studentId?: true
  }

  export type EnrollmentMinAggregateInputType = {
    id?: true
    courseId?: true
    studentId?: true
  }

  export type EnrollmentMaxAggregateInputType = {
    id?: true
    courseId?: true
    studentId?: true
  }

  export type EnrollmentCountAggregateInputType = {
    id?: true
    courseId?: true
    studentId?: true
    _all?: true
  }

  export type EnrollmentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Enrollment to aggregate.
     */
    where?: EnrollmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Enrollments to fetch.
     */
    orderBy?: EnrollmentOrderByWithRelationInput | EnrollmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EnrollmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Enrollments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Enrollments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Enrollments
    **/
    _count?: true | EnrollmentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EnrollmentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EnrollmentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EnrollmentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EnrollmentMaxAggregateInputType
  }

  export type GetEnrollmentAggregateType<T extends EnrollmentAggregateArgs> = {
        [P in keyof T & keyof AggregateEnrollment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEnrollment[P]>
      : GetScalarType<T[P], AggregateEnrollment[P]>
  }




  export type EnrollmentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EnrollmentWhereInput
    orderBy?: EnrollmentOrderByWithAggregationInput | EnrollmentOrderByWithAggregationInput[]
    by: EnrollmentScalarFieldEnum[] | EnrollmentScalarFieldEnum
    having?: EnrollmentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EnrollmentCountAggregateInputType | true
    _avg?: EnrollmentAvgAggregateInputType
    _sum?: EnrollmentSumAggregateInputType
    _min?: EnrollmentMinAggregateInputType
    _max?: EnrollmentMaxAggregateInputType
  }

  export type EnrollmentGroupByOutputType = {
    id: number
    courseId: number
    studentId: number
    _count: EnrollmentCountAggregateOutputType | null
    _avg: EnrollmentAvgAggregateOutputType | null
    _sum: EnrollmentSumAggregateOutputType | null
    _min: EnrollmentMinAggregateOutputType | null
    _max: EnrollmentMaxAggregateOutputType | null
  }

  type GetEnrollmentGroupByPayload<T extends EnrollmentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EnrollmentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EnrollmentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EnrollmentGroupByOutputType[P]>
            : GetScalarType<T[P], EnrollmentGroupByOutputType[P]>
        }
      >
    >


  export type EnrollmentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    courseId?: boolean
    studentId?: boolean
    course?: boolean | CourseDefaultArgs<ExtArgs>
    student?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["enrollment"]>

  export type EnrollmentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    courseId?: boolean
    studentId?: boolean
    course?: boolean | CourseDefaultArgs<ExtArgs>
    student?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["enrollment"]>

  export type EnrollmentSelectScalar = {
    id?: boolean
    courseId?: boolean
    studentId?: boolean
  }

  export type EnrollmentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    course?: boolean | CourseDefaultArgs<ExtArgs>
    student?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type EnrollmentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    course?: boolean | CourseDefaultArgs<ExtArgs>
    student?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $EnrollmentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Enrollment"
    objects: {
      course: Prisma.$CoursePayload<ExtArgs>
      student: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      courseId: number
      studentId: number
    }, ExtArgs["result"]["enrollment"]>
    composites: {}
  }

  type EnrollmentGetPayload<S extends boolean | null | undefined | EnrollmentDefaultArgs> = $Result.GetResult<Prisma.$EnrollmentPayload, S>

  type EnrollmentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<EnrollmentFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: EnrollmentCountAggregateInputType | true
    }

  export interface EnrollmentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Enrollment'], meta: { name: 'Enrollment' } }
    /**
     * Find zero or one Enrollment that matches the filter.
     * @param {EnrollmentFindUniqueArgs} args - Arguments to find a Enrollment
     * @example
     * // Get one Enrollment
     * const enrollment = await prisma.enrollment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EnrollmentFindUniqueArgs>(args: SelectSubset<T, EnrollmentFindUniqueArgs<ExtArgs>>): Prisma__EnrollmentClient<$Result.GetResult<Prisma.$EnrollmentPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Enrollment that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {EnrollmentFindUniqueOrThrowArgs} args - Arguments to find a Enrollment
     * @example
     * // Get one Enrollment
     * const enrollment = await prisma.enrollment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EnrollmentFindUniqueOrThrowArgs>(args: SelectSubset<T, EnrollmentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EnrollmentClient<$Result.GetResult<Prisma.$EnrollmentPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Enrollment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EnrollmentFindFirstArgs} args - Arguments to find a Enrollment
     * @example
     * // Get one Enrollment
     * const enrollment = await prisma.enrollment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EnrollmentFindFirstArgs>(args?: SelectSubset<T, EnrollmentFindFirstArgs<ExtArgs>>): Prisma__EnrollmentClient<$Result.GetResult<Prisma.$EnrollmentPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Enrollment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EnrollmentFindFirstOrThrowArgs} args - Arguments to find a Enrollment
     * @example
     * // Get one Enrollment
     * const enrollment = await prisma.enrollment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EnrollmentFindFirstOrThrowArgs>(args?: SelectSubset<T, EnrollmentFindFirstOrThrowArgs<ExtArgs>>): Prisma__EnrollmentClient<$Result.GetResult<Prisma.$EnrollmentPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Enrollments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EnrollmentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Enrollments
     * const enrollments = await prisma.enrollment.findMany()
     * 
     * // Get first 10 Enrollments
     * const enrollments = await prisma.enrollment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const enrollmentWithIdOnly = await prisma.enrollment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EnrollmentFindManyArgs>(args?: SelectSubset<T, EnrollmentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EnrollmentPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Enrollment.
     * @param {EnrollmentCreateArgs} args - Arguments to create a Enrollment.
     * @example
     * // Create one Enrollment
     * const Enrollment = await prisma.enrollment.create({
     *   data: {
     *     // ... data to create a Enrollment
     *   }
     * })
     * 
     */
    create<T extends EnrollmentCreateArgs>(args: SelectSubset<T, EnrollmentCreateArgs<ExtArgs>>): Prisma__EnrollmentClient<$Result.GetResult<Prisma.$EnrollmentPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Enrollments.
     * @param {EnrollmentCreateManyArgs} args - Arguments to create many Enrollments.
     * @example
     * // Create many Enrollments
     * const enrollment = await prisma.enrollment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EnrollmentCreateManyArgs>(args?: SelectSubset<T, EnrollmentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Enrollments and returns the data saved in the database.
     * @param {EnrollmentCreateManyAndReturnArgs} args - Arguments to create many Enrollments.
     * @example
     * // Create many Enrollments
     * const enrollment = await prisma.enrollment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Enrollments and only return the `id`
     * const enrollmentWithIdOnly = await prisma.enrollment.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends EnrollmentCreateManyAndReturnArgs>(args?: SelectSubset<T, EnrollmentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EnrollmentPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Enrollment.
     * @param {EnrollmentDeleteArgs} args - Arguments to delete one Enrollment.
     * @example
     * // Delete one Enrollment
     * const Enrollment = await prisma.enrollment.delete({
     *   where: {
     *     // ... filter to delete one Enrollment
     *   }
     * })
     * 
     */
    delete<T extends EnrollmentDeleteArgs>(args: SelectSubset<T, EnrollmentDeleteArgs<ExtArgs>>): Prisma__EnrollmentClient<$Result.GetResult<Prisma.$EnrollmentPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Enrollment.
     * @param {EnrollmentUpdateArgs} args - Arguments to update one Enrollment.
     * @example
     * // Update one Enrollment
     * const enrollment = await prisma.enrollment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EnrollmentUpdateArgs>(args: SelectSubset<T, EnrollmentUpdateArgs<ExtArgs>>): Prisma__EnrollmentClient<$Result.GetResult<Prisma.$EnrollmentPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Enrollments.
     * @param {EnrollmentDeleteManyArgs} args - Arguments to filter Enrollments to delete.
     * @example
     * // Delete a few Enrollments
     * const { count } = await prisma.enrollment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EnrollmentDeleteManyArgs>(args?: SelectSubset<T, EnrollmentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Enrollments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EnrollmentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Enrollments
     * const enrollment = await prisma.enrollment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EnrollmentUpdateManyArgs>(args: SelectSubset<T, EnrollmentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Enrollment.
     * @param {EnrollmentUpsertArgs} args - Arguments to update or create a Enrollment.
     * @example
     * // Update or create a Enrollment
     * const enrollment = await prisma.enrollment.upsert({
     *   create: {
     *     // ... data to create a Enrollment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Enrollment we want to update
     *   }
     * })
     */
    upsert<T extends EnrollmentUpsertArgs>(args: SelectSubset<T, EnrollmentUpsertArgs<ExtArgs>>): Prisma__EnrollmentClient<$Result.GetResult<Prisma.$EnrollmentPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Enrollments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EnrollmentCountArgs} args - Arguments to filter Enrollments to count.
     * @example
     * // Count the number of Enrollments
     * const count = await prisma.enrollment.count({
     *   where: {
     *     // ... the filter for the Enrollments we want to count
     *   }
     * })
    **/
    count<T extends EnrollmentCountArgs>(
      args?: Subset<T, EnrollmentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EnrollmentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Enrollment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EnrollmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EnrollmentAggregateArgs>(args: Subset<T, EnrollmentAggregateArgs>): Prisma.PrismaPromise<GetEnrollmentAggregateType<T>>

    /**
     * Group by Enrollment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EnrollmentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EnrollmentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EnrollmentGroupByArgs['orderBy'] }
        : { orderBy?: EnrollmentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EnrollmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEnrollmentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Enrollment model
   */
  readonly fields: EnrollmentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Enrollment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EnrollmentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    course<T extends CourseDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CourseDefaultArgs<ExtArgs>>): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    student<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Enrollment model
   */ 
  interface EnrollmentFieldRefs {
    readonly id: FieldRef<"Enrollment", 'Int'>
    readonly courseId: FieldRef<"Enrollment", 'Int'>
    readonly studentId: FieldRef<"Enrollment", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Enrollment findUnique
   */
  export type EnrollmentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Enrollment
     */
    select?: EnrollmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnrollmentInclude<ExtArgs> | null
    /**
     * Filter, which Enrollment to fetch.
     */
    where: EnrollmentWhereUniqueInput
  }

  /**
   * Enrollment findUniqueOrThrow
   */
  export type EnrollmentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Enrollment
     */
    select?: EnrollmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnrollmentInclude<ExtArgs> | null
    /**
     * Filter, which Enrollment to fetch.
     */
    where: EnrollmentWhereUniqueInput
  }

  /**
   * Enrollment findFirst
   */
  export type EnrollmentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Enrollment
     */
    select?: EnrollmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnrollmentInclude<ExtArgs> | null
    /**
     * Filter, which Enrollment to fetch.
     */
    where?: EnrollmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Enrollments to fetch.
     */
    orderBy?: EnrollmentOrderByWithRelationInput | EnrollmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Enrollments.
     */
    cursor?: EnrollmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Enrollments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Enrollments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Enrollments.
     */
    distinct?: EnrollmentScalarFieldEnum | EnrollmentScalarFieldEnum[]
  }

  /**
   * Enrollment findFirstOrThrow
   */
  export type EnrollmentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Enrollment
     */
    select?: EnrollmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnrollmentInclude<ExtArgs> | null
    /**
     * Filter, which Enrollment to fetch.
     */
    where?: EnrollmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Enrollments to fetch.
     */
    orderBy?: EnrollmentOrderByWithRelationInput | EnrollmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Enrollments.
     */
    cursor?: EnrollmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Enrollments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Enrollments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Enrollments.
     */
    distinct?: EnrollmentScalarFieldEnum | EnrollmentScalarFieldEnum[]
  }

  /**
   * Enrollment findMany
   */
  export type EnrollmentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Enrollment
     */
    select?: EnrollmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnrollmentInclude<ExtArgs> | null
    /**
     * Filter, which Enrollments to fetch.
     */
    where?: EnrollmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Enrollments to fetch.
     */
    orderBy?: EnrollmentOrderByWithRelationInput | EnrollmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Enrollments.
     */
    cursor?: EnrollmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Enrollments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Enrollments.
     */
    skip?: number
    distinct?: EnrollmentScalarFieldEnum | EnrollmentScalarFieldEnum[]
  }

  /**
   * Enrollment create
   */
  export type EnrollmentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Enrollment
     */
    select?: EnrollmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnrollmentInclude<ExtArgs> | null
    /**
     * The data needed to create a Enrollment.
     */
    data: XOR<EnrollmentCreateInput, EnrollmentUncheckedCreateInput>
  }

  /**
   * Enrollment createMany
   */
  export type EnrollmentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Enrollments.
     */
    data: EnrollmentCreateManyInput | EnrollmentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Enrollment createManyAndReturn
   */
  export type EnrollmentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Enrollment
     */
    select?: EnrollmentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Enrollments.
     */
    data: EnrollmentCreateManyInput | EnrollmentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnrollmentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Enrollment update
   */
  export type EnrollmentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Enrollment
     */
    select?: EnrollmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnrollmentInclude<ExtArgs> | null
    /**
     * The data needed to update a Enrollment.
     */
    data: XOR<EnrollmentUpdateInput, EnrollmentUncheckedUpdateInput>
    /**
     * Choose, which Enrollment to update.
     */
    where: EnrollmentWhereUniqueInput
  }

  /**
   * Enrollment updateMany
   */
  export type EnrollmentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Enrollments.
     */
    data: XOR<EnrollmentUpdateManyMutationInput, EnrollmentUncheckedUpdateManyInput>
    /**
     * Filter which Enrollments to update
     */
    where?: EnrollmentWhereInput
  }

  /**
   * Enrollment upsert
   */
  export type EnrollmentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Enrollment
     */
    select?: EnrollmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnrollmentInclude<ExtArgs> | null
    /**
     * The filter to search for the Enrollment to update in case it exists.
     */
    where: EnrollmentWhereUniqueInput
    /**
     * In case the Enrollment found by the `where` argument doesn't exist, create a new Enrollment with this data.
     */
    create: XOR<EnrollmentCreateInput, EnrollmentUncheckedCreateInput>
    /**
     * In case the Enrollment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EnrollmentUpdateInput, EnrollmentUncheckedUpdateInput>
  }

  /**
   * Enrollment delete
   */
  export type EnrollmentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Enrollment
     */
    select?: EnrollmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnrollmentInclude<ExtArgs> | null
    /**
     * Filter which Enrollment to delete.
     */
    where: EnrollmentWhereUniqueInput
  }

  /**
   * Enrollment deleteMany
   */
  export type EnrollmentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Enrollments to delete
     */
    where?: EnrollmentWhereInput
  }

  /**
   * Enrollment without action
   */
  export type EnrollmentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Enrollment
     */
    select?: EnrollmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnrollmentInclude<ExtArgs> | null
  }


  /**
   * Model Session
   */

  export type AggregateSession = {
    _count: SessionCountAggregateOutputType | null
    _avg: SessionAvgAggregateOutputType | null
    _sum: SessionSumAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  export type SessionAvgAggregateOutputType = {
    id: number | null
    courseId: number | null
    teacherId: number | null
  }

  export type SessionSumAggregateOutputType = {
    id: number | null
    courseId: number | null
    teacherId: number | null
  }

  export type SessionMinAggregateOutputType = {
    id: number | null
    courseId: number | null
    sessionDate: Date | null
    startTime: string | null
    endTime: string | null
    teacherId: number | null
    content: string | null
  }

  export type SessionMaxAggregateOutputType = {
    id: number | null
    courseId: number | null
    sessionDate: Date | null
    startTime: string | null
    endTime: string | null
    teacherId: number | null
    content: string | null
  }

  export type SessionCountAggregateOutputType = {
    id: number
    courseId: number
    sessionDate: number
    startTime: number
    endTime: number
    teacherId: number
    content: number
    _all: number
  }


  export type SessionAvgAggregateInputType = {
    id?: true
    courseId?: true
    teacherId?: true
  }

  export type SessionSumAggregateInputType = {
    id?: true
    courseId?: true
    teacherId?: true
  }

  export type SessionMinAggregateInputType = {
    id?: true
    courseId?: true
    sessionDate?: true
    startTime?: true
    endTime?: true
    teacherId?: true
    content?: true
  }

  export type SessionMaxAggregateInputType = {
    id?: true
    courseId?: true
    sessionDate?: true
    startTime?: true
    endTime?: true
    teacherId?: true
    content?: true
  }

  export type SessionCountAggregateInputType = {
    id?: true
    courseId?: true
    sessionDate?: true
    startTime?: true
    endTime?: true
    teacherId?: true
    content?: true
    _all?: true
  }

  export type SessionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Session to aggregate.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sessions
    **/
    _count?: true | SessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SessionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SessionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SessionMaxAggregateInputType
  }

  export type GetSessionAggregateType<T extends SessionAggregateArgs> = {
        [P in keyof T & keyof AggregateSession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSession[P]>
      : GetScalarType<T[P], AggregateSession[P]>
  }




  export type SessionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionWhereInput
    orderBy?: SessionOrderByWithAggregationInput | SessionOrderByWithAggregationInput[]
    by: SessionScalarFieldEnum[] | SessionScalarFieldEnum
    having?: SessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SessionCountAggregateInputType | true
    _avg?: SessionAvgAggregateInputType
    _sum?: SessionSumAggregateInputType
    _min?: SessionMinAggregateInputType
    _max?: SessionMaxAggregateInputType
  }

  export type SessionGroupByOutputType = {
    id: number
    courseId: number
    sessionDate: Date
    startTime: string
    endTime: string
    teacherId: number | null
    content: string | null
    _count: SessionCountAggregateOutputType | null
    _avg: SessionAvgAggregateOutputType | null
    _sum: SessionSumAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  type GetSessionGroupByPayload<T extends SessionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SessionGroupByOutputType[P]>
            : GetScalarType<T[P], SessionGroupByOutputType[P]>
        }
      >
    >


  export type SessionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    courseId?: boolean
    sessionDate?: boolean
    startTime?: boolean
    endTime?: boolean
    teacherId?: boolean
    content?: boolean
    course?: boolean | CourseDefaultArgs<ExtArgs>
    teacher?: boolean | Session$teacherArgs<ExtArgs>
    attendanceRecords?: boolean | Session$attendanceRecordsArgs<ExtArgs>
    performances?: boolean | Session$performancesArgs<ExtArgs>
    leaveRequests?: boolean | Session$leaveRequestsArgs<ExtArgs>
    makeUpSessions?: boolean | Session$makeUpSessionsArgs<ExtArgs>
    _count?: boolean | SessionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["session"]>

  export type SessionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    courseId?: boolean
    sessionDate?: boolean
    startTime?: boolean
    endTime?: boolean
    teacherId?: boolean
    content?: boolean
    course?: boolean | CourseDefaultArgs<ExtArgs>
    teacher?: boolean | Session$teacherArgs<ExtArgs>
  }, ExtArgs["result"]["session"]>

  export type SessionSelectScalar = {
    id?: boolean
    courseId?: boolean
    sessionDate?: boolean
    startTime?: boolean
    endTime?: boolean
    teacherId?: boolean
    content?: boolean
  }

  export type SessionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    course?: boolean | CourseDefaultArgs<ExtArgs>
    teacher?: boolean | Session$teacherArgs<ExtArgs>
    attendanceRecords?: boolean | Session$attendanceRecordsArgs<ExtArgs>
    performances?: boolean | Session$performancesArgs<ExtArgs>
    leaveRequests?: boolean | Session$leaveRequestsArgs<ExtArgs>
    makeUpSessions?: boolean | Session$makeUpSessionsArgs<ExtArgs>
    _count?: boolean | SessionCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type SessionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    course?: boolean | CourseDefaultArgs<ExtArgs>
    teacher?: boolean | Session$teacherArgs<ExtArgs>
  }

  export type $SessionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Session"
    objects: {
      course: Prisma.$CoursePayload<ExtArgs>
      teacher: Prisma.$UserPayload<ExtArgs> | null
      attendanceRecords: Prisma.$AttendanceRecordPayload<ExtArgs>[]
      performances: Prisma.$StudentPerformancePayload<ExtArgs>[]
      leaveRequests: Prisma.$LeaveRequestPayload<ExtArgs>[]
      makeUpSessions: Prisma.$MakeUpSessionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      courseId: number
      sessionDate: Date
      startTime: string
      endTime: string
      teacherId: number | null
      content: string | null
    }, ExtArgs["result"]["session"]>
    composites: {}
  }

  type SessionGetPayload<S extends boolean | null | undefined | SessionDefaultArgs> = $Result.GetResult<Prisma.$SessionPayload, S>

  type SessionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SessionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SessionCountAggregateInputType | true
    }

  export interface SessionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Session'], meta: { name: 'Session' } }
    /**
     * Find zero or one Session that matches the filter.
     * @param {SessionFindUniqueArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SessionFindUniqueArgs>(args: SelectSubset<T, SessionFindUniqueArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Session that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {SessionFindUniqueOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SessionFindUniqueOrThrowArgs>(args: SelectSubset<T, SessionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Session that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SessionFindFirstArgs>(args?: SelectSubset<T, SessionFindFirstArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Session that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SessionFindFirstOrThrowArgs>(args?: SelectSubset<T, SessionFindFirstOrThrowArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Sessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sessions
     * const sessions = await prisma.session.findMany()
     * 
     * // Get first 10 Sessions
     * const sessions = await prisma.session.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sessionWithIdOnly = await prisma.session.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SessionFindManyArgs>(args?: SelectSubset<T, SessionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Session.
     * @param {SessionCreateArgs} args - Arguments to create a Session.
     * @example
     * // Create one Session
     * const Session = await prisma.session.create({
     *   data: {
     *     // ... data to create a Session
     *   }
     * })
     * 
     */
    create<T extends SessionCreateArgs>(args: SelectSubset<T, SessionCreateArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Sessions.
     * @param {SessionCreateManyArgs} args - Arguments to create many Sessions.
     * @example
     * // Create many Sessions
     * const session = await prisma.session.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SessionCreateManyArgs>(args?: SelectSubset<T, SessionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Sessions and returns the data saved in the database.
     * @param {SessionCreateManyAndReturnArgs} args - Arguments to create many Sessions.
     * @example
     * // Create many Sessions
     * const session = await prisma.session.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Sessions and only return the `id`
     * const sessionWithIdOnly = await prisma.session.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SessionCreateManyAndReturnArgs>(args?: SelectSubset<T, SessionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Session.
     * @param {SessionDeleteArgs} args - Arguments to delete one Session.
     * @example
     * // Delete one Session
     * const Session = await prisma.session.delete({
     *   where: {
     *     // ... filter to delete one Session
     *   }
     * })
     * 
     */
    delete<T extends SessionDeleteArgs>(args: SelectSubset<T, SessionDeleteArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Session.
     * @param {SessionUpdateArgs} args - Arguments to update one Session.
     * @example
     * // Update one Session
     * const session = await prisma.session.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SessionUpdateArgs>(args: SelectSubset<T, SessionUpdateArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Sessions.
     * @param {SessionDeleteManyArgs} args - Arguments to filter Sessions to delete.
     * @example
     * // Delete a few Sessions
     * const { count } = await prisma.session.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SessionDeleteManyArgs>(args?: SelectSubset<T, SessionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sessions
     * const session = await prisma.session.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SessionUpdateManyArgs>(args: SelectSubset<T, SessionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Session.
     * @param {SessionUpsertArgs} args - Arguments to update or create a Session.
     * @example
     * // Update or create a Session
     * const session = await prisma.session.upsert({
     *   create: {
     *     // ... data to create a Session
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Session we want to update
     *   }
     * })
     */
    upsert<T extends SessionUpsertArgs>(args: SelectSubset<T, SessionUpsertArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionCountArgs} args - Arguments to filter Sessions to count.
     * @example
     * // Count the number of Sessions
     * const count = await prisma.session.count({
     *   where: {
     *     // ... the filter for the Sessions we want to count
     *   }
     * })
    **/
    count<T extends SessionCountArgs>(
      args?: Subset<T, SessionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SessionAggregateArgs>(args: Subset<T, SessionAggregateArgs>): Prisma.PrismaPromise<GetSessionAggregateType<T>>

    /**
     * Group by Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SessionGroupByArgs['orderBy'] }
        : { orderBy?: SessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Session model
   */
  readonly fields: SessionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Session.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SessionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    course<T extends CourseDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CourseDefaultArgs<ExtArgs>>): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    teacher<T extends Session$teacherArgs<ExtArgs> = {}>(args?: Subset<T, Session$teacherArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    attendanceRecords<T extends Session$attendanceRecordsArgs<ExtArgs> = {}>(args?: Subset<T, Session$attendanceRecordsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AttendanceRecordPayload<ExtArgs>, T, "findMany"> | Null>
    performances<T extends Session$performancesArgs<ExtArgs> = {}>(args?: Subset<T, Session$performancesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentPerformancePayload<ExtArgs>, T, "findMany"> | Null>
    leaveRequests<T extends Session$leaveRequestsArgs<ExtArgs> = {}>(args?: Subset<T, Session$leaveRequestsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LeaveRequestPayload<ExtArgs>, T, "findMany"> | Null>
    makeUpSessions<T extends Session$makeUpSessionsArgs<ExtArgs> = {}>(args?: Subset<T, Session$makeUpSessionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MakeUpSessionPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Session model
   */ 
  interface SessionFieldRefs {
    readonly id: FieldRef<"Session", 'Int'>
    readonly courseId: FieldRef<"Session", 'Int'>
    readonly sessionDate: FieldRef<"Session", 'DateTime'>
    readonly startTime: FieldRef<"Session", 'String'>
    readonly endTime: FieldRef<"Session", 'String'>
    readonly teacherId: FieldRef<"Session", 'Int'>
    readonly content: FieldRef<"Session", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Session findUnique
   */
  export type SessionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session findUniqueOrThrow
   */
  export type SessionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session findFirst
   */
  export type SessionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session findFirstOrThrow
   */
  export type SessionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session findMany
   */
  export type SessionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Sessions to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session create
   */
  export type SessionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The data needed to create a Session.
     */
    data: XOR<SessionCreateInput, SessionUncheckedCreateInput>
  }

  /**
   * Session createMany
   */
  export type SessionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Sessions.
     */
    data: SessionCreateManyInput | SessionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Session createManyAndReturn
   */
  export type SessionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Sessions.
     */
    data: SessionCreateManyInput | SessionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Session update
   */
  export type SessionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The data needed to update a Session.
     */
    data: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
    /**
     * Choose, which Session to update.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session updateMany
   */
  export type SessionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Sessions.
     */
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyInput>
    /**
     * Filter which Sessions to update
     */
    where?: SessionWhereInput
  }

  /**
   * Session upsert
   */
  export type SessionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The filter to search for the Session to update in case it exists.
     */
    where: SessionWhereUniqueInput
    /**
     * In case the Session found by the `where` argument doesn't exist, create a new Session with this data.
     */
    create: XOR<SessionCreateInput, SessionUncheckedCreateInput>
    /**
     * In case the Session was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
  }

  /**
   * Session delete
   */
  export type SessionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter which Session to delete.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session deleteMany
   */
  export type SessionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sessions to delete
     */
    where?: SessionWhereInput
  }

  /**
   * Session.teacher
   */
  export type Session$teacherArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Session.attendanceRecords
   */
  export type Session$attendanceRecordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AttendanceRecord
     */
    select?: AttendanceRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceRecordInclude<ExtArgs> | null
    where?: AttendanceRecordWhereInput
    orderBy?: AttendanceRecordOrderByWithRelationInput | AttendanceRecordOrderByWithRelationInput[]
    cursor?: AttendanceRecordWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AttendanceRecordScalarFieldEnum | AttendanceRecordScalarFieldEnum[]
  }

  /**
   * Session.performances
   */
  export type Session$performancesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentPerformance
     */
    select?: StudentPerformanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentPerformanceInclude<ExtArgs> | null
    where?: StudentPerformanceWhereInput
    orderBy?: StudentPerformanceOrderByWithRelationInput | StudentPerformanceOrderByWithRelationInput[]
    cursor?: StudentPerformanceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StudentPerformanceScalarFieldEnum | StudentPerformanceScalarFieldEnum[]
  }

  /**
   * Session.leaveRequests
   */
  export type Session$leaveRequestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeaveRequest
     */
    select?: LeaveRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaveRequestInclude<ExtArgs> | null
    where?: LeaveRequestWhereInput
    orderBy?: LeaveRequestOrderByWithRelationInput | LeaveRequestOrderByWithRelationInput[]
    cursor?: LeaveRequestWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LeaveRequestScalarFieldEnum | LeaveRequestScalarFieldEnum[]
  }

  /**
   * Session.makeUpSessions
   */
  export type Session$makeUpSessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MakeUpSession
     */
    select?: MakeUpSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MakeUpSessionInclude<ExtArgs> | null
    where?: MakeUpSessionWhereInput
    orderBy?: MakeUpSessionOrderByWithRelationInput | MakeUpSessionOrderByWithRelationInput[]
    cursor?: MakeUpSessionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MakeUpSessionScalarFieldEnum | MakeUpSessionScalarFieldEnum[]
  }

  /**
   * Session without action
   */
  export type SessionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
  }


  /**
   * Model AttendanceRecord
   */

  export type AggregateAttendanceRecord = {
    _count: AttendanceRecordCountAggregateOutputType | null
    _avg: AttendanceRecordAvgAggregateOutputType | null
    _sum: AttendanceRecordSumAggregateOutputType | null
    _min: AttendanceRecordMinAggregateOutputType | null
    _max: AttendanceRecordMaxAggregateOutputType | null
  }

  export type AttendanceRecordAvgAggregateOutputType = {
    id: number | null
    sessionId: number | null
    studentId: number | null
    updatedById: number | null
  }

  export type AttendanceRecordSumAggregateOutputType = {
    id: number | null
    sessionId: number | null
    studentId: number | null
    updatedById: number | null
  }

  export type AttendanceRecordMinAggregateOutputType = {
    id: number | null
    sessionId: number | null
    studentId: number | null
    status: string | null
    note: string | null
    updatedById: number | null
    updatedAt: Date | null
  }

  export type AttendanceRecordMaxAggregateOutputType = {
    id: number | null
    sessionId: number | null
    studentId: number | null
    status: string | null
    note: string | null
    updatedById: number | null
    updatedAt: Date | null
  }

  export type AttendanceRecordCountAggregateOutputType = {
    id: number
    sessionId: number
    studentId: number
    status: number
    note: number
    updatedById: number
    updatedAt: number
    _all: number
  }


  export type AttendanceRecordAvgAggregateInputType = {
    id?: true
    sessionId?: true
    studentId?: true
    updatedById?: true
  }

  export type AttendanceRecordSumAggregateInputType = {
    id?: true
    sessionId?: true
    studentId?: true
    updatedById?: true
  }

  export type AttendanceRecordMinAggregateInputType = {
    id?: true
    sessionId?: true
    studentId?: true
    status?: true
    note?: true
    updatedById?: true
    updatedAt?: true
  }

  export type AttendanceRecordMaxAggregateInputType = {
    id?: true
    sessionId?: true
    studentId?: true
    status?: true
    note?: true
    updatedById?: true
    updatedAt?: true
  }

  export type AttendanceRecordCountAggregateInputType = {
    id?: true
    sessionId?: true
    studentId?: true
    status?: true
    note?: true
    updatedById?: true
    updatedAt?: true
    _all?: true
  }

  export type AttendanceRecordAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AttendanceRecord to aggregate.
     */
    where?: AttendanceRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AttendanceRecords to fetch.
     */
    orderBy?: AttendanceRecordOrderByWithRelationInput | AttendanceRecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AttendanceRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AttendanceRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AttendanceRecords.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AttendanceRecords
    **/
    _count?: true | AttendanceRecordCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AttendanceRecordAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AttendanceRecordSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AttendanceRecordMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AttendanceRecordMaxAggregateInputType
  }

  export type GetAttendanceRecordAggregateType<T extends AttendanceRecordAggregateArgs> = {
        [P in keyof T & keyof AggregateAttendanceRecord]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAttendanceRecord[P]>
      : GetScalarType<T[P], AggregateAttendanceRecord[P]>
  }




  export type AttendanceRecordGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AttendanceRecordWhereInput
    orderBy?: AttendanceRecordOrderByWithAggregationInput | AttendanceRecordOrderByWithAggregationInput[]
    by: AttendanceRecordScalarFieldEnum[] | AttendanceRecordScalarFieldEnum
    having?: AttendanceRecordScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AttendanceRecordCountAggregateInputType | true
    _avg?: AttendanceRecordAvgAggregateInputType
    _sum?: AttendanceRecordSumAggregateInputType
    _min?: AttendanceRecordMinAggregateInputType
    _max?: AttendanceRecordMaxAggregateInputType
  }

  export type AttendanceRecordGroupByOutputType = {
    id: number
    sessionId: number
    studentId: number
    status: string
    note: string | null
    updatedById: number
    updatedAt: Date
    _count: AttendanceRecordCountAggregateOutputType | null
    _avg: AttendanceRecordAvgAggregateOutputType | null
    _sum: AttendanceRecordSumAggregateOutputType | null
    _min: AttendanceRecordMinAggregateOutputType | null
    _max: AttendanceRecordMaxAggregateOutputType | null
  }

  type GetAttendanceRecordGroupByPayload<T extends AttendanceRecordGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AttendanceRecordGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AttendanceRecordGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AttendanceRecordGroupByOutputType[P]>
            : GetScalarType<T[P], AttendanceRecordGroupByOutputType[P]>
        }
      >
    >


  export type AttendanceRecordSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sessionId?: boolean
    studentId?: boolean
    status?: boolean
    note?: boolean
    updatedById?: boolean
    updatedAt?: boolean
    session?: boolean | SessionDefaultArgs<ExtArgs>
    student?: boolean | UserDefaultArgs<ExtArgs>
    updatedBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["attendanceRecord"]>

  export type AttendanceRecordSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sessionId?: boolean
    studentId?: boolean
    status?: boolean
    note?: boolean
    updatedById?: boolean
    updatedAt?: boolean
    session?: boolean | SessionDefaultArgs<ExtArgs>
    student?: boolean | UserDefaultArgs<ExtArgs>
    updatedBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["attendanceRecord"]>

  export type AttendanceRecordSelectScalar = {
    id?: boolean
    sessionId?: boolean
    studentId?: boolean
    status?: boolean
    note?: boolean
    updatedById?: boolean
    updatedAt?: boolean
  }

  export type AttendanceRecordInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    session?: boolean | SessionDefaultArgs<ExtArgs>
    student?: boolean | UserDefaultArgs<ExtArgs>
    updatedBy?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type AttendanceRecordIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    session?: boolean | SessionDefaultArgs<ExtArgs>
    student?: boolean | UserDefaultArgs<ExtArgs>
    updatedBy?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $AttendanceRecordPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AttendanceRecord"
    objects: {
      session: Prisma.$SessionPayload<ExtArgs>
      student: Prisma.$UserPayload<ExtArgs>
      updatedBy: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      sessionId: number
      studentId: number
      status: string
      note: string | null
      updatedById: number
      updatedAt: Date
    }, ExtArgs["result"]["attendanceRecord"]>
    composites: {}
  }

  type AttendanceRecordGetPayload<S extends boolean | null | undefined | AttendanceRecordDefaultArgs> = $Result.GetResult<Prisma.$AttendanceRecordPayload, S>

  type AttendanceRecordCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AttendanceRecordFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AttendanceRecordCountAggregateInputType | true
    }

  export interface AttendanceRecordDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AttendanceRecord'], meta: { name: 'AttendanceRecord' } }
    /**
     * Find zero or one AttendanceRecord that matches the filter.
     * @param {AttendanceRecordFindUniqueArgs} args - Arguments to find a AttendanceRecord
     * @example
     * // Get one AttendanceRecord
     * const attendanceRecord = await prisma.attendanceRecord.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AttendanceRecordFindUniqueArgs>(args: SelectSubset<T, AttendanceRecordFindUniqueArgs<ExtArgs>>): Prisma__AttendanceRecordClient<$Result.GetResult<Prisma.$AttendanceRecordPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one AttendanceRecord that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AttendanceRecordFindUniqueOrThrowArgs} args - Arguments to find a AttendanceRecord
     * @example
     * // Get one AttendanceRecord
     * const attendanceRecord = await prisma.attendanceRecord.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AttendanceRecordFindUniqueOrThrowArgs>(args: SelectSubset<T, AttendanceRecordFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AttendanceRecordClient<$Result.GetResult<Prisma.$AttendanceRecordPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first AttendanceRecord that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttendanceRecordFindFirstArgs} args - Arguments to find a AttendanceRecord
     * @example
     * // Get one AttendanceRecord
     * const attendanceRecord = await prisma.attendanceRecord.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AttendanceRecordFindFirstArgs>(args?: SelectSubset<T, AttendanceRecordFindFirstArgs<ExtArgs>>): Prisma__AttendanceRecordClient<$Result.GetResult<Prisma.$AttendanceRecordPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first AttendanceRecord that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttendanceRecordFindFirstOrThrowArgs} args - Arguments to find a AttendanceRecord
     * @example
     * // Get one AttendanceRecord
     * const attendanceRecord = await prisma.attendanceRecord.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AttendanceRecordFindFirstOrThrowArgs>(args?: SelectSubset<T, AttendanceRecordFindFirstOrThrowArgs<ExtArgs>>): Prisma__AttendanceRecordClient<$Result.GetResult<Prisma.$AttendanceRecordPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more AttendanceRecords that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttendanceRecordFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AttendanceRecords
     * const attendanceRecords = await prisma.attendanceRecord.findMany()
     * 
     * // Get first 10 AttendanceRecords
     * const attendanceRecords = await prisma.attendanceRecord.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const attendanceRecordWithIdOnly = await prisma.attendanceRecord.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AttendanceRecordFindManyArgs>(args?: SelectSubset<T, AttendanceRecordFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AttendanceRecordPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a AttendanceRecord.
     * @param {AttendanceRecordCreateArgs} args - Arguments to create a AttendanceRecord.
     * @example
     * // Create one AttendanceRecord
     * const AttendanceRecord = await prisma.attendanceRecord.create({
     *   data: {
     *     // ... data to create a AttendanceRecord
     *   }
     * })
     * 
     */
    create<T extends AttendanceRecordCreateArgs>(args: SelectSubset<T, AttendanceRecordCreateArgs<ExtArgs>>): Prisma__AttendanceRecordClient<$Result.GetResult<Prisma.$AttendanceRecordPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many AttendanceRecords.
     * @param {AttendanceRecordCreateManyArgs} args - Arguments to create many AttendanceRecords.
     * @example
     * // Create many AttendanceRecords
     * const attendanceRecord = await prisma.attendanceRecord.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AttendanceRecordCreateManyArgs>(args?: SelectSubset<T, AttendanceRecordCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AttendanceRecords and returns the data saved in the database.
     * @param {AttendanceRecordCreateManyAndReturnArgs} args - Arguments to create many AttendanceRecords.
     * @example
     * // Create many AttendanceRecords
     * const attendanceRecord = await prisma.attendanceRecord.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AttendanceRecords and only return the `id`
     * const attendanceRecordWithIdOnly = await prisma.attendanceRecord.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AttendanceRecordCreateManyAndReturnArgs>(args?: SelectSubset<T, AttendanceRecordCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AttendanceRecordPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a AttendanceRecord.
     * @param {AttendanceRecordDeleteArgs} args - Arguments to delete one AttendanceRecord.
     * @example
     * // Delete one AttendanceRecord
     * const AttendanceRecord = await prisma.attendanceRecord.delete({
     *   where: {
     *     // ... filter to delete one AttendanceRecord
     *   }
     * })
     * 
     */
    delete<T extends AttendanceRecordDeleteArgs>(args: SelectSubset<T, AttendanceRecordDeleteArgs<ExtArgs>>): Prisma__AttendanceRecordClient<$Result.GetResult<Prisma.$AttendanceRecordPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one AttendanceRecord.
     * @param {AttendanceRecordUpdateArgs} args - Arguments to update one AttendanceRecord.
     * @example
     * // Update one AttendanceRecord
     * const attendanceRecord = await prisma.attendanceRecord.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AttendanceRecordUpdateArgs>(args: SelectSubset<T, AttendanceRecordUpdateArgs<ExtArgs>>): Prisma__AttendanceRecordClient<$Result.GetResult<Prisma.$AttendanceRecordPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more AttendanceRecords.
     * @param {AttendanceRecordDeleteManyArgs} args - Arguments to filter AttendanceRecords to delete.
     * @example
     * // Delete a few AttendanceRecords
     * const { count } = await prisma.attendanceRecord.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AttendanceRecordDeleteManyArgs>(args?: SelectSubset<T, AttendanceRecordDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AttendanceRecords.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttendanceRecordUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AttendanceRecords
     * const attendanceRecord = await prisma.attendanceRecord.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AttendanceRecordUpdateManyArgs>(args: SelectSubset<T, AttendanceRecordUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one AttendanceRecord.
     * @param {AttendanceRecordUpsertArgs} args - Arguments to update or create a AttendanceRecord.
     * @example
     * // Update or create a AttendanceRecord
     * const attendanceRecord = await prisma.attendanceRecord.upsert({
     *   create: {
     *     // ... data to create a AttendanceRecord
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AttendanceRecord we want to update
     *   }
     * })
     */
    upsert<T extends AttendanceRecordUpsertArgs>(args: SelectSubset<T, AttendanceRecordUpsertArgs<ExtArgs>>): Prisma__AttendanceRecordClient<$Result.GetResult<Prisma.$AttendanceRecordPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of AttendanceRecords.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttendanceRecordCountArgs} args - Arguments to filter AttendanceRecords to count.
     * @example
     * // Count the number of AttendanceRecords
     * const count = await prisma.attendanceRecord.count({
     *   where: {
     *     // ... the filter for the AttendanceRecords we want to count
     *   }
     * })
    **/
    count<T extends AttendanceRecordCountArgs>(
      args?: Subset<T, AttendanceRecordCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AttendanceRecordCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AttendanceRecord.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttendanceRecordAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AttendanceRecordAggregateArgs>(args: Subset<T, AttendanceRecordAggregateArgs>): Prisma.PrismaPromise<GetAttendanceRecordAggregateType<T>>

    /**
     * Group by AttendanceRecord.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttendanceRecordGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AttendanceRecordGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AttendanceRecordGroupByArgs['orderBy'] }
        : { orderBy?: AttendanceRecordGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AttendanceRecordGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAttendanceRecordGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AttendanceRecord model
   */
  readonly fields: AttendanceRecordFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AttendanceRecord.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AttendanceRecordClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    session<T extends SessionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SessionDefaultArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    student<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    updatedBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AttendanceRecord model
   */ 
  interface AttendanceRecordFieldRefs {
    readonly id: FieldRef<"AttendanceRecord", 'Int'>
    readonly sessionId: FieldRef<"AttendanceRecord", 'Int'>
    readonly studentId: FieldRef<"AttendanceRecord", 'Int'>
    readonly status: FieldRef<"AttendanceRecord", 'String'>
    readonly note: FieldRef<"AttendanceRecord", 'String'>
    readonly updatedById: FieldRef<"AttendanceRecord", 'Int'>
    readonly updatedAt: FieldRef<"AttendanceRecord", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * AttendanceRecord findUnique
   */
  export type AttendanceRecordFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AttendanceRecord
     */
    select?: AttendanceRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceRecordInclude<ExtArgs> | null
    /**
     * Filter, which AttendanceRecord to fetch.
     */
    where: AttendanceRecordWhereUniqueInput
  }

  /**
   * AttendanceRecord findUniqueOrThrow
   */
  export type AttendanceRecordFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AttendanceRecord
     */
    select?: AttendanceRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceRecordInclude<ExtArgs> | null
    /**
     * Filter, which AttendanceRecord to fetch.
     */
    where: AttendanceRecordWhereUniqueInput
  }

  /**
   * AttendanceRecord findFirst
   */
  export type AttendanceRecordFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AttendanceRecord
     */
    select?: AttendanceRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceRecordInclude<ExtArgs> | null
    /**
     * Filter, which AttendanceRecord to fetch.
     */
    where?: AttendanceRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AttendanceRecords to fetch.
     */
    orderBy?: AttendanceRecordOrderByWithRelationInput | AttendanceRecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AttendanceRecords.
     */
    cursor?: AttendanceRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AttendanceRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AttendanceRecords.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AttendanceRecords.
     */
    distinct?: AttendanceRecordScalarFieldEnum | AttendanceRecordScalarFieldEnum[]
  }

  /**
   * AttendanceRecord findFirstOrThrow
   */
  export type AttendanceRecordFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AttendanceRecord
     */
    select?: AttendanceRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceRecordInclude<ExtArgs> | null
    /**
     * Filter, which AttendanceRecord to fetch.
     */
    where?: AttendanceRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AttendanceRecords to fetch.
     */
    orderBy?: AttendanceRecordOrderByWithRelationInput | AttendanceRecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AttendanceRecords.
     */
    cursor?: AttendanceRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AttendanceRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AttendanceRecords.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AttendanceRecords.
     */
    distinct?: AttendanceRecordScalarFieldEnum | AttendanceRecordScalarFieldEnum[]
  }

  /**
   * AttendanceRecord findMany
   */
  export type AttendanceRecordFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AttendanceRecord
     */
    select?: AttendanceRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceRecordInclude<ExtArgs> | null
    /**
     * Filter, which AttendanceRecords to fetch.
     */
    where?: AttendanceRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AttendanceRecords to fetch.
     */
    orderBy?: AttendanceRecordOrderByWithRelationInput | AttendanceRecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AttendanceRecords.
     */
    cursor?: AttendanceRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AttendanceRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AttendanceRecords.
     */
    skip?: number
    distinct?: AttendanceRecordScalarFieldEnum | AttendanceRecordScalarFieldEnum[]
  }

  /**
   * AttendanceRecord create
   */
  export type AttendanceRecordCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AttendanceRecord
     */
    select?: AttendanceRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceRecordInclude<ExtArgs> | null
    /**
     * The data needed to create a AttendanceRecord.
     */
    data: XOR<AttendanceRecordCreateInput, AttendanceRecordUncheckedCreateInput>
  }

  /**
   * AttendanceRecord createMany
   */
  export type AttendanceRecordCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AttendanceRecords.
     */
    data: AttendanceRecordCreateManyInput | AttendanceRecordCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AttendanceRecord createManyAndReturn
   */
  export type AttendanceRecordCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AttendanceRecord
     */
    select?: AttendanceRecordSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many AttendanceRecords.
     */
    data: AttendanceRecordCreateManyInput | AttendanceRecordCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceRecordIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * AttendanceRecord update
   */
  export type AttendanceRecordUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AttendanceRecord
     */
    select?: AttendanceRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceRecordInclude<ExtArgs> | null
    /**
     * The data needed to update a AttendanceRecord.
     */
    data: XOR<AttendanceRecordUpdateInput, AttendanceRecordUncheckedUpdateInput>
    /**
     * Choose, which AttendanceRecord to update.
     */
    where: AttendanceRecordWhereUniqueInput
  }

  /**
   * AttendanceRecord updateMany
   */
  export type AttendanceRecordUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AttendanceRecords.
     */
    data: XOR<AttendanceRecordUpdateManyMutationInput, AttendanceRecordUncheckedUpdateManyInput>
    /**
     * Filter which AttendanceRecords to update
     */
    where?: AttendanceRecordWhereInput
  }

  /**
   * AttendanceRecord upsert
   */
  export type AttendanceRecordUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AttendanceRecord
     */
    select?: AttendanceRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceRecordInclude<ExtArgs> | null
    /**
     * The filter to search for the AttendanceRecord to update in case it exists.
     */
    where: AttendanceRecordWhereUniqueInput
    /**
     * In case the AttendanceRecord found by the `where` argument doesn't exist, create a new AttendanceRecord with this data.
     */
    create: XOR<AttendanceRecordCreateInput, AttendanceRecordUncheckedCreateInput>
    /**
     * In case the AttendanceRecord was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AttendanceRecordUpdateInput, AttendanceRecordUncheckedUpdateInput>
  }

  /**
   * AttendanceRecord delete
   */
  export type AttendanceRecordDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AttendanceRecord
     */
    select?: AttendanceRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceRecordInclude<ExtArgs> | null
    /**
     * Filter which AttendanceRecord to delete.
     */
    where: AttendanceRecordWhereUniqueInput
  }

  /**
   * AttendanceRecord deleteMany
   */
  export type AttendanceRecordDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AttendanceRecords to delete
     */
    where?: AttendanceRecordWhereInput
  }

  /**
   * AttendanceRecord without action
   */
  export type AttendanceRecordDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AttendanceRecord
     */
    select?: AttendanceRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceRecordInclude<ExtArgs> | null
  }


  /**
   * Model LeaveRequest
   */

  export type AggregateLeaveRequest = {
    _count: LeaveRequestCountAggregateOutputType | null
    _avg: LeaveRequestAvgAggregateOutputType | null
    _sum: LeaveRequestSumAggregateOutputType | null
    _min: LeaveRequestMinAggregateOutputType | null
    _max: LeaveRequestMaxAggregateOutputType | null
  }

  export type LeaveRequestAvgAggregateOutputType = {
    id: number | null
    sessionId: number | null
    studentId: number | null
    approvedById: number | null
  }

  export type LeaveRequestSumAggregateOutputType = {
    id: number | null
    sessionId: number | null
    studentId: number | null
    approvedById: number | null
  }

  export type LeaveRequestMinAggregateOutputType = {
    id: number | null
    sessionId: number | null
    studentId: number | null
    reason: string | null
    status: string | null
    approvedById: number | null
    approvedAt: Date | null
    createdAt: Date | null
  }

  export type LeaveRequestMaxAggregateOutputType = {
    id: number | null
    sessionId: number | null
    studentId: number | null
    reason: string | null
    status: string | null
    approvedById: number | null
    approvedAt: Date | null
    createdAt: Date | null
  }

  export type LeaveRequestCountAggregateOutputType = {
    id: number
    sessionId: number
    studentId: number
    reason: number
    status: number
    approvedById: number
    approvedAt: number
    createdAt: number
    _all: number
  }


  export type LeaveRequestAvgAggregateInputType = {
    id?: true
    sessionId?: true
    studentId?: true
    approvedById?: true
  }

  export type LeaveRequestSumAggregateInputType = {
    id?: true
    sessionId?: true
    studentId?: true
    approvedById?: true
  }

  export type LeaveRequestMinAggregateInputType = {
    id?: true
    sessionId?: true
    studentId?: true
    reason?: true
    status?: true
    approvedById?: true
    approvedAt?: true
    createdAt?: true
  }

  export type LeaveRequestMaxAggregateInputType = {
    id?: true
    sessionId?: true
    studentId?: true
    reason?: true
    status?: true
    approvedById?: true
    approvedAt?: true
    createdAt?: true
  }

  export type LeaveRequestCountAggregateInputType = {
    id?: true
    sessionId?: true
    studentId?: true
    reason?: true
    status?: true
    approvedById?: true
    approvedAt?: true
    createdAt?: true
    _all?: true
  }

  export type LeaveRequestAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LeaveRequest to aggregate.
     */
    where?: LeaveRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LeaveRequests to fetch.
     */
    orderBy?: LeaveRequestOrderByWithRelationInput | LeaveRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LeaveRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LeaveRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LeaveRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned LeaveRequests
    **/
    _count?: true | LeaveRequestCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LeaveRequestAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LeaveRequestSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LeaveRequestMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LeaveRequestMaxAggregateInputType
  }

  export type GetLeaveRequestAggregateType<T extends LeaveRequestAggregateArgs> = {
        [P in keyof T & keyof AggregateLeaveRequest]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLeaveRequest[P]>
      : GetScalarType<T[P], AggregateLeaveRequest[P]>
  }




  export type LeaveRequestGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LeaveRequestWhereInput
    orderBy?: LeaveRequestOrderByWithAggregationInput | LeaveRequestOrderByWithAggregationInput[]
    by: LeaveRequestScalarFieldEnum[] | LeaveRequestScalarFieldEnum
    having?: LeaveRequestScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LeaveRequestCountAggregateInputType | true
    _avg?: LeaveRequestAvgAggregateInputType
    _sum?: LeaveRequestSumAggregateInputType
    _min?: LeaveRequestMinAggregateInputType
    _max?: LeaveRequestMaxAggregateInputType
  }

  export type LeaveRequestGroupByOutputType = {
    id: number
    sessionId: number
    studentId: number
    reason: string
    status: string
    approvedById: number | null
    approvedAt: Date | null
    createdAt: Date
    _count: LeaveRequestCountAggregateOutputType | null
    _avg: LeaveRequestAvgAggregateOutputType | null
    _sum: LeaveRequestSumAggregateOutputType | null
    _min: LeaveRequestMinAggregateOutputType | null
    _max: LeaveRequestMaxAggregateOutputType | null
  }

  type GetLeaveRequestGroupByPayload<T extends LeaveRequestGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LeaveRequestGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LeaveRequestGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LeaveRequestGroupByOutputType[P]>
            : GetScalarType<T[P], LeaveRequestGroupByOutputType[P]>
        }
      >
    >


  export type LeaveRequestSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sessionId?: boolean
    studentId?: boolean
    reason?: boolean
    status?: boolean
    approvedById?: boolean
    approvedAt?: boolean
    createdAt?: boolean
    session?: boolean | SessionDefaultArgs<ExtArgs>
    student?: boolean | UserDefaultArgs<ExtArgs>
    approvedBy?: boolean | LeaveRequest$approvedByArgs<ExtArgs>
    makeUps?: boolean | LeaveRequest$makeUpsArgs<ExtArgs>
    _count?: boolean | LeaveRequestCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["leaveRequest"]>

  export type LeaveRequestSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sessionId?: boolean
    studentId?: boolean
    reason?: boolean
    status?: boolean
    approvedById?: boolean
    approvedAt?: boolean
    createdAt?: boolean
    session?: boolean | SessionDefaultArgs<ExtArgs>
    student?: boolean | UserDefaultArgs<ExtArgs>
    approvedBy?: boolean | LeaveRequest$approvedByArgs<ExtArgs>
  }, ExtArgs["result"]["leaveRequest"]>

  export type LeaveRequestSelectScalar = {
    id?: boolean
    sessionId?: boolean
    studentId?: boolean
    reason?: boolean
    status?: boolean
    approvedById?: boolean
    approvedAt?: boolean
    createdAt?: boolean
  }

  export type LeaveRequestInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    session?: boolean | SessionDefaultArgs<ExtArgs>
    student?: boolean | UserDefaultArgs<ExtArgs>
    approvedBy?: boolean | LeaveRequest$approvedByArgs<ExtArgs>
    makeUps?: boolean | LeaveRequest$makeUpsArgs<ExtArgs>
    _count?: boolean | LeaveRequestCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type LeaveRequestIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    session?: boolean | SessionDefaultArgs<ExtArgs>
    student?: boolean | UserDefaultArgs<ExtArgs>
    approvedBy?: boolean | LeaveRequest$approvedByArgs<ExtArgs>
  }

  export type $LeaveRequestPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "LeaveRequest"
    objects: {
      session: Prisma.$SessionPayload<ExtArgs>
      student: Prisma.$UserPayload<ExtArgs>
      approvedBy: Prisma.$UserPayload<ExtArgs> | null
      makeUps: Prisma.$MakeUpSessionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      sessionId: number
      studentId: number
      reason: string
      status: string
      approvedById: number | null
      approvedAt: Date | null
      createdAt: Date
    }, ExtArgs["result"]["leaveRequest"]>
    composites: {}
  }

  type LeaveRequestGetPayload<S extends boolean | null | undefined | LeaveRequestDefaultArgs> = $Result.GetResult<Prisma.$LeaveRequestPayload, S>

  type LeaveRequestCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<LeaveRequestFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: LeaveRequestCountAggregateInputType | true
    }

  export interface LeaveRequestDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['LeaveRequest'], meta: { name: 'LeaveRequest' } }
    /**
     * Find zero or one LeaveRequest that matches the filter.
     * @param {LeaveRequestFindUniqueArgs} args - Arguments to find a LeaveRequest
     * @example
     * // Get one LeaveRequest
     * const leaveRequest = await prisma.leaveRequest.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LeaveRequestFindUniqueArgs>(args: SelectSubset<T, LeaveRequestFindUniqueArgs<ExtArgs>>): Prisma__LeaveRequestClient<$Result.GetResult<Prisma.$LeaveRequestPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one LeaveRequest that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {LeaveRequestFindUniqueOrThrowArgs} args - Arguments to find a LeaveRequest
     * @example
     * // Get one LeaveRequest
     * const leaveRequest = await prisma.leaveRequest.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LeaveRequestFindUniqueOrThrowArgs>(args: SelectSubset<T, LeaveRequestFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LeaveRequestClient<$Result.GetResult<Prisma.$LeaveRequestPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first LeaveRequest that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeaveRequestFindFirstArgs} args - Arguments to find a LeaveRequest
     * @example
     * // Get one LeaveRequest
     * const leaveRequest = await prisma.leaveRequest.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LeaveRequestFindFirstArgs>(args?: SelectSubset<T, LeaveRequestFindFirstArgs<ExtArgs>>): Prisma__LeaveRequestClient<$Result.GetResult<Prisma.$LeaveRequestPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first LeaveRequest that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeaveRequestFindFirstOrThrowArgs} args - Arguments to find a LeaveRequest
     * @example
     * // Get one LeaveRequest
     * const leaveRequest = await prisma.leaveRequest.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LeaveRequestFindFirstOrThrowArgs>(args?: SelectSubset<T, LeaveRequestFindFirstOrThrowArgs<ExtArgs>>): Prisma__LeaveRequestClient<$Result.GetResult<Prisma.$LeaveRequestPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more LeaveRequests that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeaveRequestFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all LeaveRequests
     * const leaveRequests = await prisma.leaveRequest.findMany()
     * 
     * // Get first 10 LeaveRequests
     * const leaveRequests = await prisma.leaveRequest.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const leaveRequestWithIdOnly = await prisma.leaveRequest.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LeaveRequestFindManyArgs>(args?: SelectSubset<T, LeaveRequestFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LeaveRequestPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a LeaveRequest.
     * @param {LeaveRequestCreateArgs} args - Arguments to create a LeaveRequest.
     * @example
     * // Create one LeaveRequest
     * const LeaveRequest = await prisma.leaveRequest.create({
     *   data: {
     *     // ... data to create a LeaveRequest
     *   }
     * })
     * 
     */
    create<T extends LeaveRequestCreateArgs>(args: SelectSubset<T, LeaveRequestCreateArgs<ExtArgs>>): Prisma__LeaveRequestClient<$Result.GetResult<Prisma.$LeaveRequestPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many LeaveRequests.
     * @param {LeaveRequestCreateManyArgs} args - Arguments to create many LeaveRequests.
     * @example
     * // Create many LeaveRequests
     * const leaveRequest = await prisma.leaveRequest.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LeaveRequestCreateManyArgs>(args?: SelectSubset<T, LeaveRequestCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many LeaveRequests and returns the data saved in the database.
     * @param {LeaveRequestCreateManyAndReturnArgs} args - Arguments to create many LeaveRequests.
     * @example
     * // Create many LeaveRequests
     * const leaveRequest = await prisma.leaveRequest.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many LeaveRequests and only return the `id`
     * const leaveRequestWithIdOnly = await prisma.leaveRequest.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends LeaveRequestCreateManyAndReturnArgs>(args?: SelectSubset<T, LeaveRequestCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LeaveRequestPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a LeaveRequest.
     * @param {LeaveRequestDeleteArgs} args - Arguments to delete one LeaveRequest.
     * @example
     * // Delete one LeaveRequest
     * const LeaveRequest = await prisma.leaveRequest.delete({
     *   where: {
     *     // ... filter to delete one LeaveRequest
     *   }
     * })
     * 
     */
    delete<T extends LeaveRequestDeleteArgs>(args: SelectSubset<T, LeaveRequestDeleteArgs<ExtArgs>>): Prisma__LeaveRequestClient<$Result.GetResult<Prisma.$LeaveRequestPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one LeaveRequest.
     * @param {LeaveRequestUpdateArgs} args - Arguments to update one LeaveRequest.
     * @example
     * // Update one LeaveRequest
     * const leaveRequest = await prisma.leaveRequest.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LeaveRequestUpdateArgs>(args: SelectSubset<T, LeaveRequestUpdateArgs<ExtArgs>>): Prisma__LeaveRequestClient<$Result.GetResult<Prisma.$LeaveRequestPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more LeaveRequests.
     * @param {LeaveRequestDeleteManyArgs} args - Arguments to filter LeaveRequests to delete.
     * @example
     * // Delete a few LeaveRequests
     * const { count } = await prisma.leaveRequest.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LeaveRequestDeleteManyArgs>(args?: SelectSubset<T, LeaveRequestDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LeaveRequests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeaveRequestUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many LeaveRequests
     * const leaveRequest = await prisma.leaveRequest.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LeaveRequestUpdateManyArgs>(args: SelectSubset<T, LeaveRequestUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one LeaveRequest.
     * @param {LeaveRequestUpsertArgs} args - Arguments to update or create a LeaveRequest.
     * @example
     * // Update or create a LeaveRequest
     * const leaveRequest = await prisma.leaveRequest.upsert({
     *   create: {
     *     // ... data to create a LeaveRequest
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the LeaveRequest we want to update
     *   }
     * })
     */
    upsert<T extends LeaveRequestUpsertArgs>(args: SelectSubset<T, LeaveRequestUpsertArgs<ExtArgs>>): Prisma__LeaveRequestClient<$Result.GetResult<Prisma.$LeaveRequestPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of LeaveRequests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeaveRequestCountArgs} args - Arguments to filter LeaveRequests to count.
     * @example
     * // Count the number of LeaveRequests
     * const count = await prisma.leaveRequest.count({
     *   where: {
     *     // ... the filter for the LeaveRequests we want to count
     *   }
     * })
    **/
    count<T extends LeaveRequestCountArgs>(
      args?: Subset<T, LeaveRequestCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LeaveRequestCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a LeaveRequest.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeaveRequestAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LeaveRequestAggregateArgs>(args: Subset<T, LeaveRequestAggregateArgs>): Prisma.PrismaPromise<GetLeaveRequestAggregateType<T>>

    /**
     * Group by LeaveRequest.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeaveRequestGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LeaveRequestGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LeaveRequestGroupByArgs['orderBy'] }
        : { orderBy?: LeaveRequestGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LeaveRequestGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLeaveRequestGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the LeaveRequest model
   */
  readonly fields: LeaveRequestFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for LeaveRequest.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LeaveRequestClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    session<T extends SessionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SessionDefaultArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    student<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    approvedBy<T extends LeaveRequest$approvedByArgs<ExtArgs> = {}>(args?: Subset<T, LeaveRequest$approvedByArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    makeUps<T extends LeaveRequest$makeUpsArgs<ExtArgs> = {}>(args?: Subset<T, LeaveRequest$makeUpsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MakeUpSessionPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the LeaveRequest model
   */ 
  interface LeaveRequestFieldRefs {
    readonly id: FieldRef<"LeaveRequest", 'Int'>
    readonly sessionId: FieldRef<"LeaveRequest", 'Int'>
    readonly studentId: FieldRef<"LeaveRequest", 'Int'>
    readonly reason: FieldRef<"LeaveRequest", 'String'>
    readonly status: FieldRef<"LeaveRequest", 'String'>
    readonly approvedById: FieldRef<"LeaveRequest", 'Int'>
    readonly approvedAt: FieldRef<"LeaveRequest", 'DateTime'>
    readonly createdAt: FieldRef<"LeaveRequest", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * LeaveRequest findUnique
   */
  export type LeaveRequestFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeaveRequest
     */
    select?: LeaveRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaveRequestInclude<ExtArgs> | null
    /**
     * Filter, which LeaveRequest to fetch.
     */
    where: LeaveRequestWhereUniqueInput
  }

  /**
   * LeaveRequest findUniqueOrThrow
   */
  export type LeaveRequestFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeaveRequest
     */
    select?: LeaveRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaveRequestInclude<ExtArgs> | null
    /**
     * Filter, which LeaveRequest to fetch.
     */
    where: LeaveRequestWhereUniqueInput
  }

  /**
   * LeaveRequest findFirst
   */
  export type LeaveRequestFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeaveRequest
     */
    select?: LeaveRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaveRequestInclude<ExtArgs> | null
    /**
     * Filter, which LeaveRequest to fetch.
     */
    where?: LeaveRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LeaveRequests to fetch.
     */
    orderBy?: LeaveRequestOrderByWithRelationInput | LeaveRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LeaveRequests.
     */
    cursor?: LeaveRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LeaveRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LeaveRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LeaveRequests.
     */
    distinct?: LeaveRequestScalarFieldEnum | LeaveRequestScalarFieldEnum[]
  }

  /**
   * LeaveRequest findFirstOrThrow
   */
  export type LeaveRequestFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeaveRequest
     */
    select?: LeaveRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaveRequestInclude<ExtArgs> | null
    /**
     * Filter, which LeaveRequest to fetch.
     */
    where?: LeaveRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LeaveRequests to fetch.
     */
    orderBy?: LeaveRequestOrderByWithRelationInput | LeaveRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LeaveRequests.
     */
    cursor?: LeaveRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LeaveRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LeaveRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LeaveRequests.
     */
    distinct?: LeaveRequestScalarFieldEnum | LeaveRequestScalarFieldEnum[]
  }

  /**
   * LeaveRequest findMany
   */
  export type LeaveRequestFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeaveRequest
     */
    select?: LeaveRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaveRequestInclude<ExtArgs> | null
    /**
     * Filter, which LeaveRequests to fetch.
     */
    where?: LeaveRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LeaveRequests to fetch.
     */
    orderBy?: LeaveRequestOrderByWithRelationInput | LeaveRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing LeaveRequests.
     */
    cursor?: LeaveRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LeaveRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LeaveRequests.
     */
    skip?: number
    distinct?: LeaveRequestScalarFieldEnum | LeaveRequestScalarFieldEnum[]
  }

  /**
   * LeaveRequest create
   */
  export type LeaveRequestCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeaveRequest
     */
    select?: LeaveRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaveRequestInclude<ExtArgs> | null
    /**
     * The data needed to create a LeaveRequest.
     */
    data: XOR<LeaveRequestCreateInput, LeaveRequestUncheckedCreateInput>
  }

  /**
   * LeaveRequest createMany
   */
  export type LeaveRequestCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many LeaveRequests.
     */
    data: LeaveRequestCreateManyInput | LeaveRequestCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * LeaveRequest createManyAndReturn
   */
  export type LeaveRequestCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeaveRequest
     */
    select?: LeaveRequestSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many LeaveRequests.
     */
    data: LeaveRequestCreateManyInput | LeaveRequestCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaveRequestIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * LeaveRequest update
   */
  export type LeaveRequestUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeaveRequest
     */
    select?: LeaveRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaveRequestInclude<ExtArgs> | null
    /**
     * The data needed to update a LeaveRequest.
     */
    data: XOR<LeaveRequestUpdateInput, LeaveRequestUncheckedUpdateInput>
    /**
     * Choose, which LeaveRequest to update.
     */
    where: LeaveRequestWhereUniqueInput
  }

  /**
   * LeaveRequest updateMany
   */
  export type LeaveRequestUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update LeaveRequests.
     */
    data: XOR<LeaveRequestUpdateManyMutationInput, LeaveRequestUncheckedUpdateManyInput>
    /**
     * Filter which LeaveRequests to update
     */
    where?: LeaveRequestWhereInput
  }

  /**
   * LeaveRequest upsert
   */
  export type LeaveRequestUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeaveRequest
     */
    select?: LeaveRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaveRequestInclude<ExtArgs> | null
    /**
     * The filter to search for the LeaveRequest to update in case it exists.
     */
    where: LeaveRequestWhereUniqueInput
    /**
     * In case the LeaveRequest found by the `where` argument doesn't exist, create a new LeaveRequest with this data.
     */
    create: XOR<LeaveRequestCreateInput, LeaveRequestUncheckedCreateInput>
    /**
     * In case the LeaveRequest was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LeaveRequestUpdateInput, LeaveRequestUncheckedUpdateInput>
  }

  /**
   * LeaveRequest delete
   */
  export type LeaveRequestDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeaveRequest
     */
    select?: LeaveRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaveRequestInclude<ExtArgs> | null
    /**
     * Filter which LeaveRequest to delete.
     */
    where: LeaveRequestWhereUniqueInput
  }

  /**
   * LeaveRequest deleteMany
   */
  export type LeaveRequestDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LeaveRequests to delete
     */
    where?: LeaveRequestWhereInput
  }

  /**
   * LeaveRequest.approvedBy
   */
  export type LeaveRequest$approvedByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * LeaveRequest.makeUps
   */
  export type LeaveRequest$makeUpsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MakeUpSession
     */
    select?: MakeUpSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MakeUpSessionInclude<ExtArgs> | null
    where?: MakeUpSessionWhereInput
    orderBy?: MakeUpSessionOrderByWithRelationInput | MakeUpSessionOrderByWithRelationInput[]
    cursor?: MakeUpSessionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MakeUpSessionScalarFieldEnum | MakeUpSessionScalarFieldEnum[]
  }

  /**
   * LeaveRequest without action
   */
  export type LeaveRequestDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeaveRequest
     */
    select?: LeaveRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaveRequestInclude<ExtArgs> | null
  }


  /**
   * Model MakeUpSession
   */

  export type AggregateMakeUpSession = {
    _count: MakeUpSessionCountAggregateOutputType | null
    _avg: MakeUpSessionAvgAggregateOutputType | null
    _sum: MakeUpSessionSumAggregateOutputType | null
    _min: MakeUpSessionMinAggregateOutputType | null
    _max: MakeUpSessionMaxAggregateOutputType | null
  }

  export type MakeUpSessionAvgAggregateOutputType = {
    id: number | null
    originalSessionId: number | null
    studentId: number | null
    createdById: number | null
    leaveRequestId: number | null
  }

  export type MakeUpSessionSumAggregateOutputType = {
    id: number | null
    originalSessionId: number | null
    studentId: number | null
    createdById: number | null
    leaveRequestId: number | null
  }

  export type MakeUpSessionMinAggregateOutputType = {
    id: number | null
    originalSessionId: number | null
    studentId: number | null
    makeUpDate: Date | null
    startTime: string | null
    endTime: string | null
    attendanceStatus: string | null
    content: string | null
    createdById: number | null
    createdAt: Date | null
    leaveRequestId: number | null
  }

  export type MakeUpSessionMaxAggregateOutputType = {
    id: number | null
    originalSessionId: number | null
    studentId: number | null
    makeUpDate: Date | null
    startTime: string | null
    endTime: string | null
    attendanceStatus: string | null
    content: string | null
    createdById: number | null
    createdAt: Date | null
    leaveRequestId: number | null
  }

  export type MakeUpSessionCountAggregateOutputType = {
    id: number
    originalSessionId: number
    studentId: number
    makeUpDate: number
    startTime: number
    endTime: number
    attendanceStatus: number
    content: number
    createdById: number
    createdAt: number
    leaveRequestId: number
    _all: number
  }


  export type MakeUpSessionAvgAggregateInputType = {
    id?: true
    originalSessionId?: true
    studentId?: true
    createdById?: true
    leaveRequestId?: true
  }

  export type MakeUpSessionSumAggregateInputType = {
    id?: true
    originalSessionId?: true
    studentId?: true
    createdById?: true
    leaveRequestId?: true
  }

  export type MakeUpSessionMinAggregateInputType = {
    id?: true
    originalSessionId?: true
    studentId?: true
    makeUpDate?: true
    startTime?: true
    endTime?: true
    attendanceStatus?: true
    content?: true
    createdById?: true
    createdAt?: true
    leaveRequestId?: true
  }

  export type MakeUpSessionMaxAggregateInputType = {
    id?: true
    originalSessionId?: true
    studentId?: true
    makeUpDate?: true
    startTime?: true
    endTime?: true
    attendanceStatus?: true
    content?: true
    createdById?: true
    createdAt?: true
    leaveRequestId?: true
  }

  export type MakeUpSessionCountAggregateInputType = {
    id?: true
    originalSessionId?: true
    studentId?: true
    makeUpDate?: true
    startTime?: true
    endTime?: true
    attendanceStatus?: true
    content?: true
    createdById?: true
    createdAt?: true
    leaveRequestId?: true
    _all?: true
  }

  export type MakeUpSessionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MakeUpSession to aggregate.
     */
    where?: MakeUpSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MakeUpSessions to fetch.
     */
    orderBy?: MakeUpSessionOrderByWithRelationInput | MakeUpSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MakeUpSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MakeUpSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MakeUpSessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MakeUpSessions
    **/
    _count?: true | MakeUpSessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MakeUpSessionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MakeUpSessionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MakeUpSessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MakeUpSessionMaxAggregateInputType
  }

  export type GetMakeUpSessionAggregateType<T extends MakeUpSessionAggregateArgs> = {
        [P in keyof T & keyof AggregateMakeUpSession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMakeUpSession[P]>
      : GetScalarType<T[P], AggregateMakeUpSession[P]>
  }




  export type MakeUpSessionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MakeUpSessionWhereInput
    orderBy?: MakeUpSessionOrderByWithAggregationInput | MakeUpSessionOrderByWithAggregationInput[]
    by: MakeUpSessionScalarFieldEnum[] | MakeUpSessionScalarFieldEnum
    having?: MakeUpSessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MakeUpSessionCountAggregateInputType | true
    _avg?: MakeUpSessionAvgAggregateInputType
    _sum?: MakeUpSessionSumAggregateInputType
    _min?: MakeUpSessionMinAggregateInputType
    _max?: MakeUpSessionMaxAggregateInputType
  }

  export type MakeUpSessionGroupByOutputType = {
    id: number
    originalSessionId: number
    studentId: number
    makeUpDate: Date
    startTime: string
    endTime: string
    attendanceStatus: string
    content: string | null
    createdById: number
    createdAt: Date
    leaveRequestId: number | null
    _count: MakeUpSessionCountAggregateOutputType | null
    _avg: MakeUpSessionAvgAggregateOutputType | null
    _sum: MakeUpSessionSumAggregateOutputType | null
    _min: MakeUpSessionMinAggregateOutputType | null
    _max: MakeUpSessionMaxAggregateOutputType | null
  }

  type GetMakeUpSessionGroupByPayload<T extends MakeUpSessionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MakeUpSessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MakeUpSessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MakeUpSessionGroupByOutputType[P]>
            : GetScalarType<T[P], MakeUpSessionGroupByOutputType[P]>
        }
      >
    >


  export type MakeUpSessionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    originalSessionId?: boolean
    studentId?: boolean
    makeUpDate?: boolean
    startTime?: boolean
    endTime?: boolean
    attendanceStatus?: boolean
    content?: boolean
    createdById?: boolean
    createdAt?: boolean
    leaveRequestId?: boolean
    originalSession?: boolean | SessionDefaultArgs<ExtArgs>
    student?: boolean | UserDefaultArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    leaveRequest?: boolean | MakeUpSession$leaveRequestArgs<ExtArgs>
  }, ExtArgs["result"]["makeUpSession"]>

  export type MakeUpSessionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    originalSessionId?: boolean
    studentId?: boolean
    makeUpDate?: boolean
    startTime?: boolean
    endTime?: boolean
    attendanceStatus?: boolean
    content?: boolean
    createdById?: boolean
    createdAt?: boolean
    leaveRequestId?: boolean
    originalSession?: boolean | SessionDefaultArgs<ExtArgs>
    student?: boolean | UserDefaultArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    leaveRequest?: boolean | MakeUpSession$leaveRequestArgs<ExtArgs>
  }, ExtArgs["result"]["makeUpSession"]>

  export type MakeUpSessionSelectScalar = {
    id?: boolean
    originalSessionId?: boolean
    studentId?: boolean
    makeUpDate?: boolean
    startTime?: boolean
    endTime?: boolean
    attendanceStatus?: boolean
    content?: boolean
    createdById?: boolean
    createdAt?: boolean
    leaveRequestId?: boolean
  }

  export type MakeUpSessionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    originalSession?: boolean | SessionDefaultArgs<ExtArgs>
    student?: boolean | UserDefaultArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    leaveRequest?: boolean | MakeUpSession$leaveRequestArgs<ExtArgs>
  }
  export type MakeUpSessionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    originalSession?: boolean | SessionDefaultArgs<ExtArgs>
    student?: boolean | UserDefaultArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    leaveRequest?: boolean | MakeUpSession$leaveRequestArgs<ExtArgs>
  }

  export type $MakeUpSessionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MakeUpSession"
    objects: {
      originalSession: Prisma.$SessionPayload<ExtArgs>
      student: Prisma.$UserPayload<ExtArgs>
      createdBy: Prisma.$UserPayload<ExtArgs>
      leaveRequest: Prisma.$LeaveRequestPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      originalSessionId: number
      studentId: number
      makeUpDate: Date
      startTime: string
      endTime: string
      attendanceStatus: string
      content: string | null
      createdById: number
      createdAt: Date
      leaveRequestId: number | null
    }, ExtArgs["result"]["makeUpSession"]>
    composites: {}
  }

  type MakeUpSessionGetPayload<S extends boolean | null | undefined | MakeUpSessionDefaultArgs> = $Result.GetResult<Prisma.$MakeUpSessionPayload, S>

  type MakeUpSessionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<MakeUpSessionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: MakeUpSessionCountAggregateInputType | true
    }

  export interface MakeUpSessionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MakeUpSession'], meta: { name: 'MakeUpSession' } }
    /**
     * Find zero or one MakeUpSession that matches the filter.
     * @param {MakeUpSessionFindUniqueArgs} args - Arguments to find a MakeUpSession
     * @example
     * // Get one MakeUpSession
     * const makeUpSession = await prisma.makeUpSession.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MakeUpSessionFindUniqueArgs>(args: SelectSubset<T, MakeUpSessionFindUniqueArgs<ExtArgs>>): Prisma__MakeUpSessionClient<$Result.GetResult<Prisma.$MakeUpSessionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one MakeUpSession that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {MakeUpSessionFindUniqueOrThrowArgs} args - Arguments to find a MakeUpSession
     * @example
     * // Get one MakeUpSession
     * const makeUpSession = await prisma.makeUpSession.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MakeUpSessionFindUniqueOrThrowArgs>(args: SelectSubset<T, MakeUpSessionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MakeUpSessionClient<$Result.GetResult<Prisma.$MakeUpSessionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first MakeUpSession that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MakeUpSessionFindFirstArgs} args - Arguments to find a MakeUpSession
     * @example
     * // Get one MakeUpSession
     * const makeUpSession = await prisma.makeUpSession.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MakeUpSessionFindFirstArgs>(args?: SelectSubset<T, MakeUpSessionFindFirstArgs<ExtArgs>>): Prisma__MakeUpSessionClient<$Result.GetResult<Prisma.$MakeUpSessionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first MakeUpSession that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MakeUpSessionFindFirstOrThrowArgs} args - Arguments to find a MakeUpSession
     * @example
     * // Get one MakeUpSession
     * const makeUpSession = await prisma.makeUpSession.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MakeUpSessionFindFirstOrThrowArgs>(args?: SelectSubset<T, MakeUpSessionFindFirstOrThrowArgs<ExtArgs>>): Prisma__MakeUpSessionClient<$Result.GetResult<Prisma.$MakeUpSessionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more MakeUpSessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MakeUpSessionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MakeUpSessions
     * const makeUpSessions = await prisma.makeUpSession.findMany()
     * 
     * // Get first 10 MakeUpSessions
     * const makeUpSessions = await prisma.makeUpSession.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const makeUpSessionWithIdOnly = await prisma.makeUpSession.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MakeUpSessionFindManyArgs>(args?: SelectSubset<T, MakeUpSessionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MakeUpSessionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a MakeUpSession.
     * @param {MakeUpSessionCreateArgs} args - Arguments to create a MakeUpSession.
     * @example
     * // Create one MakeUpSession
     * const MakeUpSession = await prisma.makeUpSession.create({
     *   data: {
     *     // ... data to create a MakeUpSession
     *   }
     * })
     * 
     */
    create<T extends MakeUpSessionCreateArgs>(args: SelectSubset<T, MakeUpSessionCreateArgs<ExtArgs>>): Prisma__MakeUpSessionClient<$Result.GetResult<Prisma.$MakeUpSessionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many MakeUpSessions.
     * @param {MakeUpSessionCreateManyArgs} args - Arguments to create many MakeUpSessions.
     * @example
     * // Create many MakeUpSessions
     * const makeUpSession = await prisma.makeUpSession.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MakeUpSessionCreateManyArgs>(args?: SelectSubset<T, MakeUpSessionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many MakeUpSessions and returns the data saved in the database.
     * @param {MakeUpSessionCreateManyAndReturnArgs} args - Arguments to create many MakeUpSessions.
     * @example
     * // Create many MakeUpSessions
     * const makeUpSession = await prisma.makeUpSession.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many MakeUpSessions and only return the `id`
     * const makeUpSessionWithIdOnly = await prisma.makeUpSession.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MakeUpSessionCreateManyAndReturnArgs>(args?: SelectSubset<T, MakeUpSessionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MakeUpSessionPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a MakeUpSession.
     * @param {MakeUpSessionDeleteArgs} args - Arguments to delete one MakeUpSession.
     * @example
     * // Delete one MakeUpSession
     * const MakeUpSession = await prisma.makeUpSession.delete({
     *   where: {
     *     // ... filter to delete one MakeUpSession
     *   }
     * })
     * 
     */
    delete<T extends MakeUpSessionDeleteArgs>(args: SelectSubset<T, MakeUpSessionDeleteArgs<ExtArgs>>): Prisma__MakeUpSessionClient<$Result.GetResult<Prisma.$MakeUpSessionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one MakeUpSession.
     * @param {MakeUpSessionUpdateArgs} args - Arguments to update one MakeUpSession.
     * @example
     * // Update one MakeUpSession
     * const makeUpSession = await prisma.makeUpSession.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MakeUpSessionUpdateArgs>(args: SelectSubset<T, MakeUpSessionUpdateArgs<ExtArgs>>): Prisma__MakeUpSessionClient<$Result.GetResult<Prisma.$MakeUpSessionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more MakeUpSessions.
     * @param {MakeUpSessionDeleteManyArgs} args - Arguments to filter MakeUpSessions to delete.
     * @example
     * // Delete a few MakeUpSessions
     * const { count } = await prisma.makeUpSession.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MakeUpSessionDeleteManyArgs>(args?: SelectSubset<T, MakeUpSessionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MakeUpSessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MakeUpSessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MakeUpSessions
     * const makeUpSession = await prisma.makeUpSession.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MakeUpSessionUpdateManyArgs>(args: SelectSubset<T, MakeUpSessionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one MakeUpSession.
     * @param {MakeUpSessionUpsertArgs} args - Arguments to update or create a MakeUpSession.
     * @example
     * // Update or create a MakeUpSession
     * const makeUpSession = await prisma.makeUpSession.upsert({
     *   create: {
     *     // ... data to create a MakeUpSession
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MakeUpSession we want to update
     *   }
     * })
     */
    upsert<T extends MakeUpSessionUpsertArgs>(args: SelectSubset<T, MakeUpSessionUpsertArgs<ExtArgs>>): Prisma__MakeUpSessionClient<$Result.GetResult<Prisma.$MakeUpSessionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of MakeUpSessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MakeUpSessionCountArgs} args - Arguments to filter MakeUpSessions to count.
     * @example
     * // Count the number of MakeUpSessions
     * const count = await prisma.makeUpSession.count({
     *   where: {
     *     // ... the filter for the MakeUpSessions we want to count
     *   }
     * })
    **/
    count<T extends MakeUpSessionCountArgs>(
      args?: Subset<T, MakeUpSessionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MakeUpSessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MakeUpSession.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MakeUpSessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MakeUpSessionAggregateArgs>(args: Subset<T, MakeUpSessionAggregateArgs>): Prisma.PrismaPromise<GetMakeUpSessionAggregateType<T>>

    /**
     * Group by MakeUpSession.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MakeUpSessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MakeUpSessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MakeUpSessionGroupByArgs['orderBy'] }
        : { orderBy?: MakeUpSessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MakeUpSessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMakeUpSessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MakeUpSession model
   */
  readonly fields: MakeUpSessionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MakeUpSession.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MakeUpSessionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    originalSession<T extends SessionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SessionDefaultArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    student<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    createdBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    leaveRequest<T extends MakeUpSession$leaveRequestArgs<ExtArgs> = {}>(args?: Subset<T, MakeUpSession$leaveRequestArgs<ExtArgs>>): Prisma__LeaveRequestClient<$Result.GetResult<Prisma.$LeaveRequestPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the MakeUpSession model
   */ 
  interface MakeUpSessionFieldRefs {
    readonly id: FieldRef<"MakeUpSession", 'Int'>
    readonly originalSessionId: FieldRef<"MakeUpSession", 'Int'>
    readonly studentId: FieldRef<"MakeUpSession", 'Int'>
    readonly makeUpDate: FieldRef<"MakeUpSession", 'DateTime'>
    readonly startTime: FieldRef<"MakeUpSession", 'String'>
    readonly endTime: FieldRef<"MakeUpSession", 'String'>
    readonly attendanceStatus: FieldRef<"MakeUpSession", 'String'>
    readonly content: FieldRef<"MakeUpSession", 'String'>
    readonly createdById: FieldRef<"MakeUpSession", 'Int'>
    readonly createdAt: FieldRef<"MakeUpSession", 'DateTime'>
    readonly leaveRequestId: FieldRef<"MakeUpSession", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * MakeUpSession findUnique
   */
  export type MakeUpSessionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MakeUpSession
     */
    select?: MakeUpSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MakeUpSessionInclude<ExtArgs> | null
    /**
     * Filter, which MakeUpSession to fetch.
     */
    where: MakeUpSessionWhereUniqueInput
  }

  /**
   * MakeUpSession findUniqueOrThrow
   */
  export type MakeUpSessionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MakeUpSession
     */
    select?: MakeUpSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MakeUpSessionInclude<ExtArgs> | null
    /**
     * Filter, which MakeUpSession to fetch.
     */
    where: MakeUpSessionWhereUniqueInput
  }

  /**
   * MakeUpSession findFirst
   */
  export type MakeUpSessionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MakeUpSession
     */
    select?: MakeUpSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MakeUpSessionInclude<ExtArgs> | null
    /**
     * Filter, which MakeUpSession to fetch.
     */
    where?: MakeUpSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MakeUpSessions to fetch.
     */
    orderBy?: MakeUpSessionOrderByWithRelationInput | MakeUpSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MakeUpSessions.
     */
    cursor?: MakeUpSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MakeUpSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MakeUpSessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MakeUpSessions.
     */
    distinct?: MakeUpSessionScalarFieldEnum | MakeUpSessionScalarFieldEnum[]
  }

  /**
   * MakeUpSession findFirstOrThrow
   */
  export type MakeUpSessionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MakeUpSession
     */
    select?: MakeUpSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MakeUpSessionInclude<ExtArgs> | null
    /**
     * Filter, which MakeUpSession to fetch.
     */
    where?: MakeUpSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MakeUpSessions to fetch.
     */
    orderBy?: MakeUpSessionOrderByWithRelationInput | MakeUpSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MakeUpSessions.
     */
    cursor?: MakeUpSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MakeUpSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MakeUpSessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MakeUpSessions.
     */
    distinct?: MakeUpSessionScalarFieldEnum | MakeUpSessionScalarFieldEnum[]
  }

  /**
   * MakeUpSession findMany
   */
  export type MakeUpSessionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MakeUpSession
     */
    select?: MakeUpSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MakeUpSessionInclude<ExtArgs> | null
    /**
     * Filter, which MakeUpSessions to fetch.
     */
    where?: MakeUpSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MakeUpSessions to fetch.
     */
    orderBy?: MakeUpSessionOrderByWithRelationInput | MakeUpSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MakeUpSessions.
     */
    cursor?: MakeUpSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MakeUpSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MakeUpSessions.
     */
    skip?: number
    distinct?: MakeUpSessionScalarFieldEnum | MakeUpSessionScalarFieldEnum[]
  }

  /**
   * MakeUpSession create
   */
  export type MakeUpSessionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MakeUpSession
     */
    select?: MakeUpSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MakeUpSessionInclude<ExtArgs> | null
    /**
     * The data needed to create a MakeUpSession.
     */
    data: XOR<MakeUpSessionCreateInput, MakeUpSessionUncheckedCreateInput>
  }

  /**
   * MakeUpSession createMany
   */
  export type MakeUpSessionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MakeUpSessions.
     */
    data: MakeUpSessionCreateManyInput | MakeUpSessionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MakeUpSession createManyAndReturn
   */
  export type MakeUpSessionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MakeUpSession
     */
    select?: MakeUpSessionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many MakeUpSessions.
     */
    data: MakeUpSessionCreateManyInput | MakeUpSessionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MakeUpSessionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * MakeUpSession update
   */
  export type MakeUpSessionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MakeUpSession
     */
    select?: MakeUpSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MakeUpSessionInclude<ExtArgs> | null
    /**
     * The data needed to update a MakeUpSession.
     */
    data: XOR<MakeUpSessionUpdateInput, MakeUpSessionUncheckedUpdateInput>
    /**
     * Choose, which MakeUpSession to update.
     */
    where: MakeUpSessionWhereUniqueInput
  }

  /**
   * MakeUpSession updateMany
   */
  export type MakeUpSessionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MakeUpSessions.
     */
    data: XOR<MakeUpSessionUpdateManyMutationInput, MakeUpSessionUncheckedUpdateManyInput>
    /**
     * Filter which MakeUpSessions to update
     */
    where?: MakeUpSessionWhereInput
  }

  /**
   * MakeUpSession upsert
   */
  export type MakeUpSessionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MakeUpSession
     */
    select?: MakeUpSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MakeUpSessionInclude<ExtArgs> | null
    /**
     * The filter to search for the MakeUpSession to update in case it exists.
     */
    where: MakeUpSessionWhereUniqueInput
    /**
     * In case the MakeUpSession found by the `where` argument doesn't exist, create a new MakeUpSession with this data.
     */
    create: XOR<MakeUpSessionCreateInput, MakeUpSessionUncheckedCreateInput>
    /**
     * In case the MakeUpSession was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MakeUpSessionUpdateInput, MakeUpSessionUncheckedUpdateInput>
  }

  /**
   * MakeUpSession delete
   */
  export type MakeUpSessionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MakeUpSession
     */
    select?: MakeUpSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MakeUpSessionInclude<ExtArgs> | null
    /**
     * Filter which MakeUpSession to delete.
     */
    where: MakeUpSessionWhereUniqueInput
  }

  /**
   * MakeUpSession deleteMany
   */
  export type MakeUpSessionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MakeUpSessions to delete
     */
    where?: MakeUpSessionWhereInput
  }

  /**
   * MakeUpSession.leaveRequest
   */
  export type MakeUpSession$leaveRequestArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeaveRequest
     */
    select?: LeaveRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaveRequestInclude<ExtArgs> | null
    where?: LeaveRequestWhereInput
  }

  /**
   * MakeUpSession without action
   */
  export type MakeUpSessionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MakeUpSession
     */
    select?: MakeUpSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MakeUpSessionInclude<ExtArgs> | null
  }


  /**
   * Model StudentPerformance
   */

  export type AggregateStudentPerformance = {
    _count: StudentPerformanceCountAggregateOutputType | null
    _avg: StudentPerformanceAvgAggregateOutputType | null
    _sum: StudentPerformanceSumAggregateOutputType | null
    _min: StudentPerformanceMinAggregateOutputType | null
    _max: StudentPerformanceMaxAggregateOutputType | null
  }

  export type StudentPerformanceAvgAggregateOutputType = {
    id: number | null
    sessionId: number | null
    studentId: number | null
    createdById: number | null
  }

  export type StudentPerformanceSumAggregateOutputType = {
    id: number | null
    sessionId: number | null
    studentId: number | null
    createdById: number | null
  }

  export type StudentPerformanceMinAggregateOutputType = {
    id: number | null
    sessionId: number | null
    studentId: number | null
    performance: string | null
    createdById: number | null
    createdAt: Date | null
  }

  export type StudentPerformanceMaxAggregateOutputType = {
    id: number | null
    sessionId: number | null
    studentId: number | null
    performance: string | null
    createdById: number | null
    createdAt: Date | null
  }

  export type StudentPerformanceCountAggregateOutputType = {
    id: number
    sessionId: number
    studentId: number
    performance: number
    createdById: number
    createdAt: number
    _all: number
  }


  export type StudentPerformanceAvgAggregateInputType = {
    id?: true
    sessionId?: true
    studentId?: true
    createdById?: true
  }

  export type StudentPerformanceSumAggregateInputType = {
    id?: true
    sessionId?: true
    studentId?: true
    createdById?: true
  }

  export type StudentPerformanceMinAggregateInputType = {
    id?: true
    sessionId?: true
    studentId?: true
    performance?: true
    createdById?: true
    createdAt?: true
  }

  export type StudentPerformanceMaxAggregateInputType = {
    id?: true
    sessionId?: true
    studentId?: true
    performance?: true
    createdById?: true
    createdAt?: true
  }

  export type StudentPerformanceCountAggregateInputType = {
    id?: true
    sessionId?: true
    studentId?: true
    performance?: true
    createdById?: true
    createdAt?: true
    _all?: true
  }

  export type StudentPerformanceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StudentPerformance to aggregate.
     */
    where?: StudentPerformanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StudentPerformances to fetch.
     */
    orderBy?: StudentPerformanceOrderByWithRelationInput | StudentPerformanceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StudentPerformanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StudentPerformances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StudentPerformances.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned StudentPerformances
    **/
    _count?: true | StudentPerformanceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StudentPerformanceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StudentPerformanceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StudentPerformanceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StudentPerformanceMaxAggregateInputType
  }

  export type GetStudentPerformanceAggregateType<T extends StudentPerformanceAggregateArgs> = {
        [P in keyof T & keyof AggregateStudentPerformance]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStudentPerformance[P]>
      : GetScalarType<T[P], AggregateStudentPerformance[P]>
  }




  export type StudentPerformanceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StudentPerformanceWhereInput
    orderBy?: StudentPerformanceOrderByWithAggregationInput | StudentPerformanceOrderByWithAggregationInput[]
    by: StudentPerformanceScalarFieldEnum[] | StudentPerformanceScalarFieldEnum
    having?: StudentPerformanceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StudentPerformanceCountAggregateInputType | true
    _avg?: StudentPerformanceAvgAggregateInputType
    _sum?: StudentPerformanceSumAggregateInputType
    _min?: StudentPerformanceMinAggregateInputType
    _max?: StudentPerformanceMaxAggregateInputType
  }

  export type StudentPerformanceGroupByOutputType = {
    id: number
    sessionId: number
    studentId: number
    performance: string
    createdById: number
    createdAt: Date
    _count: StudentPerformanceCountAggregateOutputType | null
    _avg: StudentPerformanceAvgAggregateOutputType | null
    _sum: StudentPerformanceSumAggregateOutputType | null
    _min: StudentPerformanceMinAggregateOutputType | null
    _max: StudentPerformanceMaxAggregateOutputType | null
  }

  type GetStudentPerformanceGroupByPayload<T extends StudentPerformanceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StudentPerformanceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StudentPerformanceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StudentPerformanceGroupByOutputType[P]>
            : GetScalarType<T[P], StudentPerformanceGroupByOutputType[P]>
        }
      >
    >


  export type StudentPerformanceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sessionId?: boolean
    studentId?: boolean
    performance?: boolean
    createdById?: boolean
    createdAt?: boolean
    session?: boolean | SessionDefaultArgs<ExtArgs>
    student?: boolean | UserDefaultArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["studentPerformance"]>

  export type StudentPerformanceSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sessionId?: boolean
    studentId?: boolean
    performance?: boolean
    createdById?: boolean
    createdAt?: boolean
    session?: boolean | SessionDefaultArgs<ExtArgs>
    student?: boolean | UserDefaultArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["studentPerformance"]>

  export type StudentPerformanceSelectScalar = {
    id?: boolean
    sessionId?: boolean
    studentId?: boolean
    performance?: boolean
    createdById?: boolean
    createdAt?: boolean
  }

  export type StudentPerformanceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    session?: boolean | SessionDefaultArgs<ExtArgs>
    student?: boolean | UserDefaultArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type StudentPerformanceIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    session?: boolean | SessionDefaultArgs<ExtArgs>
    student?: boolean | UserDefaultArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $StudentPerformancePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "StudentPerformance"
    objects: {
      session: Prisma.$SessionPayload<ExtArgs>
      student: Prisma.$UserPayload<ExtArgs>
      createdBy: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      sessionId: number
      studentId: number
      performance: string
      createdById: number
      createdAt: Date
    }, ExtArgs["result"]["studentPerformance"]>
    composites: {}
  }

  type StudentPerformanceGetPayload<S extends boolean | null | undefined | StudentPerformanceDefaultArgs> = $Result.GetResult<Prisma.$StudentPerformancePayload, S>

  type StudentPerformanceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<StudentPerformanceFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: StudentPerformanceCountAggregateInputType | true
    }

  export interface StudentPerformanceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['StudentPerformance'], meta: { name: 'StudentPerformance' } }
    /**
     * Find zero or one StudentPerformance that matches the filter.
     * @param {StudentPerformanceFindUniqueArgs} args - Arguments to find a StudentPerformance
     * @example
     * // Get one StudentPerformance
     * const studentPerformance = await prisma.studentPerformance.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends StudentPerformanceFindUniqueArgs>(args: SelectSubset<T, StudentPerformanceFindUniqueArgs<ExtArgs>>): Prisma__StudentPerformanceClient<$Result.GetResult<Prisma.$StudentPerformancePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one StudentPerformance that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {StudentPerformanceFindUniqueOrThrowArgs} args - Arguments to find a StudentPerformance
     * @example
     * // Get one StudentPerformance
     * const studentPerformance = await prisma.studentPerformance.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends StudentPerformanceFindUniqueOrThrowArgs>(args: SelectSubset<T, StudentPerformanceFindUniqueOrThrowArgs<ExtArgs>>): Prisma__StudentPerformanceClient<$Result.GetResult<Prisma.$StudentPerformancePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first StudentPerformance that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentPerformanceFindFirstArgs} args - Arguments to find a StudentPerformance
     * @example
     * // Get one StudentPerformance
     * const studentPerformance = await prisma.studentPerformance.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends StudentPerformanceFindFirstArgs>(args?: SelectSubset<T, StudentPerformanceFindFirstArgs<ExtArgs>>): Prisma__StudentPerformanceClient<$Result.GetResult<Prisma.$StudentPerformancePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first StudentPerformance that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentPerformanceFindFirstOrThrowArgs} args - Arguments to find a StudentPerformance
     * @example
     * // Get one StudentPerformance
     * const studentPerformance = await prisma.studentPerformance.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends StudentPerformanceFindFirstOrThrowArgs>(args?: SelectSubset<T, StudentPerformanceFindFirstOrThrowArgs<ExtArgs>>): Prisma__StudentPerformanceClient<$Result.GetResult<Prisma.$StudentPerformancePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more StudentPerformances that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentPerformanceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all StudentPerformances
     * const studentPerformances = await prisma.studentPerformance.findMany()
     * 
     * // Get first 10 StudentPerformances
     * const studentPerformances = await prisma.studentPerformance.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const studentPerformanceWithIdOnly = await prisma.studentPerformance.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends StudentPerformanceFindManyArgs>(args?: SelectSubset<T, StudentPerformanceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentPerformancePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a StudentPerformance.
     * @param {StudentPerformanceCreateArgs} args - Arguments to create a StudentPerformance.
     * @example
     * // Create one StudentPerformance
     * const StudentPerformance = await prisma.studentPerformance.create({
     *   data: {
     *     // ... data to create a StudentPerformance
     *   }
     * })
     * 
     */
    create<T extends StudentPerformanceCreateArgs>(args: SelectSubset<T, StudentPerformanceCreateArgs<ExtArgs>>): Prisma__StudentPerformanceClient<$Result.GetResult<Prisma.$StudentPerformancePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many StudentPerformances.
     * @param {StudentPerformanceCreateManyArgs} args - Arguments to create many StudentPerformances.
     * @example
     * // Create many StudentPerformances
     * const studentPerformance = await prisma.studentPerformance.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends StudentPerformanceCreateManyArgs>(args?: SelectSubset<T, StudentPerformanceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many StudentPerformances and returns the data saved in the database.
     * @param {StudentPerformanceCreateManyAndReturnArgs} args - Arguments to create many StudentPerformances.
     * @example
     * // Create many StudentPerformances
     * const studentPerformance = await prisma.studentPerformance.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many StudentPerformances and only return the `id`
     * const studentPerformanceWithIdOnly = await prisma.studentPerformance.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends StudentPerformanceCreateManyAndReturnArgs>(args?: SelectSubset<T, StudentPerformanceCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentPerformancePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a StudentPerformance.
     * @param {StudentPerformanceDeleteArgs} args - Arguments to delete one StudentPerformance.
     * @example
     * // Delete one StudentPerformance
     * const StudentPerformance = await prisma.studentPerformance.delete({
     *   where: {
     *     // ... filter to delete one StudentPerformance
     *   }
     * })
     * 
     */
    delete<T extends StudentPerformanceDeleteArgs>(args: SelectSubset<T, StudentPerformanceDeleteArgs<ExtArgs>>): Prisma__StudentPerformanceClient<$Result.GetResult<Prisma.$StudentPerformancePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one StudentPerformance.
     * @param {StudentPerformanceUpdateArgs} args - Arguments to update one StudentPerformance.
     * @example
     * // Update one StudentPerformance
     * const studentPerformance = await prisma.studentPerformance.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends StudentPerformanceUpdateArgs>(args: SelectSubset<T, StudentPerformanceUpdateArgs<ExtArgs>>): Prisma__StudentPerformanceClient<$Result.GetResult<Prisma.$StudentPerformancePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more StudentPerformances.
     * @param {StudentPerformanceDeleteManyArgs} args - Arguments to filter StudentPerformances to delete.
     * @example
     * // Delete a few StudentPerformances
     * const { count } = await prisma.studentPerformance.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends StudentPerformanceDeleteManyArgs>(args?: SelectSubset<T, StudentPerformanceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StudentPerformances.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentPerformanceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many StudentPerformances
     * const studentPerformance = await prisma.studentPerformance.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends StudentPerformanceUpdateManyArgs>(args: SelectSubset<T, StudentPerformanceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one StudentPerformance.
     * @param {StudentPerformanceUpsertArgs} args - Arguments to update or create a StudentPerformance.
     * @example
     * // Update or create a StudentPerformance
     * const studentPerformance = await prisma.studentPerformance.upsert({
     *   create: {
     *     // ... data to create a StudentPerformance
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the StudentPerformance we want to update
     *   }
     * })
     */
    upsert<T extends StudentPerformanceUpsertArgs>(args: SelectSubset<T, StudentPerformanceUpsertArgs<ExtArgs>>): Prisma__StudentPerformanceClient<$Result.GetResult<Prisma.$StudentPerformancePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of StudentPerformances.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentPerformanceCountArgs} args - Arguments to filter StudentPerformances to count.
     * @example
     * // Count the number of StudentPerformances
     * const count = await prisma.studentPerformance.count({
     *   where: {
     *     // ... the filter for the StudentPerformances we want to count
     *   }
     * })
    **/
    count<T extends StudentPerformanceCountArgs>(
      args?: Subset<T, StudentPerformanceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StudentPerformanceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a StudentPerformance.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentPerformanceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StudentPerformanceAggregateArgs>(args: Subset<T, StudentPerformanceAggregateArgs>): Prisma.PrismaPromise<GetStudentPerformanceAggregateType<T>>

    /**
     * Group by StudentPerformance.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentPerformanceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StudentPerformanceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StudentPerformanceGroupByArgs['orderBy'] }
        : { orderBy?: StudentPerformanceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StudentPerformanceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStudentPerformanceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the StudentPerformance model
   */
  readonly fields: StudentPerformanceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for StudentPerformance.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StudentPerformanceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    session<T extends SessionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SessionDefaultArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    student<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    createdBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the StudentPerformance model
   */ 
  interface StudentPerformanceFieldRefs {
    readonly id: FieldRef<"StudentPerformance", 'Int'>
    readonly sessionId: FieldRef<"StudentPerformance", 'Int'>
    readonly studentId: FieldRef<"StudentPerformance", 'Int'>
    readonly performance: FieldRef<"StudentPerformance", 'String'>
    readonly createdById: FieldRef<"StudentPerformance", 'Int'>
    readonly createdAt: FieldRef<"StudentPerformance", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * StudentPerformance findUnique
   */
  export type StudentPerformanceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentPerformance
     */
    select?: StudentPerformanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentPerformanceInclude<ExtArgs> | null
    /**
     * Filter, which StudentPerformance to fetch.
     */
    where: StudentPerformanceWhereUniqueInput
  }

  /**
   * StudentPerformance findUniqueOrThrow
   */
  export type StudentPerformanceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentPerformance
     */
    select?: StudentPerformanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentPerformanceInclude<ExtArgs> | null
    /**
     * Filter, which StudentPerformance to fetch.
     */
    where: StudentPerformanceWhereUniqueInput
  }

  /**
   * StudentPerformance findFirst
   */
  export type StudentPerformanceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentPerformance
     */
    select?: StudentPerformanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentPerformanceInclude<ExtArgs> | null
    /**
     * Filter, which StudentPerformance to fetch.
     */
    where?: StudentPerformanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StudentPerformances to fetch.
     */
    orderBy?: StudentPerformanceOrderByWithRelationInput | StudentPerformanceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StudentPerformances.
     */
    cursor?: StudentPerformanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StudentPerformances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StudentPerformances.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StudentPerformances.
     */
    distinct?: StudentPerformanceScalarFieldEnum | StudentPerformanceScalarFieldEnum[]
  }

  /**
   * StudentPerformance findFirstOrThrow
   */
  export type StudentPerformanceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentPerformance
     */
    select?: StudentPerformanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentPerformanceInclude<ExtArgs> | null
    /**
     * Filter, which StudentPerformance to fetch.
     */
    where?: StudentPerformanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StudentPerformances to fetch.
     */
    orderBy?: StudentPerformanceOrderByWithRelationInput | StudentPerformanceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StudentPerformances.
     */
    cursor?: StudentPerformanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StudentPerformances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StudentPerformances.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StudentPerformances.
     */
    distinct?: StudentPerformanceScalarFieldEnum | StudentPerformanceScalarFieldEnum[]
  }

  /**
   * StudentPerformance findMany
   */
  export type StudentPerformanceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentPerformance
     */
    select?: StudentPerformanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentPerformanceInclude<ExtArgs> | null
    /**
     * Filter, which StudentPerformances to fetch.
     */
    where?: StudentPerformanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StudentPerformances to fetch.
     */
    orderBy?: StudentPerformanceOrderByWithRelationInput | StudentPerformanceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing StudentPerformances.
     */
    cursor?: StudentPerformanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StudentPerformances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StudentPerformances.
     */
    skip?: number
    distinct?: StudentPerformanceScalarFieldEnum | StudentPerformanceScalarFieldEnum[]
  }

  /**
   * StudentPerformance create
   */
  export type StudentPerformanceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentPerformance
     */
    select?: StudentPerformanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentPerformanceInclude<ExtArgs> | null
    /**
     * The data needed to create a StudentPerformance.
     */
    data: XOR<StudentPerformanceCreateInput, StudentPerformanceUncheckedCreateInput>
  }

  /**
   * StudentPerformance createMany
   */
  export type StudentPerformanceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many StudentPerformances.
     */
    data: StudentPerformanceCreateManyInput | StudentPerformanceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * StudentPerformance createManyAndReturn
   */
  export type StudentPerformanceCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentPerformance
     */
    select?: StudentPerformanceSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many StudentPerformances.
     */
    data: StudentPerformanceCreateManyInput | StudentPerformanceCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentPerformanceIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * StudentPerformance update
   */
  export type StudentPerformanceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentPerformance
     */
    select?: StudentPerformanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentPerformanceInclude<ExtArgs> | null
    /**
     * The data needed to update a StudentPerformance.
     */
    data: XOR<StudentPerformanceUpdateInput, StudentPerformanceUncheckedUpdateInput>
    /**
     * Choose, which StudentPerformance to update.
     */
    where: StudentPerformanceWhereUniqueInput
  }

  /**
   * StudentPerformance updateMany
   */
  export type StudentPerformanceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update StudentPerformances.
     */
    data: XOR<StudentPerformanceUpdateManyMutationInput, StudentPerformanceUncheckedUpdateManyInput>
    /**
     * Filter which StudentPerformances to update
     */
    where?: StudentPerformanceWhereInput
  }

  /**
   * StudentPerformance upsert
   */
  export type StudentPerformanceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentPerformance
     */
    select?: StudentPerformanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentPerformanceInclude<ExtArgs> | null
    /**
     * The filter to search for the StudentPerformance to update in case it exists.
     */
    where: StudentPerformanceWhereUniqueInput
    /**
     * In case the StudentPerformance found by the `where` argument doesn't exist, create a new StudentPerformance with this data.
     */
    create: XOR<StudentPerformanceCreateInput, StudentPerformanceUncheckedCreateInput>
    /**
     * In case the StudentPerformance was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StudentPerformanceUpdateInput, StudentPerformanceUncheckedUpdateInput>
  }

  /**
   * StudentPerformance delete
   */
  export type StudentPerformanceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentPerformance
     */
    select?: StudentPerformanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentPerformanceInclude<ExtArgs> | null
    /**
     * Filter which StudentPerformance to delete.
     */
    where: StudentPerformanceWhereUniqueInput
  }

  /**
   * StudentPerformance deleteMany
   */
  export type StudentPerformanceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StudentPerformances to delete
     */
    where?: StudentPerformanceWhereInput
  }

  /**
   * StudentPerformance without action
   */
  export type StudentPerformanceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentPerformance
     */
    select?: StudentPerformanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentPerformanceInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    name: 'name',
    role: 'role',
    email: 'email',
    passwordHash: 'passwordHash',
    grade: 'grade',
    school: 'school',
    parentName: 'parentName',
    parentPhone: 'parentPhone',
    studentNo: 'studentNo',
    createdAt: 'createdAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const CourseScalarFieldEnum: {
    id: 'id',
    name: 'name',
    level: 'level',
    startDate: 'startDate',
    endDate: 'endDate',
    createdAt: 'createdAt'
  };

  export type CourseScalarFieldEnum = (typeof CourseScalarFieldEnum)[keyof typeof CourseScalarFieldEnum]


  export const EnrollmentScalarFieldEnum: {
    id: 'id',
    courseId: 'courseId',
    studentId: 'studentId'
  };

  export type EnrollmentScalarFieldEnum = (typeof EnrollmentScalarFieldEnum)[keyof typeof EnrollmentScalarFieldEnum]


  export const SessionScalarFieldEnum: {
    id: 'id',
    courseId: 'courseId',
    sessionDate: 'sessionDate',
    startTime: 'startTime',
    endTime: 'endTime',
    teacherId: 'teacherId',
    content: 'content'
  };

  export type SessionScalarFieldEnum = (typeof SessionScalarFieldEnum)[keyof typeof SessionScalarFieldEnum]


  export const AttendanceRecordScalarFieldEnum: {
    id: 'id',
    sessionId: 'sessionId',
    studentId: 'studentId',
    status: 'status',
    note: 'note',
    updatedById: 'updatedById',
    updatedAt: 'updatedAt'
  };

  export type AttendanceRecordScalarFieldEnum = (typeof AttendanceRecordScalarFieldEnum)[keyof typeof AttendanceRecordScalarFieldEnum]


  export const LeaveRequestScalarFieldEnum: {
    id: 'id',
    sessionId: 'sessionId',
    studentId: 'studentId',
    reason: 'reason',
    status: 'status',
    approvedById: 'approvedById',
    approvedAt: 'approvedAt',
    createdAt: 'createdAt'
  };

  export type LeaveRequestScalarFieldEnum = (typeof LeaveRequestScalarFieldEnum)[keyof typeof LeaveRequestScalarFieldEnum]


  export const MakeUpSessionScalarFieldEnum: {
    id: 'id',
    originalSessionId: 'originalSessionId',
    studentId: 'studentId',
    makeUpDate: 'makeUpDate',
    startTime: 'startTime',
    endTime: 'endTime',
    attendanceStatus: 'attendanceStatus',
    content: 'content',
    createdById: 'createdById',
    createdAt: 'createdAt',
    leaveRequestId: 'leaveRequestId'
  };

  export type MakeUpSessionScalarFieldEnum = (typeof MakeUpSessionScalarFieldEnum)[keyof typeof MakeUpSessionScalarFieldEnum]


  export const StudentPerformanceScalarFieldEnum: {
    id: 'id',
    sessionId: 'sessionId',
    studentId: 'studentId',
    performance: 'performance',
    createdById: 'createdById',
    createdAt: 'createdAt'
  };

  export type StudentPerformanceScalarFieldEnum = (typeof StudentPerformanceScalarFieldEnum)[keyof typeof StudentPerformanceScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: IntFilter<"User"> | number
    name?: StringFilter<"User"> | string
    role?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    passwordHash?: StringFilter<"User"> | string
    grade?: IntNullableFilter<"User"> | number | null
    school?: StringNullableFilter<"User"> | string | null
    parentName?: StringNullableFilter<"User"> | string | null
    parentPhone?: StringNullableFilter<"User"> | string | null
    studentNo?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    enrollments?: EnrollmentListRelationFilter
    teachingSessions?: SessionListRelationFilter
    attendanceRecords?: AttendanceRecordListRelationFilter
    updatedAttendances?: AttendanceRecordListRelationFilter
    leaveRequests?: LeaveRequestListRelationFilter
    approvedLeaveRequests?: LeaveRequestListRelationFilter
    makeUpSessions?: MakeUpSessionListRelationFilter
    createdMakeUpSessions?: MakeUpSessionListRelationFilter
    performances?: StudentPerformanceListRelationFilter
    createdPerformances?: StudentPerformanceListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    role?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    grade?: SortOrderInput | SortOrder
    school?: SortOrderInput | SortOrder
    parentName?: SortOrderInput | SortOrder
    parentPhone?: SortOrderInput | SortOrder
    studentNo?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    enrollments?: EnrollmentOrderByRelationAggregateInput
    teachingSessions?: SessionOrderByRelationAggregateInput
    attendanceRecords?: AttendanceRecordOrderByRelationAggregateInput
    updatedAttendances?: AttendanceRecordOrderByRelationAggregateInput
    leaveRequests?: LeaveRequestOrderByRelationAggregateInput
    approvedLeaveRequests?: LeaveRequestOrderByRelationAggregateInput
    makeUpSessions?: MakeUpSessionOrderByRelationAggregateInput
    createdMakeUpSessions?: MakeUpSessionOrderByRelationAggregateInput
    performances?: StudentPerformanceOrderByRelationAggregateInput
    createdPerformances?: StudentPerformanceOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    name?: StringFilter<"User"> | string
    role?: StringFilter<"User"> | string
    passwordHash?: StringFilter<"User"> | string
    grade?: IntNullableFilter<"User"> | number | null
    school?: StringNullableFilter<"User"> | string | null
    parentName?: StringNullableFilter<"User"> | string | null
    parentPhone?: StringNullableFilter<"User"> | string | null
    studentNo?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    enrollments?: EnrollmentListRelationFilter
    teachingSessions?: SessionListRelationFilter
    attendanceRecords?: AttendanceRecordListRelationFilter
    updatedAttendances?: AttendanceRecordListRelationFilter
    leaveRequests?: LeaveRequestListRelationFilter
    approvedLeaveRequests?: LeaveRequestListRelationFilter
    makeUpSessions?: MakeUpSessionListRelationFilter
    createdMakeUpSessions?: MakeUpSessionListRelationFilter
    performances?: StudentPerformanceListRelationFilter
    createdPerformances?: StudentPerformanceListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    role?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    grade?: SortOrderInput | SortOrder
    school?: SortOrderInput | SortOrder
    parentName?: SortOrderInput | SortOrder
    parentPhone?: SortOrderInput | SortOrder
    studentNo?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User"> | number
    name?: StringWithAggregatesFilter<"User"> | string
    role?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    passwordHash?: StringWithAggregatesFilter<"User"> | string
    grade?: IntNullableWithAggregatesFilter<"User"> | number | null
    school?: StringNullableWithAggregatesFilter<"User"> | string | null
    parentName?: StringNullableWithAggregatesFilter<"User"> | string | null
    parentPhone?: StringNullableWithAggregatesFilter<"User"> | string | null
    studentNo?: StringNullableWithAggregatesFilter<"User"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type CourseWhereInput = {
    AND?: CourseWhereInput | CourseWhereInput[]
    OR?: CourseWhereInput[]
    NOT?: CourseWhereInput | CourseWhereInput[]
    id?: IntFilter<"Course"> | number
    name?: StringFilter<"Course"> | string
    level?: StringNullableFilter<"Course"> | string | null
    startDate?: DateTimeFilter<"Course"> | Date | string
    endDate?: DateTimeFilter<"Course"> | Date | string
    createdAt?: DateTimeFilter<"Course"> | Date | string
    enrollments?: EnrollmentListRelationFilter
    sessions?: SessionListRelationFilter
  }

  export type CourseOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    level?: SortOrderInput | SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    createdAt?: SortOrder
    enrollments?: EnrollmentOrderByRelationAggregateInput
    sessions?: SessionOrderByRelationAggregateInput
  }

  export type CourseWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: CourseWhereInput | CourseWhereInput[]
    OR?: CourseWhereInput[]
    NOT?: CourseWhereInput | CourseWhereInput[]
    name?: StringFilter<"Course"> | string
    level?: StringNullableFilter<"Course"> | string | null
    startDate?: DateTimeFilter<"Course"> | Date | string
    endDate?: DateTimeFilter<"Course"> | Date | string
    createdAt?: DateTimeFilter<"Course"> | Date | string
    enrollments?: EnrollmentListRelationFilter
    sessions?: SessionListRelationFilter
  }, "id">

  export type CourseOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    level?: SortOrderInput | SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    createdAt?: SortOrder
    _count?: CourseCountOrderByAggregateInput
    _avg?: CourseAvgOrderByAggregateInput
    _max?: CourseMaxOrderByAggregateInput
    _min?: CourseMinOrderByAggregateInput
    _sum?: CourseSumOrderByAggregateInput
  }

  export type CourseScalarWhereWithAggregatesInput = {
    AND?: CourseScalarWhereWithAggregatesInput | CourseScalarWhereWithAggregatesInput[]
    OR?: CourseScalarWhereWithAggregatesInput[]
    NOT?: CourseScalarWhereWithAggregatesInput | CourseScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Course"> | number
    name?: StringWithAggregatesFilter<"Course"> | string
    level?: StringNullableWithAggregatesFilter<"Course"> | string | null
    startDate?: DateTimeWithAggregatesFilter<"Course"> | Date | string
    endDate?: DateTimeWithAggregatesFilter<"Course"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"Course"> | Date | string
  }

  export type EnrollmentWhereInput = {
    AND?: EnrollmentWhereInput | EnrollmentWhereInput[]
    OR?: EnrollmentWhereInput[]
    NOT?: EnrollmentWhereInput | EnrollmentWhereInput[]
    id?: IntFilter<"Enrollment"> | number
    courseId?: IntFilter<"Enrollment"> | number
    studentId?: IntFilter<"Enrollment"> | number
    course?: XOR<CourseRelationFilter, CourseWhereInput>
    student?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type EnrollmentOrderByWithRelationInput = {
    id?: SortOrder
    courseId?: SortOrder
    studentId?: SortOrder
    course?: CourseOrderByWithRelationInput
    student?: UserOrderByWithRelationInput
  }

  export type EnrollmentWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: EnrollmentWhereInput | EnrollmentWhereInput[]
    OR?: EnrollmentWhereInput[]
    NOT?: EnrollmentWhereInput | EnrollmentWhereInput[]
    courseId?: IntFilter<"Enrollment"> | number
    studentId?: IntFilter<"Enrollment"> | number
    course?: XOR<CourseRelationFilter, CourseWhereInput>
    student?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type EnrollmentOrderByWithAggregationInput = {
    id?: SortOrder
    courseId?: SortOrder
    studentId?: SortOrder
    _count?: EnrollmentCountOrderByAggregateInput
    _avg?: EnrollmentAvgOrderByAggregateInput
    _max?: EnrollmentMaxOrderByAggregateInput
    _min?: EnrollmentMinOrderByAggregateInput
    _sum?: EnrollmentSumOrderByAggregateInput
  }

  export type EnrollmentScalarWhereWithAggregatesInput = {
    AND?: EnrollmentScalarWhereWithAggregatesInput | EnrollmentScalarWhereWithAggregatesInput[]
    OR?: EnrollmentScalarWhereWithAggregatesInput[]
    NOT?: EnrollmentScalarWhereWithAggregatesInput | EnrollmentScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Enrollment"> | number
    courseId?: IntWithAggregatesFilter<"Enrollment"> | number
    studentId?: IntWithAggregatesFilter<"Enrollment"> | number
  }

  export type SessionWhereInput = {
    AND?: SessionWhereInput | SessionWhereInput[]
    OR?: SessionWhereInput[]
    NOT?: SessionWhereInput | SessionWhereInput[]
    id?: IntFilter<"Session"> | number
    courseId?: IntFilter<"Session"> | number
    sessionDate?: DateTimeFilter<"Session"> | Date | string
    startTime?: StringFilter<"Session"> | string
    endTime?: StringFilter<"Session"> | string
    teacherId?: IntNullableFilter<"Session"> | number | null
    content?: StringNullableFilter<"Session"> | string | null
    course?: XOR<CourseRelationFilter, CourseWhereInput>
    teacher?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    attendanceRecords?: AttendanceRecordListRelationFilter
    performances?: StudentPerformanceListRelationFilter
    leaveRequests?: LeaveRequestListRelationFilter
    makeUpSessions?: MakeUpSessionListRelationFilter
  }

  export type SessionOrderByWithRelationInput = {
    id?: SortOrder
    courseId?: SortOrder
    sessionDate?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    teacherId?: SortOrderInput | SortOrder
    content?: SortOrderInput | SortOrder
    course?: CourseOrderByWithRelationInput
    teacher?: UserOrderByWithRelationInput
    attendanceRecords?: AttendanceRecordOrderByRelationAggregateInput
    performances?: StudentPerformanceOrderByRelationAggregateInput
    leaveRequests?: LeaveRequestOrderByRelationAggregateInput
    makeUpSessions?: MakeUpSessionOrderByRelationAggregateInput
  }

  export type SessionWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: SessionWhereInput | SessionWhereInput[]
    OR?: SessionWhereInput[]
    NOT?: SessionWhereInput | SessionWhereInput[]
    courseId?: IntFilter<"Session"> | number
    sessionDate?: DateTimeFilter<"Session"> | Date | string
    startTime?: StringFilter<"Session"> | string
    endTime?: StringFilter<"Session"> | string
    teacherId?: IntNullableFilter<"Session"> | number | null
    content?: StringNullableFilter<"Session"> | string | null
    course?: XOR<CourseRelationFilter, CourseWhereInput>
    teacher?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    attendanceRecords?: AttendanceRecordListRelationFilter
    performances?: StudentPerformanceListRelationFilter
    leaveRequests?: LeaveRequestListRelationFilter
    makeUpSessions?: MakeUpSessionListRelationFilter
  }, "id">

  export type SessionOrderByWithAggregationInput = {
    id?: SortOrder
    courseId?: SortOrder
    sessionDate?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    teacherId?: SortOrderInput | SortOrder
    content?: SortOrderInput | SortOrder
    _count?: SessionCountOrderByAggregateInput
    _avg?: SessionAvgOrderByAggregateInput
    _max?: SessionMaxOrderByAggregateInput
    _min?: SessionMinOrderByAggregateInput
    _sum?: SessionSumOrderByAggregateInput
  }

  export type SessionScalarWhereWithAggregatesInput = {
    AND?: SessionScalarWhereWithAggregatesInput | SessionScalarWhereWithAggregatesInput[]
    OR?: SessionScalarWhereWithAggregatesInput[]
    NOT?: SessionScalarWhereWithAggregatesInput | SessionScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Session"> | number
    courseId?: IntWithAggregatesFilter<"Session"> | number
    sessionDate?: DateTimeWithAggregatesFilter<"Session"> | Date | string
    startTime?: StringWithAggregatesFilter<"Session"> | string
    endTime?: StringWithAggregatesFilter<"Session"> | string
    teacherId?: IntNullableWithAggregatesFilter<"Session"> | number | null
    content?: StringNullableWithAggregatesFilter<"Session"> | string | null
  }

  export type AttendanceRecordWhereInput = {
    AND?: AttendanceRecordWhereInput | AttendanceRecordWhereInput[]
    OR?: AttendanceRecordWhereInput[]
    NOT?: AttendanceRecordWhereInput | AttendanceRecordWhereInput[]
    id?: IntFilter<"AttendanceRecord"> | number
    sessionId?: IntFilter<"AttendanceRecord"> | number
    studentId?: IntFilter<"AttendanceRecord"> | number
    status?: StringFilter<"AttendanceRecord"> | string
    note?: StringNullableFilter<"AttendanceRecord"> | string | null
    updatedById?: IntFilter<"AttendanceRecord"> | number
    updatedAt?: DateTimeFilter<"AttendanceRecord"> | Date | string
    session?: XOR<SessionRelationFilter, SessionWhereInput>
    student?: XOR<UserRelationFilter, UserWhereInput>
    updatedBy?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type AttendanceRecordOrderByWithRelationInput = {
    id?: SortOrder
    sessionId?: SortOrder
    studentId?: SortOrder
    status?: SortOrder
    note?: SortOrderInput | SortOrder
    updatedById?: SortOrder
    updatedAt?: SortOrder
    session?: SessionOrderByWithRelationInput
    student?: UserOrderByWithRelationInput
    updatedBy?: UserOrderByWithRelationInput
  }

  export type AttendanceRecordWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    sessionId_studentId?: AttendanceRecordSessionIdStudentIdCompoundUniqueInput
    AND?: AttendanceRecordWhereInput | AttendanceRecordWhereInput[]
    OR?: AttendanceRecordWhereInput[]
    NOT?: AttendanceRecordWhereInput | AttendanceRecordWhereInput[]
    sessionId?: IntFilter<"AttendanceRecord"> | number
    studentId?: IntFilter<"AttendanceRecord"> | number
    status?: StringFilter<"AttendanceRecord"> | string
    note?: StringNullableFilter<"AttendanceRecord"> | string | null
    updatedById?: IntFilter<"AttendanceRecord"> | number
    updatedAt?: DateTimeFilter<"AttendanceRecord"> | Date | string
    session?: XOR<SessionRelationFilter, SessionWhereInput>
    student?: XOR<UserRelationFilter, UserWhereInput>
    updatedBy?: XOR<UserRelationFilter, UserWhereInput>
  }, "id" | "sessionId_studentId">

  export type AttendanceRecordOrderByWithAggregationInput = {
    id?: SortOrder
    sessionId?: SortOrder
    studentId?: SortOrder
    status?: SortOrder
    note?: SortOrderInput | SortOrder
    updatedById?: SortOrder
    updatedAt?: SortOrder
    _count?: AttendanceRecordCountOrderByAggregateInput
    _avg?: AttendanceRecordAvgOrderByAggregateInput
    _max?: AttendanceRecordMaxOrderByAggregateInput
    _min?: AttendanceRecordMinOrderByAggregateInput
    _sum?: AttendanceRecordSumOrderByAggregateInput
  }

  export type AttendanceRecordScalarWhereWithAggregatesInput = {
    AND?: AttendanceRecordScalarWhereWithAggregatesInput | AttendanceRecordScalarWhereWithAggregatesInput[]
    OR?: AttendanceRecordScalarWhereWithAggregatesInput[]
    NOT?: AttendanceRecordScalarWhereWithAggregatesInput | AttendanceRecordScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"AttendanceRecord"> | number
    sessionId?: IntWithAggregatesFilter<"AttendanceRecord"> | number
    studentId?: IntWithAggregatesFilter<"AttendanceRecord"> | number
    status?: StringWithAggregatesFilter<"AttendanceRecord"> | string
    note?: StringNullableWithAggregatesFilter<"AttendanceRecord"> | string | null
    updatedById?: IntWithAggregatesFilter<"AttendanceRecord"> | number
    updatedAt?: DateTimeWithAggregatesFilter<"AttendanceRecord"> | Date | string
  }

  export type LeaveRequestWhereInput = {
    AND?: LeaveRequestWhereInput | LeaveRequestWhereInput[]
    OR?: LeaveRequestWhereInput[]
    NOT?: LeaveRequestWhereInput | LeaveRequestWhereInput[]
    id?: IntFilter<"LeaveRequest"> | number
    sessionId?: IntFilter<"LeaveRequest"> | number
    studentId?: IntFilter<"LeaveRequest"> | number
    reason?: StringFilter<"LeaveRequest"> | string
    status?: StringFilter<"LeaveRequest"> | string
    approvedById?: IntNullableFilter<"LeaveRequest"> | number | null
    approvedAt?: DateTimeNullableFilter<"LeaveRequest"> | Date | string | null
    createdAt?: DateTimeFilter<"LeaveRequest"> | Date | string
    session?: XOR<SessionRelationFilter, SessionWhereInput>
    student?: XOR<UserRelationFilter, UserWhereInput>
    approvedBy?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    makeUps?: MakeUpSessionListRelationFilter
  }

  export type LeaveRequestOrderByWithRelationInput = {
    id?: SortOrder
    sessionId?: SortOrder
    studentId?: SortOrder
    reason?: SortOrder
    status?: SortOrder
    approvedById?: SortOrderInput | SortOrder
    approvedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    session?: SessionOrderByWithRelationInput
    student?: UserOrderByWithRelationInput
    approvedBy?: UserOrderByWithRelationInput
    makeUps?: MakeUpSessionOrderByRelationAggregateInput
  }

  export type LeaveRequestWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: LeaveRequestWhereInput | LeaveRequestWhereInput[]
    OR?: LeaveRequestWhereInput[]
    NOT?: LeaveRequestWhereInput | LeaveRequestWhereInput[]
    sessionId?: IntFilter<"LeaveRequest"> | number
    studentId?: IntFilter<"LeaveRequest"> | number
    reason?: StringFilter<"LeaveRequest"> | string
    status?: StringFilter<"LeaveRequest"> | string
    approvedById?: IntNullableFilter<"LeaveRequest"> | number | null
    approvedAt?: DateTimeNullableFilter<"LeaveRequest"> | Date | string | null
    createdAt?: DateTimeFilter<"LeaveRequest"> | Date | string
    session?: XOR<SessionRelationFilter, SessionWhereInput>
    student?: XOR<UserRelationFilter, UserWhereInput>
    approvedBy?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    makeUps?: MakeUpSessionListRelationFilter
  }, "id">

  export type LeaveRequestOrderByWithAggregationInput = {
    id?: SortOrder
    sessionId?: SortOrder
    studentId?: SortOrder
    reason?: SortOrder
    status?: SortOrder
    approvedById?: SortOrderInput | SortOrder
    approvedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: LeaveRequestCountOrderByAggregateInput
    _avg?: LeaveRequestAvgOrderByAggregateInput
    _max?: LeaveRequestMaxOrderByAggregateInput
    _min?: LeaveRequestMinOrderByAggregateInput
    _sum?: LeaveRequestSumOrderByAggregateInput
  }

  export type LeaveRequestScalarWhereWithAggregatesInput = {
    AND?: LeaveRequestScalarWhereWithAggregatesInput | LeaveRequestScalarWhereWithAggregatesInput[]
    OR?: LeaveRequestScalarWhereWithAggregatesInput[]
    NOT?: LeaveRequestScalarWhereWithAggregatesInput | LeaveRequestScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"LeaveRequest"> | number
    sessionId?: IntWithAggregatesFilter<"LeaveRequest"> | number
    studentId?: IntWithAggregatesFilter<"LeaveRequest"> | number
    reason?: StringWithAggregatesFilter<"LeaveRequest"> | string
    status?: StringWithAggregatesFilter<"LeaveRequest"> | string
    approvedById?: IntNullableWithAggregatesFilter<"LeaveRequest"> | number | null
    approvedAt?: DateTimeNullableWithAggregatesFilter<"LeaveRequest"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"LeaveRequest"> | Date | string
  }

  export type MakeUpSessionWhereInput = {
    AND?: MakeUpSessionWhereInput | MakeUpSessionWhereInput[]
    OR?: MakeUpSessionWhereInput[]
    NOT?: MakeUpSessionWhereInput | MakeUpSessionWhereInput[]
    id?: IntFilter<"MakeUpSession"> | number
    originalSessionId?: IntFilter<"MakeUpSession"> | number
    studentId?: IntFilter<"MakeUpSession"> | number
    makeUpDate?: DateTimeFilter<"MakeUpSession"> | Date | string
    startTime?: StringFilter<"MakeUpSession"> | string
    endTime?: StringFilter<"MakeUpSession"> | string
    attendanceStatus?: StringFilter<"MakeUpSession"> | string
    content?: StringNullableFilter<"MakeUpSession"> | string | null
    createdById?: IntFilter<"MakeUpSession"> | number
    createdAt?: DateTimeFilter<"MakeUpSession"> | Date | string
    leaveRequestId?: IntNullableFilter<"MakeUpSession"> | number | null
    originalSession?: XOR<SessionRelationFilter, SessionWhereInput>
    student?: XOR<UserRelationFilter, UserWhereInput>
    createdBy?: XOR<UserRelationFilter, UserWhereInput>
    leaveRequest?: XOR<LeaveRequestNullableRelationFilter, LeaveRequestWhereInput> | null
  }

  export type MakeUpSessionOrderByWithRelationInput = {
    id?: SortOrder
    originalSessionId?: SortOrder
    studentId?: SortOrder
    makeUpDate?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    attendanceStatus?: SortOrder
    content?: SortOrderInput | SortOrder
    createdById?: SortOrder
    createdAt?: SortOrder
    leaveRequestId?: SortOrderInput | SortOrder
    originalSession?: SessionOrderByWithRelationInput
    student?: UserOrderByWithRelationInput
    createdBy?: UserOrderByWithRelationInput
    leaveRequest?: LeaveRequestOrderByWithRelationInput
  }

  export type MakeUpSessionWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: MakeUpSessionWhereInput | MakeUpSessionWhereInput[]
    OR?: MakeUpSessionWhereInput[]
    NOT?: MakeUpSessionWhereInput | MakeUpSessionWhereInput[]
    originalSessionId?: IntFilter<"MakeUpSession"> | number
    studentId?: IntFilter<"MakeUpSession"> | number
    makeUpDate?: DateTimeFilter<"MakeUpSession"> | Date | string
    startTime?: StringFilter<"MakeUpSession"> | string
    endTime?: StringFilter<"MakeUpSession"> | string
    attendanceStatus?: StringFilter<"MakeUpSession"> | string
    content?: StringNullableFilter<"MakeUpSession"> | string | null
    createdById?: IntFilter<"MakeUpSession"> | number
    createdAt?: DateTimeFilter<"MakeUpSession"> | Date | string
    leaveRequestId?: IntNullableFilter<"MakeUpSession"> | number | null
    originalSession?: XOR<SessionRelationFilter, SessionWhereInput>
    student?: XOR<UserRelationFilter, UserWhereInput>
    createdBy?: XOR<UserRelationFilter, UserWhereInput>
    leaveRequest?: XOR<LeaveRequestNullableRelationFilter, LeaveRequestWhereInput> | null
  }, "id">

  export type MakeUpSessionOrderByWithAggregationInput = {
    id?: SortOrder
    originalSessionId?: SortOrder
    studentId?: SortOrder
    makeUpDate?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    attendanceStatus?: SortOrder
    content?: SortOrderInput | SortOrder
    createdById?: SortOrder
    createdAt?: SortOrder
    leaveRequestId?: SortOrderInput | SortOrder
    _count?: MakeUpSessionCountOrderByAggregateInput
    _avg?: MakeUpSessionAvgOrderByAggregateInput
    _max?: MakeUpSessionMaxOrderByAggregateInput
    _min?: MakeUpSessionMinOrderByAggregateInput
    _sum?: MakeUpSessionSumOrderByAggregateInput
  }

  export type MakeUpSessionScalarWhereWithAggregatesInput = {
    AND?: MakeUpSessionScalarWhereWithAggregatesInput | MakeUpSessionScalarWhereWithAggregatesInput[]
    OR?: MakeUpSessionScalarWhereWithAggregatesInput[]
    NOT?: MakeUpSessionScalarWhereWithAggregatesInput | MakeUpSessionScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"MakeUpSession"> | number
    originalSessionId?: IntWithAggregatesFilter<"MakeUpSession"> | number
    studentId?: IntWithAggregatesFilter<"MakeUpSession"> | number
    makeUpDate?: DateTimeWithAggregatesFilter<"MakeUpSession"> | Date | string
    startTime?: StringWithAggregatesFilter<"MakeUpSession"> | string
    endTime?: StringWithAggregatesFilter<"MakeUpSession"> | string
    attendanceStatus?: StringWithAggregatesFilter<"MakeUpSession"> | string
    content?: StringNullableWithAggregatesFilter<"MakeUpSession"> | string | null
    createdById?: IntWithAggregatesFilter<"MakeUpSession"> | number
    createdAt?: DateTimeWithAggregatesFilter<"MakeUpSession"> | Date | string
    leaveRequestId?: IntNullableWithAggregatesFilter<"MakeUpSession"> | number | null
  }

  export type StudentPerformanceWhereInput = {
    AND?: StudentPerformanceWhereInput | StudentPerformanceWhereInput[]
    OR?: StudentPerformanceWhereInput[]
    NOT?: StudentPerformanceWhereInput | StudentPerformanceWhereInput[]
    id?: IntFilter<"StudentPerformance"> | number
    sessionId?: IntFilter<"StudentPerformance"> | number
    studentId?: IntFilter<"StudentPerformance"> | number
    performance?: StringFilter<"StudentPerformance"> | string
    createdById?: IntFilter<"StudentPerformance"> | number
    createdAt?: DateTimeFilter<"StudentPerformance"> | Date | string
    session?: XOR<SessionRelationFilter, SessionWhereInput>
    student?: XOR<UserRelationFilter, UserWhereInput>
    createdBy?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type StudentPerformanceOrderByWithRelationInput = {
    id?: SortOrder
    sessionId?: SortOrder
    studentId?: SortOrder
    performance?: SortOrder
    createdById?: SortOrder
    createdAt?: SortOrder
    session?: SessionOrderByWithRelationInput
    student?: UserOrderByWithRelationInput
    createdBy?: UserOrderByWithRelationInput
  }

  export type StudentPerformanceWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: StudentPerformanceWhereInput | StudentPerformanceWhereInput[]
    OR?: StudentPerformanceWhereInput[]
    NOT?: StudentPerformanceWhereInput | StudentPerformanceWhereInput[]
    sessionId?: IntFilter<"StudentPerformance"> | number
    studentId?: IntFilter<"StudentPerformance"> | number
    performance?: StringFilter<"StudentPerformance"> | string
    createdById?: IntFilter<"StudentPerformance"> | number
    createdAt?: DateTimeFilter<"StudentPerformance"> | Date | string
    session?: XOR<SessionRelationFilter, SessionWhereInput>
    student?: XOR<UserRelationFilter, UserWhereInput>
    createdBy?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type StudentPerformanceOrderByWithAggregationInput = {
    id?: SortOrder
    sessionId?: SortOrder
    studentId?: SortOrder
    performance?: SortOrder
    createdById?: SortOrder
    createdAt?: SortOrder
    _count?: StudentPerformanceCountOrderByAggregateInput
    _avg?: StudentPerformanceAvgOrderByAggregateInput
    _max?: StudentPerformanceMaxOrderByAggregateInput
    _min?: StudentPerformanceMinOrderByAggregateInput
    _sum?: StudentPerformanceSumOrderByAggregateInput
  }

  export type StudentPerformanceScalarWhereWithAggregatesInput = {
    AND?: StudentPerformanceScalarWhereWithAggregatesInput | StudentPerformanceScalarWhereWithAggregatesInput[]
    OR?: StudentPerformanceScalarWhereWithAggregatesInput[]
    NOT?: StudentPerformanceScalarWhereWithAggregatesInput | StudentPerformanceScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"StudentPerformance"> | number
    sessionId?: IntWithAggregatesFilter<"StudentPerformance"> | number
    studentId?: IntWithAggregatesFilter<"StudentPerformance"> | number
    performance?: StringWithAggregatesFilter<"StudentPerformance"> | string
    createdById?: IntWithAggregatesFilter<"StudentPerformance"> | number
    createdAt?: DateTimeWithAggregatesFilter<"StudentPerformance"> | Date | string
  }

  export type UserCreateInput = {
    name: string
    role: string
    email: string
    passwordHash: string
    grade?: number | null
    school?: string | null
    parentName?: string | null
    parentPhone?: string | null
    studentNo?: string | null
    createdAt?: Date | string
    enrollments?: EnrollmentCreateNestedManyWithoutStudentInput
    teachingSessions?: SessionCreateNestedManyWithoutTeacherInput
    attendanceRecords?: AttendanceRecordCreateNestedManyWithoutStudentInput
    updatedAttendances?: AttendanceRecordCreateNestedManyWithoutUpdatedByInput
    leaveRequests?: LeaveRequestCreateNestedManyWithoutStudentInput
    approvedLeaveRequests?: LeaveRequestCreateNestedManyWithoutApprovedByInput
    makeUpSessions?: MakeUpSessionCreateNestedManyWithoutStudentInput
    createdMakeUpSessions?: MakeUpSessionCreateNestedManyWithoutCreatedByInput
    performances?: StudentPerformanceCreateNestedManyWithoutStudentInput
    createdPerformances?: StudentPerformanceCreateNestedManyWithoutCreatedByInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    name: string
    role: string
    email: string
    passwordHash: string
    grade?: number | null
    school?: string | null
    parentName?: string | null
    parentPhone?: string | null
    studentNo?: string | null
    createdAt?: Date | string
    enrollments?: EnrollmentUncheckedCreateNestedManyWithoutStudentInput
    teachingSessions?: SessionUncheckedCreateNestedManyWithoutTeacherInput
    attendanceRecords?: AttendanceRecordUncheckedCreateNestedManyWithoutStudentInput
    updatedAttendances?: AttendanceRecordUncheckedCreateNestedManyWithoutUpdatedByInput
    leaveRequests?: LeaveRequestUncheckedCreateNestedManyWithoutStudentInput
    approvedLeaveRequests?: LeaveRequestUncheckedCreateNestedManyWithoutApprovedByInput
    makeUpSessions?: MakeUpSessionUncheckedCreateNestedManyWithoutStudentInput
    createdMakeUpSessions?: MakeUpSessionUncheckedCreateNestedManyWithoutCreatedByInput
    performances?: StudentPerformanceUncheckedCreateNestedManyWithoutStudentInput
    createdPerformances?: StudentPerformanceUncheckedCreateNestedManyWithoutCreatedByInput
  }

  export type UserUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    grade?: NullableIntFieldUpdateOperationsInput | number | null
    school?: NullableStringFieldUpdateOperationsInput | string | null
    parentName?: NullableStringFieldUpdateOperationsInput | string | null
    parentPhone?: NullableStringFieldUpdateOperationsInput | string | null
    studentNo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    enrollments?: EnrollmentUpdateManyWithoutStudentNestedInput
    teachingSessions?: SessionUpdateManyWithoutTeacherNestedInput
    attendanceRecords?: AttendanceRecordUpdateManyWithoutStudentNestedInput
    updatedAttendances?: AttendanceRecordUpdateManyWithoutUpdatedByNestedInput
    leaveRequests?: LeaveRequestUpdateManyWithoutStudentNestedInput
    approvedLeaveRequests?: LeaveRequestUpdateManyWithoutApprovedByNestedInput
    makeUpSessions?: MakeUpSessionUpdateManyWithoutStudentNestedInput
    createdMakeUpSessions?: MakeUpSessionUpdateManyWithoutCreatedByNestedInput
    performances?: StudentPerformanceUpdateManyWithoutStudentNestedInput
    createdPerformances?: StudentPerformanceUpdateManyWithoutCreatedByNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    grade?: NullableIntFieldUpdateOperationsInput | number | null
    school?: NullableStringFieldUpdateOperationsInput | string | null
    parentName?: NullableStringFieldUpdateOperationsInput | string | null
    parentPhone?: NullableStringFieldUpdateOperationsInput | string | null
    studentNo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    enrollments?: EnrollmentUncheckedUpdateManyWithoutStudentNestedInput
    teachingSessions?: SessionUncheckedUpdateManyWithoutTeacherNestedInput
    attendanceRecords?: AttendanceRecordUncheckedUpdateManyWithoutStudentNestedInput
    updatedAttendances?: AttendanceRecordUncheckedUpdateManyWithoutUpdatedByNestedInput
    leaveRequests?: LeaveRequestUncheckedUpdateManyWithoutStudentNestedInput
    approvedLeaveRequests?: LeaveRequestUncheckedUpdateManyWithoutApprovedByNestedInput
    makeUpSessions?: MakeUpSessionUncheckedUpdateManyWithoutStudentNestedInput
    createdMakeUpSessions?: MakeUpSessionUncheckedUpdateManyWithoutCreatedByNestedInput
    performances?: StudentPerformanceUncheckedUpdateManyWithoutStudentNestedInput
    createdPerformances?: StudentPerformanceUncheckedUpdateManyWithoutCreatedByNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    name: string
    role: string
    email: string
    passwordHash: string
    grade?: number | null
    school?: string | null
    parentName?: string | null
    parentPhone?: string | null
    studentNo?: string | null
    createdAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    grade?: NullableIntFieldUpdateOperationsInput | number | null
    school?: NullableStringFieldUpdateOperationsInput | string | null
    parentName?: NullableStringFieldUpdateOperationsInput | string | null
    parentPhone?: NullableStringFieldUpdateOperationsInput | string | null
    studentNo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    grade?: NullableIntFieldUpdateOperationsInput | number | null
    school?: NullableStringFieldUpdateOperationsInput | string | null
    parentName?: NullableStringFieldUpdateOperationsInput | string | null
    parentPhone?: NullableStringFieldUpdateOperationsInput | string | null
    studentNo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CourseCreateInput = {
    name: string
    level?: string | null
    startDate: Date | string
    endDate: Date | string
    createdAt?: Date | string
    enrollments?: EnrollmentCreateNestedManyWithoutCourseInput
    sessions?: SessionCreateNestedManyWithoutCourseInput
  }

  export type CourseUncheckedCreateInput = {
    id?: number
    name: string
    level?: string | null
    startDate: Date | string
    endDate: Date | string
    createdAt?: Date | string
    enrollments?: EnrollmentUncheckedCreateNestedManyWithoutCourseInput
    sessions?: SessionUncheckedCreateNestedManyWithoutCourseInput
  }

  export type CourseUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    level?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    enrollments?: EnrollmentUpdateManyWithoutCourseNestedInput
    sessions?: SessionUpdateManyWithoutCourseNestedInput
  }

  export type CourseUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    level?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    enrollments?: EnrollmentUncheckedUpdateManyWithoutCourseNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutCourseNestedInput
  }

  export type CourseCreateManyInput = {
    id?: number
    name: string
    level?: string | null
    startDate: Date | string
    endDate: Date | string
    createdAt?: Date | string
  }

  export type CourseUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    level?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CourseUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    level?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EnrollmentCreateInput = {
    course: CourseCreateNestedOneWithoutEnrollmentsInput
    student: UserCreateNestedOneWithoutEnrollmentsInput
  }

  export type EnrollmentUncheckedCreateInput = {
    id?: number
    courseId: number
    studentId: number
  }

  export type EnrollmentUpdateInput = {
    course?: CourseUpdateOneRequiredWithoutEnrollmentsNestedInput
    student?: UserUpdateOneRequiredWithoutEnrollmentsNestedInput
  }

  export type EnrollmentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    courseId?: IntFieldUpdateOperationsInput | number
    studentId?: IntFieldUpdateOperationsInput | number
  }

  export type EnrollmentCreateManyInput = {
    id?: number
    courseId: number
    studentId: number
  }

  export type EnrollmentUpdateManyMutationInput = {

  }

  export type EnrollmentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    courseId?: IntFieldUpdateOperationsInput | number
    studentId?: IntFieldUpdateOperationsInput | number
  }

  export type SessionCreateInput = {
    sessionDate: Date | string
    startTime: string
    endTime: string
    content?: string | null
    course: CourseCreateNestedOneWithoutSessionsInput
    teacher?: UserCreateNestedOneWithoutTeachingSessionsInput
    attendanceRecords?: AttendanceRecordCreateNestedManyWithoutSessionInput
    performances?: StudentPerformanceCreateNestedManyWithoutSessionInput
    leaveRequests?: LeaveRequestCreateNestedManyWithoutSessionInput
    makeUpSessions?: MakeUpSessionCreateNestedManyWithoutOriginalSessionInput
  }

  export type SessionUncheckedCreateInput = {
    id?: number
    courseId: number
    sessionDate: Date | string
    startTime: string
    endTime: string
    teacherId?: number | null
    content?: string | null
    attendanceRecords?: AttendanceRecordUncheckedCreateNestedManyWithoutSessionInput
    performances?: StudentPerformanceUncheckedCreateNestedManyWithoutSessionInput
    leaveRequests?: LeaveRequestUncheckedCreateNestedManyWithoutSessionInput
    makeUpSessions?: MakeUpSessionUncheckedCreateNestedManyWithoutOriginalSessionInput
  }

  export type SessionUpdateInput = {
    sessionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    course?: CourseUpdateOneRequiredWithoutSessionsNestedInput
    teacher?: UserUpdateOneWithoutTeachingSessionsNestedInput
    attendanceRecords?: AttendanceRecordUpdateManyWithoutSessionNestedInput
    performances?: StudentPerformanceUpdateManyWithoutSessionNestedInput
    leaveRequests?: LeaveRequestUpdateManyWithoutSessionNestedInput
    makeUpSessions?: MakeUpSessionUpdateManyWithoutOriginalSessionNestedInput
  }

  export type SessionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    courseId?: IntFieldUpdateOperationsInput | number
    sessionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    teacherId?: NullableIntFieldUpdateOperationsInput | number | null
    content?: NullableStringFieldUpdateOperationsInput | string | null
    attendanceRecords?: AttendanceRecordUncheckedUpdateManyWithoutSessionNestedInput
    performances?: StudentPerformanceUncheckedUpdateManyWithoutSessionNestedInput
    leaveRequests?: LeaveRequestUncheckedUpdateManyWithoutSessionNestedInput
    makeUpSessions?: MakeUpSessionUncheckedUpdateManyWithoutOriginalSessionNestedInput
  }

  export type SessionCreateManyInput = {
    id?: number
    courseId: number
    sessionDate: Date | string
    startTime: string
    endTime: string
    teacherId?: number | null
    content?: string | null
  }

  export type SessionUpdateManyMutationInput = {
    sessionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SessionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    courseId?: IntFieldUpdateOperationsInput | number
    sessionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    teacherId?: NullableIntFieldUpdateOperationsInput | number | null
    content?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AttendanceRecordCreateInput = {
    status: string
    note?: string | null
    updatedAt?: Date | string
    session: SessionCreateNestedOneWithoutAttendanceRecordsInput
    student: UserCreateNestedOneWithoutAttendanceRecordsInput
    updatedBy: UserCreateNestedOneWithoutUpdatedAttendancesInput
  }

  export type AttendanceRecordUncheckedCreateInput = {
    id?: number
    sessionId: number
    studentId: number
    status: string
    note?: string | null
    updatedById: number
    updatedAt?: Date | string
  }

  export type AttendanceRecordUpdateInput = {
    status?: StringFieldUpdateOperationsInput | string
    note?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    session?: SessionUpdateOneRequiredWithoutAttendanceRecordsNestedInput
    student?: UserUpdateOneRequiredWithoutAttendanceRecordsNestedInput
    updatedBy?: UserUpdateOneRequiredWithoutUpdatedAttendancesNestedInput
  }

  export type AttendanceRecordUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    sessionId?: IntFieldUpdateOperationsInput | number
    studentId?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    note?: NullableStringFieldUpdateOperationsInput | string | null
    updatedById?: IntFieldUpdateOperationsInput | number
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AttendanceRecordCreateManyInput = {
    id?: number
    sessionId: number
    studentId: number
    status: string
    note?: string | null
    updatedById: number
    updatedAt?: Date | string
  }

  export type AttendanceRecordUpdateManyMutationInput = {
    status?: StringFieldUpdateOperationsInput | string
    note?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AttendanceRecordUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    sessionId?: IntFieldUpdateOperationsInput | number
    studentId?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    note?: NullableStringFieldUpdateOperationsInput | string | null
    updatedById?: IntFieldUpdateOperationsInput | number
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LeaveRequestCreateInput = {
    reason: string
    status: string
    approvedAt?: Date | string | null
    createdAt?: Date | string
    session: SessionCreateNestedOneWithoutLeaveRequestsInput
    student: UserCreateNestedOneWithoutLeaveRequestsInput
    approvedBy?: UserCreateNestedOneWithoutApprovedLeaveRequestsInput
    makeUps?: MakeUpSessionCreateNestedManyWithoutLeaveRequestInput
  }

  export type LeaveRequestUncheckedCreateInput = {
    id?: number
    sessionId: number
    studentId: number
    reason: string
    status: string
    approvedById?: number | null
    approvedAt?: Date | string | null
    createdAt?: Date | string
    makeUps?: MakeUpSessionUncheckedCreateNestedManyWithoutLeaveRequestInput
  }

  export type LeaveRequestUpdateInput = {
    reason?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    session?: SessionUpdateOneRequiredWithoutLeaveRequestsNestedInput
    student?: UserUpdateOneRequiredWithoutLeaveRequestsNestedInput
    approvedBy?: UserUpdateOneWithoutApprovedLeaveRequestsNestedInput
    makeUps?: MakeUpSessionUpdateManyWithoutLeaveRequestNestedInput
  }

  export type LeaveRequestUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    sessionId?: IntFieldUpdateOperationsInput | number
    studentId?: IntFieldUpdateOperationsInput | number
    reason?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    approvedById?: NullableIntFieldUpdateOperationsInput | number | null
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    makeUps?: MakeUpSessionUncheckedUpdateManyWithoutLeaveRequestNestedInput
  }

  export type LeaveRequestCreateManyInput = {
    id?: number
    sessionId: number
    studentId: number
    reason: string
    status: string
    approvedById?: number | null
    approvedAt?: Date | string | null
    createdAt?: Date | string
  }

  export type LeaveRequestUpdateManyMutationInput = {
    reason?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LeaveRequestUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    sessionId?: IntFieldUpdateOperationsInput | number
    studentId?: IntFieldUpdateOperationsInput | number
    reason?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    approvedById?: NullableIntFieldUpdateOperationsInput | number | null
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MakeUpSessionCreateInput = {
    makeUpDate: Date | string
    startTime: string
    endTime: string
    attendanceStatus: string
    content?: string | null
    createdAt?: Date | string
    originalSession: SessionCreateNestedOneWithoutMakeUpSessionsInput
    student: UserCreateNestedOneWithoutMakeUpSessionsInput
    createdBy: UserCreateNestedOneWithoutCreatedMakeUpSessionsInput
    leaveRequest?: LeaveRequestCreateNestedOneWithoutMakeUpsInput
  }

  export type MakeUpSessionUncheckedCreateInput = {
    id?: number
    originalSessionId: number
    studentId: number
    makeUpDate: Date | string
    startTime: string
    endTime: string
    attendanceStatus: string
    content?: string | null
    createdById: number
    createdAt?: Date | string
    leaveRequestId?: number | null
  }

  export type MakeUpSessionUpdateInput = {
    makeUpDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    attendanceStatus?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    originalSession?: SessionUpdateOneRequiredWithoutMakeUpSessionsNestedInput
    student?: UserUpdateOneRequiredWithoutMakeUpSessionsNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedMakeUpSessionsNestedInput
    leaveRequest?: LeaveRequestUpdateOneWithoutMakeUpsNestedInput
  }

  export type MakeUpSessionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    originalSessionId?: IntFieldUpdateOperationsInput | number
    studentId?: IntFieldUpdateOperationsInput | number
    makeUpDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    attendanceStatus?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    leaveRequestId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type MakeUpSessionCreateManyInput = {
    id?: number
    originalSessionId: number
    studentId: number
    makeUpDate: Date | string
    startTime: string
    endTime: string
    attendanceStatus: string
    content?: string | null
    createdById: number
    createdAt?: Date | string
    leaveRequestId?: number | null
  }

  export type MakeUpSessionUpdateManyMutationInput = {
    makeUpDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    attendanceStatus?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MakeUpSessionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    originalSessionId?: IntFieldUpdateOperationsInput | number
    studentId?: IntFieldUpdateOperationsInput | number
    makeUpDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    attendanceStatus?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    leaveRequestId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type StudentPerformanceCreateInput = {
    performance: string
    createdAt?: Date | string
    session: SessionCreateNestedOneWithoutPerformancesInput
    student: UserCreateNestedOneWithoutPerformancesInput
    createdBy: UserCreateNestedOneWithoutCreatedPerformancesInput
  }

  export type StudentPerformanceUncheckedCreateInput = {
    id?: number
    sessionId: number
    studentId: number
    performance: string
    createdById: number
    createdAt?: Date | string
  }

  export type StudentPerformanceUpdateInput = {
    performance?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    session?: SessionUpdateOneRequiredWithoutPerformancesNestedInput
    student?: UserUpdateOneRequiredWithoutPerformancesNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedPerformancesNestedInput
  }

  export type StudentPerformanceUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    sessionId?: IntFieldUpdateOperationsInput | number
    studentId?: IntFieldUpdateOperationsInput | number
    performance?: StringFieldUpdateOperationsInput | string
    createdById?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StudentPerformanceCreateManyInput = {
    id?: number
    sessionId: number
    studentId: number
    performance: string
    createdById: number
    createdAt?: Date | string
  }

  export type StudentPerformanceUpdateManyMutationInput = {
    performance?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StudentPerformanceUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    sessionId?: IntFieldUpdateOperationsInput | number
    studentId?: IntFieldUpdateOperationsInput | number
    performance?: StringFieldUpdateOperationsInput | string
    createdById?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type EnrollmentListRelationFilter = {
    every?: EnrollmentWhereInput
    some?: EnrollmentWhereInput
    none?: EnrollmentWhereInput
  }

  export type SessionListRelationFilter = {
    every?: SessionWhereInput
    some?: SessionWhereInput
    none?: SessionWhereInput
  }

  export type AttendanceRecordListRelationFilter = {
    every?: AttendanceRecordWhereInput
    some?: AttendanceRecordWhereInput
    none?: AttendanceRecordWhereInput
  }

  export type LeaveRequestListRelationFilter = {
    every?: LeaveRequestWhereInput
    some?: LeaveRequestWhereInput
    none?: LeaveRequestWhereInput
  }

  export type MakeUpSessionListRelationFilter = {
    every?: MakeUpSessionWhereInput
    some?: MakeUpSessionWhereInput
    none?: MakeUpSessionWhereInput
  }

  export type StudentPerformanceListRelationFilter = {
    every?: StudentPerformanceWhereInput
    some?: StudentPerformanceWhereInput
    none?: StudentPerformanceWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type EnrollmentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SessionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AttendanceRecordOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type LeaveRequestOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MakeUpSessionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type StudentPerformanceOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    role?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    grade?: SortOrder
    school?: SortOrder
    parentName?: SortOrder
    parentPhone?: SortOrder
    studentNo?: SortOrder
    createdAt?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
    grade?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    role?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    grade?: SortOrder
    school?: SortOrder
    parentName?: SortOrder
    parentPhone?: SortOrder
    studentNo?: SortOrder
    createdAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    role?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    grade?: SortOrder
    school?: SortOrder
    parentName?: SortOrder
    parentPhone?: SortOrder
    studentNo?: SortOrder
    createdAt?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
    grade?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type CourseCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    level?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    createdAt?: SortOrder
  }

  export type CourseAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type CourseMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    level?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    createdAt?: SortOrder
  }

  export type CourseMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    level?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    createdAt?: SortOrder
  }

  export type CourseSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type CourseRelationFilter = {
    is?: CourseWhereInput
    isNot?: CourseWhereInput
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type EnrollmentCountOrderByAggregateInput = {
    id?: SortOrder
    courseId?: SortOrder
    studentId?: SortOrder
  }

  export type EnrollmentAvgOrderByAggregateInput = {
    id?: SortOrder
    courseId?: SortOrder
    studentId?: SortOrder
  }

  export type EnrollmentMaxOrderByAggregateInput = {
    id?: SortOrder
    courseId?: SortOrder
    studentId?: SortOrder
  }

  export type EnrollmentMinOrderByAggregateInput = {
    id?: SortOrder
    courseId?: SortOrder
    studentId?: SortOrder
  }

  export type EnrollmentSumOrderByAggregateInput = {
    id?: SortOrder
    courseId?: SortOrder
    studentId?: SortOrder
  }

  export type UserNullableRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type SessionCountOrderByAggregateInput = {
    id?: SortOrder
    courseId?: SortOrder
    sessionDate?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    teacherId?: SortOrder
    content?: SortOrder
  }

  export type SessionAvgOrderByAggregateInput = {
    id?: SortOrder
    courseId?: SortOrder
    teacherId?: SortOrder
  }

  export type SessionMaxOrderByAggregateInput = {
    id?: SortOrder
    courseId?: SortOrder
    sessionDate?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    teacherId?: SortOrder
    content?: SortOrder
  }

  export type SessionMinOrderByAggregateInput = {
    id?: SortOrder
    courseId?: SortOrder
    sessionDate?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    teacherId?: SortOrder
    content?: SortOrder
  }

  export type SessionSumOrderByAggregateInput = {
    id?: SortOrder
    courseId?: SortOrder
    teacherId?: SortOrder
  }

  export type SessionRelationFilter = {
    is?: SessionWhereInput
    isNot?: SessionWhereInput
  }

  export type AttendanceRecordSessionIdStudentIdCompoundUniqueInput = {
    sessionId: number
    studentId: number
  }

  export type AttendanceRecordCountOrderByAggregateInput = {
    id?: SortOrder
    sessionId?: SortOrder
    studentId?: SortOrder
    status?: SortOrder
    note?: SortOrder
    updatedById?: SortOrder
    updatedAt?: SortOrder
  }

  export type AttendanceRecordAvgOrderByAggregateInput = {
    id?: SortOrder
    sessionId?: SortOrder
    studentId?: SortOrder
    updatedById?: SortOrder
  }

  export type AttendanceRecordMaxOrderByAggregateInput = {
    id?: SortOrder
    sessionId?: SortOrder
    studentId?: SortOrder
    status?: SortOrder
    note?: SortOrder
    updatedById?: SortOrder
    updatedAt?: SortOrder
  }

  export type AttendanceRecordMinOrderByAggregateInput = {
    id?: SortOrder
    sessionId?: SortOrder
    studentId?: SortOrder
    status?: SortOrder
    note?: SortOrder
    updatedById?: SortOrder
    updatedAt?: SortOrder
  }

  export type AttendanceRecordSumOrderByAggregateInput = {
    id?: SortOrder
    sessionId?: SortOrder
    studentId?: SortOrder
    updatedById?: SortOrder
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type LeaveRequestCountOrderByAggregateInput = {
    id?: SortOrder
    sessionId?: SortOrder
    studentId?: SortOrder
    reason?: SortOrder
    status?: SortOrder
    approvedById?: SortOrder
    approvedAt?: SortOrder
    createdAt?: SortOrder
  }

  export type LeaveRequestAvgOrderByAggregateInput = {
    id?: SortOrder
    sessionId?: SortOrder
    studentId?: SortOrder
    approvedById?: SortOrder
  }

  export type LeaveRequestMaxOrderByAggregateInput = {
    id?: SortOrder
    sessionId?: SortOrder
    studentId?: SortOrder
    reason?: SortOrder
    status?: SortOrder
    approvedById?: SortOrder
    approvedAt?: SortOrder
    createdAt?: SortOrder
  }

  export type LeaveRequestMinOrderByAggregateInput = {
    id?: SortOrder
    sessionId?: SortOrder
    studentId?: SortOrder
    reason?: SortOrder
    status?: SortOrder
    approvedById?: SortOrder
    approvedAt?: SortOrder
    createdAt?: SortOrder
  }

  export type LeaveRequestSumOrderByAggregateInput = {
    id?: SortOrder
    sessionId?: SortOrder
    studentId?: SortOrder
    approvedById?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type LeaveRequestNullableRelationFilter = {
    is?: LeaveRequestWhereInput | null
    isNot?: LeaveRequestWhereInput | null
  }

  export type MakeUpSessionCountOrderByAggregateInput = {
    id?: SortOrder
    originalSessionId?: SortOrder
    studentId?: SortOrder
    makeUpDate?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    attendanceStatus?: SortOrder
    content?: SortOrder
    createdById?: SortOrder
    createdAt?: SortOrder
    leaveRequestId?: SortOrder
  }

  export type MakeUpSessionAvgOrderByAggregateInput = {
    id?: SortOrder
    originalSessionId?: SortOrder
    studentId?: SortOrder
    createdById?: SortOrder
    leaveRequestId?: SortOrder
  }

  export type MakeUpSessionMaxOrderByAggregateInput = {
    id?: SortOrder
    originalSessionId?: SortOrder
    studentId?: SortOrder
    makeUpDate?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    attendanceStatus?: SortOrder
    content?: SortOrder
    createdById?: SortOrder
    createdAt?: SortOrder
    leaveRequestId?: SortOrder
  }

  export type MakeUpSessionMinOrderByAggregateInput = {
    id?: SortOrder
    originalSessionId?: SortOrder
    studentId?: SortOrder
    makeUpDate?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    attendanceStatus?: SortOrder
    content?: SortOrder
    createdById?: SortOrder
    createdAt?: SortOrder
    leaveRequestId?: SortOrder
  }

  export type MakeUpSessionSumOrderByAggregateInput = {
    id?: SortOrder
    originalSessionId?: SortOrder
    studentId?: SortOrder
    createdById?: SortOrder
    leaveRequestId?: SortOrder
  }

  export type StudentPerformanceCountOrderByAggregateInput = {
    id?: SortOrder
    sessionId?: SortOrder
    studentId?: SortOrder
    performance?: SortOrder
    createdById?: SortOrder
    createdAt?: SortOrder
  }

  export type StudentPerformanceAvgOrderByAggregateInput = {
    id?: SortOrder
    sessionId?: SortOrder
    studentId?: SortOrder
    createdById?: SortOrder
  }

  export type StudentPerformanceMaxOrderByAggregateInput = {
    id?: SortOrder
    sessionId?: SortOrder
    studentId?: SortOrder
    performance?: SortOrder
    createdById?: SortOrder
    createdAt?: SortOrder
  }

  export type StudentPerformanceMinOrderByAggregateInput = {
    id?: SortOrder
    sessionId?: SortOrder
    studentId?: SortOrder
    performance?: SortOrder
    createdById?: SortOrder
    createdAt?: SortOrder
  }

  export type StudentPerformanceSumOrderByAggregateInput = {
    id?: SortOrder
    sessionId?: SortOrder
    studentId?: SortOrder
    createdById?: SortOrder
  }

  export type EnrollmentCreateNestedManyWithoutStudentInput = {
    create?: XOR<EnrollmentCreateWithoutStudentInput, EnrollmentUncheckedCreateWithoutStudentInput> | EnrollmentCreateWithoutStudentInput[] | EnrollmentUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: EnrollmentCreateOrConnectWithoutStudentInput | EnrollmentCreateOrConnectWithoutStudentInput[]
    createMany?: EnrollmentCreateManyStudentInputEnvelope
    connect?: EnrollmentWhereUniqueInput | EnrollmentWhereUniqueInput[]
  }

  export type SessionCreateNestedManyWithoutTeacherInput = {
    create?: XOR<SessionCreateWithoutTeacherInput, SessionUncheckedCreateWithoutTeacherInput> | SessionCreateWithoutTeacherInput[] | SessionUncheckedCreateWithoutTeacherInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutTeacherInput | SessionCreateOrConnectWithoutTeacherInput[]
    createMany?: SessionCreateManyTeacherInputEnvelope
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
  }

  export type AttendanceRecordCreateNestedManyWithoutStudentInput = {
    create?: XOR<AttendanceRecordCreateWithoutStudentInput, AttendanceRecordUncheckedCreateWithoutStudentInput> | AttendanceRecordCreateWithoutStudentInput[] | AttendanceRecordUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: AttendanceRecordCreateOrConnectWithoutStudentInput | AttendanceRecordCreateOrConnectWithoutStudentInput[]
    createMany?: AttendanceRecordCreateManyStudentInputEnvelope
    connect?: AttendanceRecordWhereUniqueInput | AttendanceRecordWhereUniqueInput[]
  }

  export type AttendanceRecordCreateNestedManyWithoutUpdatedByInput = {
    create?: XOR<AttendanceRecordCreateWithoutUpdatedByInput, AttendanceRecordUncheckedCreateWithoutUpdatedByInput> | AttendanceRecordCreateWithoutUpdatedByInput[] | AttendanceRecordUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: AttendanceRecordCreateOrConnectWithoutUpdatedByInput | AttendanceRecordCreateOrConnectWithoutUpdatedByInput[]
    createMany?: AttendanceRecordCreateManyUpdatedByInputEnvelope
    connect?: AttendanceRecordWhereUniqueInput | AttendanceRecordWhereUniqueInput[]
  }

  export type LeaveRequestCreateNestedManyWithoutStudentInput = {
    create?: XOR<LeaveRequestCreateWithoutStudentInput, LeaveRequestUncheckedCreateWithoutStudentInput> | LeaveRequestCreateWithoutStudentInput[] | LeaveRequestUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: LeaveRequestCreateOrConnectWithoutStudentInput | LeaveRequestCreateOrConnectWithoutStudentInput[]
    createMany?: LeaveRequestCreateManyStudentInputEnvelope
    connect?: LeaveRequestWhereUniqueInput | LeaveRequestWhereUniqueInput[]
  }

  export type LeaveRequestCreateNestedManyWithoutApprovedByInput = {
    create?: XOR<LeaveRequestCreateWithoutApprovedByInput, LeaveRequestUncheckedCreateWithoutApprovedByInput> | LeaveRequestCreateWithoutApprovedByInput[] | LeaveRequestUncheckedCreateWithoutApprovedByInput[]
    connectOrCreate?: LeaveRequestCreateOrConnectWithoutApprovedByInput | LeaveRequestCreateOrConnectWithoutApprovedByInput[]
    createMany?: LeaveRequestCreateManyApprovedByInputEnvelope
    connect?: LeaveRequestWhereUniqueInput | LeaveRequestWhereUniqueInput[]
  }

  export type MakeUpSessionCreateNestedManyWithoutStudentInput = {
    create?: XOR<MakeUpSessionCreateWithoutStudentInput, MakeUpSessionUncheckedCreateWithoutStudentInput> | MakeUpSessionCreateWithoutStudentInput[] | MakeUpSessionUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: MakeUpSessionCreateOrConnectWithoutStudentInput | MakeUpSessionCreateOrConnectWithoutStudentInput[]
    createMany?: MakeUpSessionCreateManyStudentInputEnvelope
    connect?: MakeUpSessionWhereUniqueInput | MakeUpSessionWhereUniqueInput[]
  }

  export type MakeUpSessionCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<MakeUpSessionCreateWithoutCreatedByInput, MakeUpSessionUncheckedCreateWithoutCreatedByInput> | MakeUpSessionCreateWithoutCreatedByInput[] | MakeUpSessionUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: MakeUpSessionCreateOrConnectWithoutCreatedByInput | MakeUpSessionCreateOrConnectWithoutCreatedByInput[]
    createMany?: MakeUpSessionCreateManyCreatedByInputEnvelope
    connect?: MakeUpSessionWhereUniqueInput | MakeUpSessionWhereUniqueInput[]
  }

  export type StudentPerformanceCreateNestedManyWithoutStudentInput = {
    create?: XOR<StudentPerformanceCreateWithoutStudentInput, StudentPerformanceUncheckedCreateWithoutStudentInput> | StudentPerformanceCreateWithoutStudentInput[] | StudentPerformanceUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: StudentPerformanceCreateOrConnectWithoutStudentInput | StudentPerformanceCreateOrConnectWithoutStudentInput[]
    createMany?: StudentPerformanceCreateManyStudentInputEnvelope
    connect?: StudentPerformanceWhereUniqueInput | StudentPerformanceWhereUniqueInput[]
  }

  export type StudentPerformanceCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<StudentPerformanceCreateWithoutCreatedByInput, StudentPerformanceUncheckedCreateWithoutCreatedByInput> | StudentPerformanceCreateWithoutCreatedByInput[] | StudentPerformanceUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: StudentPerformanceCreateOrConnectWithoutCreatedByInput | StudentPerformanceCreateOrConnectWithoutCreatedByInput[]
    createMany?: StudentPerformanceCreateManyCreatedByInputEnvelope
    connect?: StudentPerformanceWhereUniqueInput | StudentPerformanceWhereUniqueInput[]
  }

  export type EnrollmentUncheckedCreateNestedManyWithoutStudentInput = {
    create?: XOR<EnrollmentCreateWithoutStudentInput, EnrollmentUncheckedCreateWithoutStudentInput> | EnrollmentCreateWithoutStudentInput[] | EnrollmentUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: EnrollmentCreateOrConnectWithoutStudentInput | EnrollmentCreateOrConnectWithoutStudentInput[]
    createMany?: EnrollmentCreateManyStudentInputEnvelope
    connect?: EnrollmentWhereUniqueInput | EnrollmentWhereUniqueInput[]
  }

  export type SessionUncheckedCreateNestedManyWithoutTeacherInput = {
    create?: XOR<SessionCreateWithoutTeacherInput, SessionUncheckedCreateWithoutTeacherInput> | SessionCreateWithoutTeacherInput[] | SessionUncheckedCreateWithoutTeacherInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutTeacherInput | SessionCreateOrConnectWithoutTeacherInput[]
    createMany?: SessionCreateManyTeacherInputEnvelope
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
  }

  export type AttendanceRecordUncheckedCreateNestedManyWithoutStudentInput = {
    create?: XOR<AttendanceRecordCreateWithoutStudentInput, AttendanceRecordUncheckedCreateWithoutStudentInput> | AttendanceRecordCreateWithoutStudentInput[] | AttendanceRecordUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: AttendanceRecordCreateOrConnectWithoutStudentInput | AttendanceRecordCreateOrConnectWithoutStudentInput[]
    createMany?: AttendanceRecordCreateManyStudentInputEnvelope
    connect?: AttendanceRecordWhereUniqueInput | AttendanceRecordWhereUniqueInput[]
  }

  export type AttendanceRecordUncheckedCreateNestedManyWithoutUpdatedByInput = {
    create?: XOR<AttendanceRecordCreateWithoutUpdatedByInput, AttendanceRecordUncheckedCreateWithoutUpdatedByInput> | AttendanceRecordCreateWithoutUpdatedByInput[] | AttendanceRecordUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: AttendanceRecordCreateOrConnectWithoutUpdatedByInput | AttendanceRecordCreateOrConnectWithoutUpdatedByInput[]
    createMany?: AttendanceRecordCreateManyUpdatedByInputEnvelope
    connect?: AttendanceRecordWhereUniqueInput | AttendanceRecordWhereUniqueInput[]
  }

  export type LeaveRequestUncheckedCreateNestedManyWithoutStudentInput = {
    create?: XOR<LeaveRequestCreateWithoutStudentInput, LeaveRequestUncheckedCreateWithoutStudentInput> | LeaveRequestCreateWithoutStudentInput[] | LeaveRequestUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: LeaveRequestCreateOrConnectWithoutStudentInput | LeaveRequestCreateOrConnectWithoutStudentInput[]
    createMany?: LeaveRequestCreateManyStudentInputEnvelope
    connect?: LeaveRequestWhereUniqueInput | LeaveRequestWhereUniqueInput[]
  }

  export type LeaveRequestUncheckedCreateNestedManyWithoutApprovedByInput = {
    create?: XOR<LeaveRequestCreateWithoutApprovedByInput, LeaveRequestUncheckedCreateWithoutApprovedByInput> | LeaveRequestCreateWithoutApprovedByInput[] | LeaveRequestUncheckedCreateWithoutApprovedByInput[]
    connectOrCreate?: LeaveRequestCreateOrConnectWithoutApprovedByInput | LeaveRequestCreateOrConnectWithoutApprovedByInput[]
    createMany?: LeaveRequestCreateManyApprovedByInputEnvelope
    connect?: LeaveRequestWhereUniqueInput | LeaveRequestWhereUniqueInput[]
  }

  export type MakeUpSessionUncheckedCreateNestedManyWithoutStudentInput = {
    create?: XOR<MakeUpSessionCreateWithoutStudentInput, MakeUpSessionUncheckedCreateWithoutStudentInput> | MakeUpSessionCreateWithoutStudentInput[] | MakeUpSessionUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: MakeUpSessionCreateOrConnectWithoutStudentInput | MakeUpSessionCreateOrConnectWithoutStudentInput[]
    createMany?: MakeUpSessionCreateManyStudentInputEnvelope
    connect?: MakeUpSessionWhereUniqueInput | MakeUpSessionWhereUniqueInput[]
  }

  export type MakeUpSessionUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<MakeUpSessionCreateWithoutCreatedByInput, MakeUpSessionUncheckedCreateWithoutCreatedByInput> | MakeUpSessionCreateWithoutCreatedByInput[] | MakeUpSessionUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: MakeUpSessionCreateOrConnectWithoutCreatedByInput | MakeUpSessionCreateOrConnectWithoutCreatedByInput[]
    createMany?: MakeUpSessionCreateManyCreatedByInputEnvelope
    connect?: MakeUpSessionWhereUniqueInput | MakeUpSessionWhereUniqueInput[]
  }

  export type StudentPerformanceUncheckedCreateNestedManyWithoutStudentInput = {
    create?: XOR<StudentPerformanceCreateWithoutStudentInput, StudentPerformanceUncheckedCreateWithoutStudentInput> | StudentPerformanceCreateWithoutStudentInput[] | StudentPerformanceUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: StudentPerformanceCreateOrConnectWithoutStudentInput | StudentPerformanceCreateOrConnectWithoutStudentInput[]
    createMany?: StudentPerformanceCreateManyStudentInputEnvelope
    connect?: StudentPerformanceWhereUniqueInput | StudentPerformanceWhereUniqueInput[]
  }

  export type StudentPerformanceUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<StudentPerformanceCreateWithoutCreatedByInput, StudentPerformanceUncheckedCreateWithoutCreatedByInput> | StudentPerformanceCreateWithoutCreatedByInput[] | StudentPerformanceUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: StudentPerformanceCreateOrConnectWithoutCreatedByInput | StudentPerformanceCreateOrConnectWithoutCreatedByInput[]
    createMany?: StudentPerformanceCreateManyCreatedByInputEnvelope
    connect?: StudentPerformanceWhereUniqueInput | StudentPerformanceWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type EnrollmentUpdateManyWithoutStudentNestedInput = {
    create?: XOR<EnrollmentCreateWithoutStudentInput, EnrollmentUncheckedCreateWithoutStudentInput> | EnrollmentCreateWithoutStudentInput[] | EnrollmentUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: EnrollmentCreateOrConnectWithoutStudentInput | EnrollmentCreateOrConnectWithoutStudentInput[]
    upsert?: EnrollmentUpsertWithWhereUniqueWithoutStudentInput | EnrollmentUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: EnrollmentCreateManyStudentInputEnvelope
    set?: EnrollmentWhereUniqueInput | EnrollmentWhereUniqueInput[]
    disconnect?: EnrollmentWhereUniqueInput | EnrollmentWhereUniqueInput[]
    delete?: EnrollmentWhereUniqueInput | EnrollmentWhereUniqueInput[]
    connect?: EnrollmentWhereUniqueInput | EnrollmentWhereUniqueInput[]
    update?: EnrollmentUpdateWithWhereUniqueWithoutStudentInput | EnrollmentUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: EnrollmentUpdateManyWithWhereWithoutStudentInput | EnrollmentUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: EnrollmentScalarWhereInput | EnrollmentScalarWhereInput[]
  }

  export type SessionUpdateManyWithoutTeacherNestedInput = {
    create?: XOR<SessionCreateWithoutTeacherInput, SessionUncheckedCreateWithoutTeacherInput> | SessionCreateWithoutTeacherInput[] | SessionUncheckedCreateWithoutTeacherInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutTeacherInput | SessionCreateOrConnectWithoutTeacherInput[]
    upsert?: SessionUpsertWithWhereUniqueWithoutTeacherInput | SessionUpsertWithWhereUniqueWithoutTeacherInput[]
    createMany?: SessionCreateManyTeacherInputEnvelope
    set?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    disconnect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    delete?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    update?: SessionUpdateWithWhereUniqueWithoutTeacherInput | SessionUpdateWithWhereUniqueWithoutTeacherInput[]
    updateMany?: SessionUpdateManyWithWhereWithoutTeacherInput | SessionUpdateManyWithWhereWithoutTeacherInput[]
    deleteMany?: SessionScalarWhereInput | SessionScalarWhereInput[]
  }

  export type AttendanceRecordUpdateManyWithoutStudentNestedInput = {
    create?: XOR<AttendanceRecordCreateWithoutStudentInput, AttendanceRecordUncheckedCreateWithoutStudentInput> | AttendanceRecordCreateWithoutStudentInput[] | AttendanceRecordUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: AttendanceRecordCreateOrConnectWithoutStudentInput | AttendanceRecordCreateOrConnectWithoutStudentInput[]
    upsert?: AttendanceRecordUpsertWithWhereUniqueWithoutStudentInput | AttendanceRecordUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: AttendanceRecordCreateManyStudentInputEnvelope
    set?: AttendanceRecordWhereUniqueInput | AttendanceRecordWhereUniqueInput[]
    disconnect?: AttendanceRecordWhereUniqueInput | AttendanceRecordWhereUniqueInput[]
    delete?: AttendanceRecordWhereUniqueInput | AttendanceRecordWhereUniqueInput[]
    connect?: AttendanceRecordWhereUniqueInput | AttendanceRecordWhereUniqueInput[]
    update?: AttendanceRecordUpdateWithWhereUniqueWithoutStudentInput | AttendanceRecordUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: AttendanceRecordUpdateManyWithWhereWithoutStudentInput | AttendanceRecordUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: AttendanceRecordScalarWhereInput | AttendanceRecordScalarWhereInput[]
  }

  export type AttendanceRecordUpdateManyWithoutUpdatedByNestedInput = {
    create?: XOR<AttendanceRecordCreateWithoutUpdatedByInput, AttendanceRecordUncheckedCreateWithoutUpdatedByInput> | AttendanceRecordCreateWithoutUpdatedByInput[] | AttendanceRecordUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: AttendanceRecordCreateOrConnectWithoutUpdatedByInput | AttendanceRecordCreateOrConnectWithoutUpdatedByInput[]
    upsert?: AttendanceRecordUpsertWithWhereUniqueWithoutUpdatedByInput | AttendanceRecordUpsertWithWhereUniqueWithoutUpdatedByInput[]
    createMany?: AttendanceRecordCreateManyUpdatedByInputEnvelope
    set?: AttendanceRecordWhereUniqueInput | AttendanceRecordWhereUniqueInput[]
    disconnect?: AttendanceRecordWhereUniqueInput | AttendanceRecordWhereUniqueInput[]
    delete?: AttendanceRecordWhereUniqueInput | AttendanceRecordWhereUniqueInput[]
    connect?: AttendanceRecordWhereUniqueInput | AttendanceRecordWhereUniqueInput[]
    update?: AttendanceRecordUpdateWithWhereUniqueWithoutUpdatedByInput | AttendanceRecordUpdateWithWhereUniqueWithoutUpdatedByInput[]
    updateMany?: AttendanceRecordUpdateManyWithWhereWithoutUpdatedByInput | AttendanceRecordUpdateManyWithWhereWithoutUpdatedByInput[]
    deleteMany?: AttendanceRecordScalarWhereInput | AttendanceRecordScalarWhereInput[]
  }

  export type LeaveRequestUpdateManyWithoutStudentNestedInput = {
    create?: XOR<LeaveRequestCreateWithoutStudentInput, LeaveRequestUncheckedCreateWithoutStudentInput> | LeaveRequestCreateWithoutStudentInput[] | LeaveRequestUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: LeaveRequestCreateOrConnectWithoutStudentInput | LeaveRequestCreateOrConnectWithoutStudentInput[]
    upsert?: LeaveRequestUpsertWithWhereUniqueWithoutStudentInput | LeaveRequestUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: LeaveRequestCreateManyStudentInputEnvelope
    set?: LeaveRequestWhereUniqueInput | LeaveRequestWhereUniqueInput[]
    disconnect?: LeaveRequestWhereUniqueInput | LeaveRequestWhereUniqueInput[]
    delete?: LeaveRequestWhereUniqueInput | LeaveRequestWhereUniqueInput[]
    connect?: LeaveRequestWhereUniqueInput | LeaveRequestWhereUniqueInput[]
    update?: LeaveRequestUpdateWithWhereUniqueWithoutStudentInput | LeaveRequestUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: LeaveRequestUpdateManyWithWhereWithoutStudentInput | LeaveRequestUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: LeaveRequestScalarWhereInput | LeaveRequestScalarWhereInput[]
  }

  export type LeaveRequestUpdateManyWithoutApprovedByNestedInput = {
    create?: XOR<LeaveRequestCreateWithoutApprovedByInput, LeaveRequestUncheckedCreateWithoutApprovedByInput> | LeaveRequestCreateWithoutApprovedByInput[] | LeaveRequestUncheckedCreateWithoutApprovedByInput[]
    connectOrCreate?: LeaveRequestCreateOrConnectWithoutApprovedByInput | LeaveRequestCreateOrConnectWithoutApprovedByInput[]
    upsert?: LeaveRequestUpsertWithWhereUniqueWithoutApprovedByInput | LeaveRequestUpsertWithWhereUniqueWithoutApprovedByInput[]
    createMany?: LeaveRequestCreateManyApprovedByInputEnvelope
    set?: LeaveRequestWhereUniqueInput | LeaveRequestWhereUniqueInput[]
    disconnect?: LeaveRequestWhereUniqueInput | LeaveRequestWhereUniqueInput[]
    delete?: LeaveRequestWhereUniqueInput | LeaveRequestWhereUniqueInput[]
    connect?: LeaveRequestWhereUniqueInput | LeaveRequestWhereUniqueInput[]
    update?: LeaveRequestUpdateWithWhereUniqueWithoutApprovedByInput | LeaveRequestUpdateWithWhereUniqueWithoutApprovedByInput[]
    updateMany?: LeaveRequestUpdateManyWithWhereWithoutApprovedByInput | LeaveRequestUpdateManyWithWhereWithoutApprovedByInput[]
    deleteMany?: LeaveRequestScalarWhereInput | LeaveRequestScalarWhereInput[]
  }

  export type MakeUpSessionUpdateManyWithoutStudentNestedInput = {
    create?: XOR<MakeUpSessionCreateWithoutStudentInput, MakeUpSessionUncheckedCreateWithoutStudentInput> | MakeUpSessionCreateWithoutStudentInput[] | MakeUpSessionUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: MakeUpSessionCreateOrConnectWithoutStudentInput | MakeUpSessionCreateOrConnectWithoutStudentInput[]
    upsert?: MakeUpSessionUpsertWithWhereUniqueWithoutStudentInput | MakeUpSessionUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: MakeUpSessionCreateManyStudentInputEnvelope
    set?: MakeUpSessionWhereUniqueInput | MakeUpSessionWhereUniqueInput[]
    disconnect?: MakeUpSessionWhereUniqueInput | MakeUpSessionWhereUniqueInput[]
    delete?: MakeUpSessionWhereUniqueInput | MakeUpSessionWhereUniqueInput[]
    connect?: MakeUpSessionWhereUniqueInput | MakeUpSessionWhereUniqueInput[]
    update?: MakeUpSessionUpdateWithWhereUniqueWithoutStudentInput | MakeUpSessionUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: MakeUpSessionUpdateManyWithWhereWithoutStudentInput | MakeUpSessionUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: MakeUpSessionScalarWhereInput | MakeUpSessionScalarWhereInput[]
  }

  export type MakeUpSessionUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<MakeUpSessionCreateWithoutCreatedByInput, MakeUpSessionUncheckedCreateWithoutCreatedByInput> | MakeUpSessionCreateWithoutCreatedByInput[] | MakeUpSessionUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: MakeUpSessionCreateOrConnectWithoutCreatedByInput | MakeUpSessionCreateOrConnectWithoutCreatedByInput[]
    upsert?: MakeUpSessionUpsertWithWhereUniqueWithoutCreatedByInput | MakeUpSessionUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: MakeUpSessionCreateManyCreatedByInputEnvelope
    set?: MakeUpSessionWhereUniqueInput | MakeUpSessionWhereUniqueInput[]
    disconnect?: MakeUpSessionWhereUniqueInput | MakeUpSessionWhereUniqueInput[]
    delete?: MakeUpSessionWhereUniqueInput | MakeUpSessionWhereUniqueInput[]
    connect?: MakeUpSessionWhereUniqueInput | MakeUpSessionWhereUniqueInput[]
    update?: MakeUpSessionUpdateWithWhereUniqueWithoutCreatedByInput | MakeUpSessionUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: MakeUpSessionUpdateManyWithWhereWithoutCreatedByInput | MakeUpSessionUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: MakeUpSessionScalarWhereInput | MakeUpSessionScalarWhereInput[]
  }

  export type StudentPerformanceUpdateManyWithoutStudentNestedInput = {
    create?: XOR<StudentPerformanceCreateWithoutStudentInput, StudentPerformanceUncheckedCreateWithoutStudentInput> | StudentPerformanceCreateWithoutStudentInput[] | StudentPerformanceUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: StudentPerformanceCreateOrConnectWithoutStudentInput | StudentPerformanceCreateOrConnectWithoutStudentInput[]
    upsert?: StudentPerformanceUpsertWithWhereUniqueWithoutStudentInput | StudentPerformanceUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: StudentPerformanceCreateManyStudentInputEnvelope
    set?: StudentPerformanceWhereUniqueInput | StudentPerformanceWhereUniqueInput[]
    disconnect?: StudentPerformanceWhereUniqueInput | StudentPerformanceWhereUniqueInput[]
    delete?: StudentPerformanceWhereUniqueInput | StudentPerformanceWhereUniqueInput[]
    connect?: StudentPerformanceWhereUniqueInput | StudentPerformanceWhereUniqueInput[]
    update?: StudentPerformanceUpdateWithWhereUniqueWithoutStudentInput | StudentPerformanceUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: StudentPerformanceUpdateManyWithWhereWithoutStudentInput | StudentPerformanceUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: StudentPerformanceScalarWhereInput | StudentPerformanceScalarWhereInput[]
  }

  export type StudentPerformanceUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<StudentPerformanceCreateWithoutCreatedByInput, StudentPerformanceUncheckedCreateWithoutCreatedByInput> | StudentPerformanceCreateWithoutCreatedByInput[] | StudentPerformanceUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: StudentPerformanceCreateOrConnectWithoutCreatedByInput | StudentPerformanceCreateOrConnectWithoutCreatedByInput[]
    upsert?: StudentPerformanceUpsertWithWhereUniqueWithoutCreatedByInput | StudentPerformanceUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: StudentPerformanceCreateManyCreatedByInputEnvelope
    set?: StudentPerformanceWhereUniqueInput | StudentPerformanceWhereUniqueInput[]
    disconnect?: StudentPerformanceWhereUniqueInput | StudentPerformanceWhereUniqueInput[]
    delete?: StudentPerformanceWhereUniqueInput | StudentPerformanceWhereUniqueInput[]
    connect?: StudentPerformanceWhereUniqueInput | StudentPerformanceWhereUniqueInput[]
    update?: StudentPerformanceUpdateWithWhereUniqueWithoutCreatedByInput | StudentPerformanceUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: StudentPerformanceUpdateManyWithWhereWithoutCreatedByInput | StudentPerformanceUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: StudentPerformanceScalarWhereInput | StudentPerformanceScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type EnrollmentUncheckedUpdateManyWithoutStudentNestedInput = {
    create?: XOR<EnrollmentCreateWithoutStudentInput, EnrollmentUncheckedCreateWithoutStudentInput> | EnrollmentCreateWithoutStudentInput[] | EnrollmentUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: EnrollmentCreateOrConnectWithoutStudentInput | EnrollmentCreateOrConnectWithoutStudentInput[]
    upsert?: EnrollmentUpsertWithWhereUniqueWithoutStudentInput | EnrollmentUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: EnrollmentCreateManyStudentInputEnvelope
    set?: EnrollmentWhereUniqueInput | EnrollmentWhereUniqueInput[]
    disconnect?: EnrollmentWhereUniqueInput | EnrollmentWhereUniqueInput[]
    delete?: EnrollmentWhereUniqueInput | EnrollmentWhereUniqueInput[]
    connect?: EnrollmentWhereUniqueInput | EnrollmentWhereUniqueInput[]
    update?: EnrollmentUpdateWithWhereUniqueWithoutStudentInput | EnrollmentUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: EnrollmentUpdateManyWithWhereWithoutStudentInput | EnrollmentUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: EnrollmentScalarWhereInput | EnrollmentScalarWhereInput[]
  }

  export type SessionUncheckedUpdateManyWithoutTeacherNestedInput = {
    create?: XOR<SessionCreateWithoutTeacherInput, SessionUncheckedCreateWithoutTeacherInput> | SessionCreateWithoutTeacherInput[] | SessionUncheckedCreateWithoutTeacherInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutTeacherInput | SessionCreateOrConnectWithoutTeacherInput[]
    upsert?: SessionUpsertWithWhereUniqueWithoutTeacherInput | SessionUpsertWithWhereUniqueWithoutTeacherInput[]
    createMany?: SessionCreateManyTeacherInputEnvelope
    set?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    disconnect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    delete?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    update?: SessionUpdateWithWhereUniqueWithoutTeacherInput | SessionUpdateWithWhereUniqueWithoutTeacherInput[]
    updateMany?: SessionUpdateManyWithWhereWithoutTeacherInput | SessionUpdateManyWithWhereWithoutTeacherInput[]
    deleteMany?: SessionScalarWhereInput | SessionScalarWhereInput[]
  }

  export type AttendanceRecordUncheckedUpdateManyWithoutStudentNestedInput = {
    create?: XOR<AttendanceRecordCreateWithoutStudentInput, AttendanceRecordUncheckedCreateWithoutStudentInput> | AttendanceRecordCreateWithoutStudentInput[] | AttendanceRecordUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: AttendanceRecordCreateOrConnectWithoutStudentInput | AttendanceRecordCreateOrConnectWithoutStudentInput[]
    upsert?: AttendanceRecordUpsertWithWhereUniqueWithoutStudentInput | AttendanceRecordUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: AttendanceRecordCreateManyStudentInputEnvelope
    set?: AttendanceRecordWhereUniqueInput | AttendanceRecordWhereUniqueInput[]
    disconnect?: AttendanceRecordWhereUniqueInput | AttendanceRecordWhereUniqueInput[]
    delete?: AttendanceRecordWhereUniqueInput | AttendanceRecordWhereUniqueInput[]
    connect?: AttendanceRecordWhereUniqueInput | AttendanceRecordWhereUniqueInput[]
    update?: AttendanceRecordUpdateWithWhereUniqueWithoutStudentInput | AttendanceRecordUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: AttendanceRecordUpdateManyWithWhereWithoutStudentInput | AttendanceRecordUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: AttendanceRecordScalarWhereInput | AttendanceRecordScalarWhereInput[]
  }

  export type AttendanceRecordUncheckedUpdateManyWithoutUpdatedByNestedInput = {
    create?: XOR<AttendanceRecordCreateWithoutUpdatedByInput, AttendanceRecordUncheckedCreateWithoutUpdatedByInput> | AttendanceRecordCreateWithoutUpdatedByInput[] | AttendanceRecordUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: AttendanceRecordCreateOrConnectWithoutUpdatedByInput | AttendanceRecordCreateOrConnectWithoutUpdatedByInput[]
    upsert?: AttendanceRecordUpsertWithWhereUniqueWithoutUpdatedByInput | AttendanceRecordUpsertWithWhereUniqueWithoutUpdatedByInput[]
    createMany?: AttendanceRecordCreateManyUpdatedByInputEnvelope
    set?: AttendanceRecordWhereUniqueInput | AttendanceRecordWhereUniqueInput[]
    disconnect?: AttendanceRecordWhereUniqueInput | AttendanceRecordWhereUniqueInput[]
    delete?: AttendanceRecordWhereUniqueInput | AttendanceRecordWhereUniqueInput[]
    connect?: AttendanceRecordWhereUniqueInput | AttendanceRecordWhereUniqueInput[]
    update?: AttendanceRecordUpdateWithWhereUniqueWithoutUpdatedByInput | AttendanceRecordUpdateWithWhereUniqueWithoutUpdatedByInput[]
    updateMany?: AttendanceRecordUpdateManyWithWhereWithoutUpdatedByInput | AttendanceRecordUpdateManyWithWhereWithoutUpdatedByInput[]
    deleteMany?: AttendanceRecordScalarWhereInput | AttendanceRecordScalarWhereInput[]
  }

  export type LeaveRequestUncheckedUpdateManyWithoutStudentNestedInput = {
    create?: XOR<LeaveRequestCreateWithoutStudentInput, LeaveRequestUncheckedCreateWithoutStudentInput> | LeaveRequestCreateWithoutStudentInput[] | LeaveRequestUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: LeaveRequestCreateOrConnectWithoutStudentInput | LeaveRequestCreateOrConnectWithoutStudentInput[]
    upsert?: LeaveRequestUpsertWithWhereUniqueWithoutStudentInput | LeaveRequestUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: LeaveRequestCreateManyStudentInputEnvelope
    set?: LeaveRequestWhereUniqueInput | LeaveRequestWhereUniqueInput[]
    disconnect?: LeaveRequestWhereUniqueInput | LeaveRequestWhereUniqueInput[]
    delete?: LeaveRequestWhereUniqueInput | LeaveRequestWhereUniqueInput[]
    connect?: LeaveRequestWhereUniqueInput | LeaveRequestWhereUniqueInput[]
    update?: LeaveRequestUpdateWithWhereUniqueWithoutStudentInput | LeaveRequestUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: LeaveRequestUpdateManyWithWhereWithoutStudentInput | LeaveRequestUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: LeaveRequestScalarWhereInput | LeaveRequestScalarWhereInput[]
  }

  export type LeaveRequestUncheckedUpdateManyWithoutApprovedByNestedInput = {
    create?: XOR<LeaveRequestCreateWithoutApprovedByInput, LeaveRequestUncheckedCreateWithoutApprovedByInput> | LeaveRequestCreateWithoutApprovedByInput[] | LeaveRequestUncheckedCreateWithoutApprovedByInput[]
    connectOrCreate?: LeaveRequestCreateOrConnectWithoutApprovedByInput | LeaveRequestCreateOrConnectWithoutApprovedByInput[]
    upsert?: LeaveRequestUpsertWithWhereUniqueWithoutApprovedByInput | LeaveRequestUpsertWithWhereUniqueWithoutApprovedByInput[]
    createMany?: LeaveRequestCreateManyApprovedByInputEnvelope
    set?: LeaveRequestWhereUniqueInput | LeaveRequestWhereUniqueInput[]
    disconnect?: LeaveRequestWhereUniqueInput | LeaveRequestWhereUniqueInput[]
    delete?: LeaveRequestWhereUniqueInput | LeaveRequestWhereUniqueInput[]
    connect?: LeaveRequestWhereUniqueInput | LeaveRequestWhereUniqueInput[]
    update?: LeaveRequestUpdateWithWhereUniqueWithoutApprovedByInput | LeaveRequestUpdateWithWhereUniqueWithoutApprovedByInput[]
    updateMany?: LeaveRequestUpdateManyWithWhereWithoutApprovedByInput | LeaveRequestUpdateManyWithWhereWithoutApprovedByInput[]
    deleteMany?: LeaveRequestScalarWhereInput | LeaveRequestScalarWhereInput[]
  }

  export type MakeUpSessionUncheckedUpdateManyWithoutStudentNestedInput = {
    create?: XOR<MakeUpSessionCreateWithoutStudentInput, MakeUpSessionUncheckedCreateWithoutStudentInput> | MakeUpSessionCreateWithoutStudentInput[] | MakeUpSessionUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: MakeUpSessionCreateOrConnectWithoutStudentInput | MakeUpSessionCreateOrConnectWithoutStudentInput[]
    upsert?: MakeUpSessionUpsertWithWhereUniqueWithoutStudentInput | MakeUpSessionUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: MakeUpSessionCreateManyStudentInputEnvelope
    set?: MakeUpSessionWhereUniqueInput | MakeUpSessionWhereUniqueInput[]
    disconnect?: MakeUpSessionWhereUniqueInput | MakeUpSessionWhereUniqueInput[]
    delete?: MakeUpSessionWhereUniqueInput | MakeUpSessionWhereUniqueInput[]
    connect?: MakeUpSessionWhereUniqueInput | MakeUpSessionWhereUniqueInput[]
    update?: MakeUpSessionUpdateWithWhereUniqueWithoutStudentInput | MakeUpSessionUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: MakeUpSessionUpdateManyWithWhereWithoutStudentInput | MakeUpSessionUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: MakeUpSessionScalarWhereInput | MakeUpSessionScalarWhereInput[]
  }

  export type MakeUpSessionUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<MakeUpSessionCreateWithoutCreatedByInput, MakeUpSessionUncheckedCreateWithoutCreatedByInput> | MakeUpSessionCreateWithoutCreatedByInput[] | MakeUpSessionUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: MakeUpSessionCreateOrConnectWithoutCreatedByInput | MakeUpSessionCreateOrConnectWithoutCreatedByInput[]
    upsert?: MakeUpSessionUpsertWithWhereUniqueWithoutCreatedByInput | MakeUpSessionUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: MakeUpSessionCreateManyCreatedByInputEnvelope
    set?: MakeUpSessionWhereUniqueInput | MakeUpSessionWhereUniqueInput[]
    disconnect?: MakeUpSessionWhereUniqueInput | MakeUpSessionWhereUniqueInput[]
    delete?: MakeUpSessionWhereUniqueInput | MakeUpSessionWhereUniqueInput[]
    connect?: MakeUpSessionWhereUniqueInput | MakeUpSessionWhereUniqueInput[]
    update?: MakeUpSessionUpdateWithWhereUniqueWithoutCreatedByInput | MakeUpSessionUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: MakeUpSessionUpdateManyWithWhereWithoutCreatedByInput | MakeUpSessionUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: MakeUpSessionScalarWhereInput | MakeUpSessionScalarWhereInput[]
  }

  export type StudentPerformanceUncheckedUpdateManyWithoutStudentNestedInput = {
    create?: XOR<StudentPerformanceCreateWithoutStudentInput, StudentPerformanceUncheckedCreateWithoutStudentInput> | StudentPerformanceCreateWithoutStudentInput[] | StudentPerformanceUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: StudentPerformanceCreateOrConnectWithoutStudentInput | StudentPerformanceCreateOrConnectWithoutStudentInput[]
    upsert?: StudentPerformanceUpsertWithWhereUniqueWithoutStudentInput | StudentPerformanceUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: StudentPerformanceCreateManyStudentInputEnvelope
    set?: StudentPerformanceWhereUniqueInput | StudentPerformanceWhereUniqueInput[]
    disconnect?: StudentPerformanceWhereUniqueInput | StudentPerformanceWhereUniqueInput[]
    delete?: StudentPerformanceWhereUniqueInput | StudentPerformanceWhereUniqueInput[]
    connect?: StudentPerformanceWhereUniqueInput | StudentPerformanceWhereUniqueInput[]
    update?: StudentPerformanceUpdateWithWhereUniqueWithoutStudentInput | StudentPerformanceUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: StudentPerformanceUpdateManyWithWhereWithoutStudentInput | StudentPerformanceUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: StudentPerformanceScalarWhereInput | StudentPerformanceScalarWhereInput[]
  }

  export type StudentPerformanceUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<StudentPerformanceCreateWithoutCreatedByInput, StudentPerformanceUncheckedCreateWithoutCreatedByInput> | StudentPerformanceCreateWithoutCreatedByInput[] | StudentPerformanceUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: StudentPerformanceCreateOrConnectWithoutCreatedByInput | StudentPerformanceCreateOrConnectWithoutCreatedByInput[]
    upsert?: StudentPerformanceUpsertWithWhereUniqueWithoutCreatedByInput | StudentPerformanceUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: StudentPerformanceCreateManyCreatedByInputEnvelope
    set?: StudentPerformanceWhereUniqueInput | StudentPerformanceWhereUniqueInput[]
    disconnect?: StudentPerformanceWhereUniqueInput | StudentPerformanceWhereUniqueInput[]
    delete?: StudentPerformanceWhereUniqueInput | StudentPerformanceWhereUniqueInput[]
    connect?: StudentPerformanceWhereUniqueInput | StudentPerformanceWhereUniqueInput[]
    update?: StudentPerformanceUpdateWithWhereUniqueWithoutCreatedByInput | StudentPerformanceUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: StudentPerformanceUpdateManyWithWhereWithoutCreatedByInput | StudentPerformanceUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: StudentPerformanceScalarWhereInput | StudentPerformanceScalarWhereInput[]
  }

  export type EnrollmentCreateNestedManyWithoutCourseInput = {
    create?: XOR<EnrollmentCreateWithoutCourseInput, EnrollmentUncheckedCreateWithoutCourseInput> | EnrollmentCreateWithoutCourseInput[] | EnrollmentUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: EnrollmentCreateOrConnectWithoutCourseInput | EnrollmentCreateOrConnectWithoutCourseInput[]
    createMany?: EnrollmentCreateManyCourseInputEnvelope
    connect?: EnrollmentWhereUniqueInput | EnrollmentWhereUniqueInput[]
  }

  export type SessionCreateNestedManyWithoutCourseInput = {
    create?: XOR<SessionCreateWithoutCourseInput, SessionUncheckedCreateWithoutCourseInput> | SessionCreateWithoutCourseInput[] | SessionUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutCourseInput | SessionCreateOrConnectWithoutCourseInput[]
    createMany?: SessionCreateManyCourseInputEnvelope
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
  }

  export type EnrollmentUncheckedCreateNestedManyWithoutCourseInput = {
    create?: XOR<EnrollmentCreateWithoutCourseInput, EnrollmentUncheckedCreateWithoutCourseInput> | EnrollmentCreateWithoutCourseInput[] | EnrollmentUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: EnrollmentCreateOrConnectWithoutCourseInput | EnrollmentCreateOrConnectWithoutCourseInput[]
    createMany?: EnrollmentCreateManyCourseInputEnvelope
    connect?: EnrollmentWhereUniqueInput | EnrollmentWhereUniqueInput[]
  }

  export type SessionUncheckedCreateNestedManyWithoutCourseInput = {
    create?: XOR<SessionCreateWithoutCourseInput, SessionUncheckedCreateWithoutCourseInput> | SessionCreateWithoutCourseInput[] | SessionUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutCourseInput | SessionCreateOrConnectWithoutCourseInput[]
    createMany?: SessionCreateManyCourseInputEnvelope
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
  }

  export type EnrollmentUpdateManyWithoutCourseNestedInput = {
    create?: XOR<EnrollmentCreateWithoutCourseInput, EnrollmentUncheckedCreateWithoutCourseInput> | EnrollmentCreateWithoutCourseInput[] | EnrollmentUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: EnrollmentCreateOrConnectWithoutCourseInput | EnrollmentCreateOrConnectWithoutCourseInput[]
    upsert?: EnrollmentUpsertWithWhereUniqueWithoutCourseInput | EnrollmentUpsertWithWhereUniqueWithoutCourseInput[]
    createMany?: EnrollmentCreateManyCourseInputEnvelope
    set?: EnrollmentWhereUniqueInput | EnrollmentWhereUniqueInput[]
    disconnect?: EnrollmentWhereUniqueInput | EnrollmentWhereUniqueInput[]
    delete?: EnrollmentWhereUniqueInput | EnrollmentWhereUniqueInput[]
    connect?: EnrollmentWhereUniqueInput | EnrollmentWhereUniqueInput[]
    update?: EnrollmentUpdateWithWhereUniqueWithoutCourseInput | EnrollmentUpdateWithWhereUniqueWithoutCourseInput[]
    updateMany?: EnrollmentUpdateManyWithWhereWithoutCourseInput | EnrollmentUpdateManyWithWhereWithoutCourseInput[]
    deleteMany?: EnrollmentScalarWhereInput | EnrollmentScalarWhereInput[]
  }

  export type SessionUpdateManyWithoutCourseNestedInput = {
    create?: XOR<SessionCreateWithoutCourseInput, SessionUncheckedCreateWithoutCourseInput> | SessionCreateWithoutCourseInput[] | SessionUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutCourseInput | SessionCreateOrConnectWithoutCourseInput[]
    upsert?: SessionUpsertWithWhereUniqueWithoutCourseInput | SessionUpsertWithWhereUniqueWithoutCourseInput[]
    createMany?: SessionCreateManyCourseInputEnvelope
    set?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    disconnect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    delete?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    update?: SessionUpdateWithWhereUniqueWithoutCourseInput | SessionUpdateWithWhereUniqueWithoutCourseInput[]
    updateMany?: SessionUpdateManyWithWhereWithoutCourseInput | SessionUpdateManyWithWhereWithoutCourseInput[]
    deleteMany?: SessionScalarWhereInput | SessionScalarWhereInput[]
  }

  export type EnrollmentUncheckedUpdateManyWithoutCourseNestedInput = {
    create?: XOR<EnrollmentCreateWithoutCourseInput, EnrollmentUncheckedCreateWithoutCourseInput> | EnrollmentCreateWithoutCourseInput[] | EnrollmentUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: EnrollmentCreateOrConnectWithoutCourseInput | EnrollmentCreateOrConnectWithoutCourseInput[]
    upsert?: EnrollmentUpsertWithWhereUniqueWithoutCourseInput | EnrollmentUpsertWithWhereUniqueWithoutCourseInput[]
    createMany?: EnrollmentCreateManyCourseInputEnvelope
    set?: EnrollmentWhereUniqueInput | EnrollmentWhereUniqueInput[]
    disconnect?: EnrollmentWhereUniqueInput | EnrollmentWhereUniqueInput[]
    delete?: EnrollmentWhereUniqueInput | EnrollmentWhereUniqueInput[]
    connect?: EnrollmentWhereUniqueInput | EnrollmentWhereUniqueInput[]
    update?: EnrollmentUpdateWithWhereUniqueWithoutCourseInput | EnrollmentUpdateWithWhereUniqueWithoutCourseInput[]
    updateMany?: EnrollmentUpdateManyWithWhereWithoutCourseInput | EnrollmentUpdateManyWithWhereWithoutCourseInput[]
    deleteMany?: EnrollmentScalarWhereInput | EnrollmentScalarWhereInput[]
  }

  export type SessionUncheckedUpdateManyWithoutCourseNestedInput = {
    create?: XOR<SessionCreateWithoutCourseInput, SessionUncheckedCreateWithoutCourseInput> | SessionCreateWithoutCourseInput[] | SessionUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutCourseInput | SessionCreateOrConnectWithoutCourseInput[]
    upsert?: SessionUpsertWithWhereUniqueWithoutCourseInput | SessionUpsertWithWhereUniqueWithoutCourseInput[]
    createMany?: SessionCreateManyCourseInputEnvelope
    set?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    disconnect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    delete?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    update?: SessionUpdateWithWhereUniqueWithoutCourseInput | SessionUpdateWithWhereUniqueWithoutCourseInput[]
    updateMany?: SessionUpdateManyWithWhereWithoutCourseInput | SessionUpdateManyWithWhereWithoutCourseInput[]
    deleteMany?: SessionScalarWhereInput | SessionScalarWhereInput[]
  }

  export type CourseCreateNestedOneWithoutEnrollmentsInput = {
    create?: XOR<CourseCreateWithoutEnrollmentsInput, CourseUncheckedCreateWithoutEnrollmentsInput>
    connectOrCreate?: CourseCreateOrConnectWithoutEnrollmentsInput
    connect?: CourseWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutEnrollmentsInput = {
    create?: XOR<UserCreateWithoutEnrollmentsInput, UserUncheckedCreateWithoutEnrollmentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutEnrollmentsInput
    connect?: UserWhereUniqueInput
  }

  export type CourseUpdateOneRequiredWithoutEnrollmentsNestedInput = {
    create?: XOR<CourseCreateWithoutEnrollmentsInput, CourseUncheckedCreateWithoutEnrollmentsInput>
    connectOrCreate?: CourseCreateOrConnectWithoutEnrollmentsInput
    upsert?: CourseUpsertWithoutEnrollmentsInput
    connect?: CourseWhereUniqueInput
    update?: XOR<XOR<CourseUpdateToOneWithWhereWithoutEnrollmentsInput, CourseUpdateWithoutEnrollmentsInput>, CourseUncheckedUpdateWithoutEnrollmentsInput>
  }

  export type UserUpdateOneRequiredWithoutEnrollmentsNestedInput = {
    create?: XOR<UserCreateWithoutEnrollmentsInput, UserUncheckedCreateWithoutEnrollmentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutEnrollmentsInput
    upsert?: UserUpsertWithoutEnrollmentsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutEnrollmentsInput, UserUpdateWithoutEnrollmentsInput>, UserUncheckedUpdateWithoutEnrollmentsInput>
  }

  export type CourseCreateNestedOneWithoutSessionsInput = {
    create?: XOR<CourseCreateWithoutSessionsInput, CourseUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: CourseCreateOrConnectWithoutSessionsInput
    connect?: CourseWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutTeachingSessionsInput = {
    create?: XOR<UserCreateWithoutTeachingSessionsInput, UserUncheckedCreateWithoutTeachingSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutTeachingSessionsInput
    connect?: UserWhereUniqueInput
  }

  export type AttendanceRecordCreateNestedManyWithoutSessionInput = {
    create?: XOR<AttendanceRecordCreateWithoutSessionInput, AttendanceRecordUncheckedCreateWithoutSessionInput> | AttendanceRecordCreateWithoutSessionInput[] | AttendanceRecordUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: AttendanceRecordCreateOrConnectWithoutSessionInput | AttendanceRecordCreateOrConnectWithoutSessionInput[]
    createMany?: AttendanceRecordCreateManySessionInputEnvelope
    connect?: AttendanceRecordWhereUniqueInput | AttendanceRecordWhereUniqueInput[]
  }

  export type StudentPerformanceCreateNestedManyWithoutSessionInput = {
    create?: XOR<StudentPerformanceCreateWithoutSessionInput, StudentPerformanceUncheckedCreateWithoutSessionInput> | StudentPerformanceCreateWithoutSessionInput[] | StudentPerformanceUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: StudentPerformanceCreateOrConnectWithoutSessionInput | StudentPerformanceCreateOrConnectWithoutSessionInput[]
    createMany?: StudentPerformanceCreateManySessionInputEnvelope
    connect?: StudentPerformanceWhereUniqueInput | StudentPerformanceWhereUniqueInput[]
  }

  export type LeaveRequestCreateNestedManyWithoutSessionInput = {
    create?: XOR<LeaveRequestCreateWithoutSessionInput, LeaveRequestUncheckedCreateWithoutSessionInput> | LeaveRequestCreateWithoutSessionInput[] | LeaveRequestUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: LeaveRequestCreateOrConnectWithoutSessionInput | LeaveRequestCreateOrConnectWithoutSessionInput[]
    createMany?: LeaveRequestCreateManySessionInputEnvelope
    connect?: LeaveRequestWhereUniqueInput | LeaveRequestWhereUniqueInput[]
  }

  export type MakeUpSessionCreateNestedManyWithoutOriginalSessionInput = {
    create?: XOR<MakeUpSessionCreateWithoutOriginalSessionInput, MakeUpSessionUncheckedCreateWithoutOriginalSessionInput> | MakeUpSessionCreateWithoutOriginalSessionInput[] | MakeUpSessionUncheckedCreateWithoutOriginalSessionInput[]
    connectOrCreate?: MakeUpSessionCreateOrConnectWithoutOriginalSessionInput | MakeUpSessionCreateOrConnectWithoutOriginalSessionInput[]
    createMany?: MakeUpSessionCreateManyOriginalSessionInputEnvelope
    connect?: MakeUpSessionWhereUniqueInput | MakeUpSessionWhereUniqueInput[]
  }

  export type AttendanceRecordUncheckedCreateNestedManyWithoutSessionInput = {
    create?: XOR<AttendanceRecordCreateWithoutSessionInput, AttendanceRecordUncheckedCreateWithoutSessionInput> | AttendanceRecordCreateWithoutSessionInput[] | AttendanceRecordUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: AttendanceRecordCreateOrConnectWithoutSessionInput | AttendanceRecordCreateOrConnectWithoutSessionInput[]
    createMany?: AttendanceRecordCreateManySessionInputEnvelope
    connect?: AttendanceRecordWhereUniqueInput | AttendanceRecordWhereUniqueInput[]
  }

  export type StudentPerformanceUncheckedCreateNestedManyWithoutSessionInput = {
    create?: XOR<StudentPerformanceCreateWithoutSessionInput, StudentPerformanceUncheckedCreateWithoutSessionInput> | StudentPerformanceCreateWithoutSessionInput[] | StudentPerformanceUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: StudentPerformanceCreateOrConnectWithoutSessionInput | StudentPerformanceCreateOrConnectWithoutSessionInput[]
    createMany?: StudentPerformanceCreateManySessionInputEnvelope
    connect?: StudentPerformanceWhereUniqueInput | StudentPerformanceWhereUniqueInput[]
  }

  export type LeaveRequestUncheckedCreateNestedManyWithoutSessionInput = {
    create?: XOR<LeaveRequestCreateWithoutSessionInput, LeaveRequestUncheckedCreateWithoutSessionInput> | LeaveRequestCreateWithoutSessionInput[] | LeaveRequestUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: LeaveRequestCreateOrConnectWithoutSessionInput | LeaveRequestCreateOrConnectWithoutSessionInput[]
    createMany?: LeaveRequestCreateManySessionInputEnvelope
    connect?: LeaveRequestWhereUniqueInput | LeaveRequestWhereUniqueInput[]
  }

  export type MakeUpSessionUncheckedCreateNestedManyWithoutOriginalSessionInput = {
    create?: XOR<MakeUpSessionCreateWithoutOriginalSessionInput, MakeUpSessionUncheckedCreateWithoutOriginalSessionInput> | MakeUpSessionCreateWithoutOriginalSessionInput[] | MakeUpSessionUncheckedCreateWithoutOriginalSessionInput[]
    connectOrCreate?: MakeUpSessionCreateOrConnectWithoutOriginalSessionInput | MakeUpSessionCreateOrConnectWithoutOriginalSessionInput[]
    createMany?: MakeUpSessionCreateManyOriginalSessionInputEnvelope
    connect?: MakeUpSessionWhereUniqueInput | MakeUpSessionWhereUniqueInput[]
  }

  export type CourseUpdateOneRequiredWithoutSessionsNestedInput = {
    create?: XOR<CourseCreateWithoutSessionsInput, CourseUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: CourseCreateOrConnectWithoutSessionsInput
    upsert?: CourseUpsertWithoutSessionsInput
    connect?: CourseWhereUniqueInput
    update?: XOR<XOR<CourseUpdateToOneWithWhereWithoutSessionsInput, CourseUpdateWithoutSessionsInput>, CourseUncheckedUpdateWithoutSessionsInput>
  }

  export type UserUpdateOneWithoutTeachingSessionsNestedInput = {
    create?: XOR<UserCreateWithoutTeachingSessionsInput, UserUncheckedCreateWithoutTeachingSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutTeachingSessionsInput
    upsert?: UserUpsertWithoutTeachingSessionsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutTeachingSessionsInput, UserUpdateWithoutTeachingSessionsInput>, UserUncheckedUpdateWithoutTeachingSessionsInput>
  }

  export type AttendanceRecordUpdateManyWithoutSessionNestedInput = {
    create?: XOR<AttendanceRecordCreateWithoutSessionInput, AttendanceRecordUncheckedCreateWithoutSessionInput> | AttendanceRecordCreateWithoutSessionInput[] | AttendanceRecordUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: AttendanceRecordCreateOrConnectWithoutSessionInput | AttendanceRecordCreateOrConnectWithoutSessionInput[]
    upsert?: AttendanceRecordUpsertWithWhereUniqueWithoutSessionInput | AttendanceRecordUpsertWithWhereUniqueWithoutSessionInput[]
    createMany?: AttendanceRecordCreateManySessionInputEnvelope
    set?: AttendanceRecordWhereUniqueInput | AttendanceRecordWhereUniqueInput[]
    disconnect?: AttendanceRecordWhereUniqueInput | AttendanceRecordWhereUniqueInput[]
    delete?: AttendanceRecordWhereUniqueInput | AttendanceRecordWhereUniqueInput[]
    connect?: AttendanceRecordWhereUniqueInput | AttendanceRecordWhereUniqueInput[]
    update?: AttendanceRecordUpdateWithWhereUniqueWithoutSessionInput | AttendanceRecordUpdateWithWhereUniqueWithoutSessionInput[]
    updateMany?: AttendanceRecordUpdateManyWithWhereWithoutSessionInput | AttendanceRecordUpdateManyWithWhereWithoutSessionInput[]
    deleteMany?: AttendanceRecordScalarWhereInput | AttendanceRecordScalarWhereInput[]
  }

  export type StudentPerformanceUpdateManyWithoutSessionNestedInput = {
    create?: XOR<StudentPerformanceCreateWithoutSessionInput, StudentPerformanceUncheckedCreateWithoutSessionInput> | StudentPerformanceCreateWithoutSessionInput[] | StudentPerformanceUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: StudentPerformanceCreateOrConnectWithoutSessionInput | StudentPerformanceCreateOrConnectWithoutSessionInput[]
    upsert?: StudentPerformanceUpsertWithWhereUniqueWithoutSessionInput | StudentPerformanceUpsertWithWhereUniqueWithoutSessionInput[]
    createMany?: StudentPerformanceCreateManySessionInputEnvelope
    set?: StudentPerformanceWhereUniqueInput | StudentPerformanceWhereUniqueInput[]
    disconnect?: StudentPerformanceWhereUniqueInput | StudentPerformanceWhereUniqueInput[]
    delete?: StudentPerformanceWhereUniqueInput | StudentPerformanceWhereUniqueInput[]
    connect?: StudentPerformanceWhereUniqueInput | StudentPerformanceWhereUniqueInput[]
    update?: StudentPerformanceUpdateWithWhereUniqueWithoutSessionInput | StudentPerformanceUpdateWithWhereUniqueWithoutSessionInput[]
    updateMany?: StudentPerformanceUpdateManyWithWhereWithoutSessionInput | StudentPerformanceUpdateManyWithWhereWithoutSessionInput[]
    deleteMany?: StudentPerformanceScalarWhereInput | StudentPerformanceScalarWhereInput[]
  }

  export type LeaveRequestUpdateManyWithoutSessionNestedInput = {
    create?: XOR<LeaveRequestCreateWithoutSessionInput, LeaveRequestUncheckedCreateWithoutSessionInput> | LeaveRequestCreateWithoutSessionInput[] | LeaveRequestUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: LeaveRequestCreateOrConnectWithoutSessionInput | LeaveRequestCreateOrConnectWithoutSessionInput[]
    upsert?: LeaveRequestUpsertWithWhereUniqueWithoutSessionInput | LeaveRequestUpsertWithWhereUniqueWithoutSessionInput[]
    createMany?: LeaveRequestCreateManySessionInputEnvelope
    set?: LeaveRequestWhereUniqueInput | LeaveRequestWhereUniqueInput[]
    disconnect?: LeaveRequestWhereUniqueInput | LeaveRequestWhereUniqueInput[]
    delete?: LeaveRequestWhereUniqueInput | LeaveRequestWhereUniqueInput[]
    connect?: LeaveRequestWhereUniqueInput | LeaveRequestWhereUniqueInput[]
    update?: LeaveRequestUpdateWithWhereUniqueWithoutSessionInput | LeaveRequestUpdateWithWhereUniqueWithoutSessionInput[]
    updateMany?: LeaveRequestUpdateManyWithWhereWithoutSessionInput | LeaveRequestUpdateManyWithWhereWithoutSessionInput[]
    deleteMany?: LeaveRequestScalarWhereInput | LeaveRequestScalarWhereInput[]
  }

  export type MakeUpSessionUpdateManyWithoutOriginalSessionNestedInput = {
    create?: XOR<MakeUpSessionCreateWithoutOriginalSessionInput, MakeUpSessionUncheckedCreateWithoutOriginalSessionInput> | MakeUpSessionCreateWithoutOriginalSessionInput[] | MakeUpSessionUncheckedCreateWithoutOriginalSessionInput[]
    connectOrCreate?: MakeUpSessionCreateOrConnectWithoutOriginalSessionInput | MakeUpSessionCreateOrConnectWithoutOriginalSessionInput[]
    upsert?: MakeUpSessionUpsertWithWhereUniqueWithoutOriginalSessionInput | MakeUpSessionUpsertWithWhereUniqueWithoutOriginalSessionInput[]
    createMany?: MakeUpSessionCreateManyOriginalSessionInputEnvelope
    set?: MakeUpSessionWhereUniqueInput | MakeUpSessionWhereUniqueInput[]
    disconnect?: MakeUpSessionWhereUniqueInput | MakeUpSessionWhereUniqueInput[]
    delete?: MakeUpSessionWhereUniqueInput | MakeUpSessionWhereUniqueInput[]
    connect?: MakeUpSessionWhereUniqueInput | MakeUpSessionWhereUniqueInput[]
    update?: MakeUpSessionUpdateWithWhereUniqueWithoutOriginalSessionInput | MakeUpSessionUpdateWithWhereUniqueWithoutOriginalSessionInput[]
    updateMany?: MakeUpSessionUpdateManyWithWhereWithoutOriginalSessionInput | MakeUpSessionUpdateManyWithWhereWithoutOriginalSessionInput[]
    deleteMany?: MakeUpSessionScalarWhereInput | MakeUpSessionScalarWhereInput[]
  }

  export type AttendanceRecordUncheckedUpdateManyWithoutSessionNestedInput = {
    create?: XOR<AttendanceRecordCreateWithoutSessionInput, AttendanceRecordUncheckedCreateWithoutSessionInput> | AttendanceRecordCreateWithoutSessionInput[] | AttendanceRecordUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: AttendanceRecordCreateOrConnectWithoutSessionInput | AttendanceRecordCreateOrConnectWithoutSessionInput[]
    upsert?: AttendanceRecordUpsertWithWhereUniqueWithoutSessionInput | AttendanceRecordUpsertWithWhereUniqueWithoutSessionInput[]
    createMany?: AttendanceRecordCreateManySessionInputEnvelope
    set?: AttendanceRecordWhereUniqueInput | AttendanceRecordWhereUniqueInput[]
    disconnect?: AttendanceRecordWhereUniqueInput | AttendanceRecordWhereUniqueInput[]
    delete?: AttendanceRecordWhereUniqueInput | AttendanceRecordWhereUniqueInput[]
    connect?: AttendanceRecordWhereUniqueInput | AttendanceRecordWhereUniqueInput[]
    update?: AttendanceRecordUpdateWithWhereUniqueWithoutSessionInput | AttendanceRecordUpdateWithWhereUniqueWithoutSessionInput[]
    updateMany?: AttendanceRecordUpdateManyWithWhereWithoutSessionInput | AttendanceRecordUpdateManyWithWhereWithoutSessionInput[]
    deleteMany?: AttendanceRecordScalarWhereInput | AttendanceRecordScalarWhereInput[]
  }

  export type StudentPerformanceUncheckedUpdateManyWithoutSessionNestedInput = {
    create?: XOR<StudentPerformanceCreateWithoutSessionInput, StudentPerformanceUncheckedCreateWithoutSessionInput> | StudentPerformanceCreateWithoutSessionInput[] | StudentPerformanceUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: StudentPerformanceCreateOrConnectWithoutSessionInput | StudentPerformanceCreateOrConnectWithoutSessionInput[]
    upsert?: StudentPerformanceUpsertWithWhereUniqueWithoutSessionInput | StudentPerformanceUpsertWithWhereUniqueWithoutSessionInput[]
    createMany?: StudentPerformanceCreateManySessionInputEnvelope
    set?: StudentPerformanceWhereUniqueInput | StudentPerformanceWhereUniqueInput[]
    disconnect?: StudentPerformanceWhereUniqueInput | StudentPerformanceWhereUniqueInput[]
    delete?: StudentPerformanceWhereUniqueInput | StudentPerformanceWhereUniqueInput[]
    connect?: StudentPerformanceWhereUniqueInput | StudentPerformanceWhereUniqueInput[]
    update?: StudentPerformanceUpdateWithWhereUniqueWithoutSessionInput | StudentPerformanceUpdateWithWhereUniqueWithoutSessionInput[]
    updateMany?: StudentPerformanceUpdateManyWithWhereWithoutSessionInput | StudentPerformanceUpdateManyWithWhereWithoutSessionInput[]
    deleteMany?: StudentPerformanceScalarWhereInput | StudentPerformanceScalarWhereInput[]
  }

  export type LeaveRequestUncheckedUpdateManyWithoutSessionNestedInput = {
    create?: XOR<LeaveRequestCreateWithoutSessionInput, LeaveRequestUncheckedCreateWithoutSessionInput> | LeaveRequestCreateWithoutSessionInput[] | LeaveRequestUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: LeaveRequestCreateOrConnectWithoutSessionInput | LeaveRequestCreateOrConnectWithoutSessionInput[]
    upsert?: LeaveRequestUpsertWithWhereUniqueWithoutSessionInput | LeaveRequestUpsertWithWhereUniqueWithoutSessionInput[]
    createMany?: LeaveRequestCreateManySessionInputEnvelope
    set?: LeaveRequestWhereUniqueInput | LeaveRequestWhereUniqueInput[]
    disconnect?: LeaveRequestWhereUniqueInput | LeaveRequestWhereUniqueInput[]
    delete?: LeaveRequestWhereUniqueInput | LeaveRequestWhereUniqueInput[]
    connect?: LeaveRequestWhereUniqueInput | LeaveRequestWhereUniqueInput[]
    update?: LeaveRequestUpdateWithWhereUniqueWithoutSessionInput | LeaveRequestUpdateWithWhereUniqueWithoutSessionInput[]
    updateMany?: LeaveRequestUpdateManyWithWhereWithoutSessionInput | LeaveRequestUpdateManyWithWhereWithoutSessionInput[]
    deleteMany?: LeaveRequestScalarWhereInput | LeaveRequestScalarWhereInput[]
  }

  export type MakeUpSessionUncheckedUpdateManyWithoutOriginalSessionNestedInput = {
    create?: XOR<MakeUpSessionCreateWithoutOriginalSessionInput, MakeUpSessionUncheckedCreateWithoutOriginalSessionInput> | MakeUpSessionCreateWithoutOriginalSessionInput[] | MakeUpSessionUncheckedCreateWithoutOriginalSessionInput[]
    connectOrCreate?: MakeUpSessionCreateOrConnectWithoutOriginalSessionInput | MakeUpSessionCreateOrConnectWithoutOriginalSessionInput[]
    upsert?: MakeUpSessionUpsertWithWhereUniqueWithoutOriginalSessionInput | MakeUpSessionUpsertWithWhereUniqueWithoutOriginalSessionInput[]
    createMany?: MakeUpSessionCreateManyOriginalSessionInputEnvelope
    set?: MakeUpSessionWhereUniqueInput | MakeUpSessionWhereUniqueInput[]
    disconnect?: MakeUpSessionWhereUniqueInput | MakeUpSessionWhereUniqueInput[]
    delete?: MakeUpSessionWhereUniqueInput | MakeUpSessionWhereUniqueInput[]
    connect?: MakeUpSessionWhereUniqueInput | MakeUpSessionWhereUniqueInput[]
    update?: MakeUpSessionUpdateWithWhereUniqueWithoutOriginalSessionInput | MakeUpSessionUpdateWithWhereUniqueWithoutOriginalSessionInput[]
    updateMany?: MakeUpSessionUpdateManyWithWhereWithoutOriginalSessionInput | MakeUpSessionUpdateManyWithWhereWithoutOriginalSessionInput[]
    deleteMany?: MakeUpSessionScalarWhereInput | MakeUpSessionScalarWhereInput[]
  }

  export type SessionCreateNestedOneWithoutAttendanceRecordsInput = {
    create?: XOR<SessionCreateWithoutAttendanceRecordsInput, SessionUncheckedCreateWithoutAttendanceRecordsInput>
    connectOrCreate?: SessionCreateOrConnectWithoutAttendanceRecordsInput
    connect?: SessionWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutAttendanceRecordsInput = {
    create?: XOR<UserCreateWithoutAttendanceRecordsInput, UserUncheckedCreateWithoutAttendanceRecordsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAttendanceRecordsInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutUpdatedAttendancesInput = {
    create?: XOR<UserCreateWithoutUpdatedAttendancesInput, UserUncheckedCreateWithoutUpdatedAttendancesInput>
    connectOrCreate?: UserCreateOrConnectWithoutUpdatedAttendancesInput
    connect?: UserWhereUniqueInput
  }

  export type SessionUpdateOneRequiredWithoutAttendanceRecordsNestedInput = {
    create?: XOR<SessionCreateWithoutAttendanceRecordsInput, SessionUncheckedCreateWithoutAttendanceRecordsInput>
    connectOrCreate?: SessionCreateOrConnectWithoutAttendanceRecordsInput
    upsert?: SessionUpsertWithoutAttendanceRecordsInput
    connect?: SessionWhereUniqueInput
    update?: XOR<XOR<SessionUpdateToOneWithWhereWithoutAttendanceRecordsInput, SessionUpdateWithoutAttendanceRecordsInput>, SessionUncheckedUpdateWithoutAttendanceRecordsInput>
  }

  export type UserUpdateOneRequiredWithoutAttendanceRecordsNestedInput = {
    create?: XOR<UserCreateWithoutAttendanceRecordsInput, UserUncheckedCreateWithoutAttendanceRecordsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAttendanceRecordsInput
    upsert?: UserUpsertWithoutAttendanceRecordsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAttendanceRecordsInput, UserUpdateWithoutAttendanceRecordsInput>, UserUncheckedUpdateWithoutAttendanceRecordsInput>
  }

  export type UserUpdateOneRequiredWithoutUpdatedAttendancesNestedInput = {
    create?: XOR<UserCreateWithoutUpdatedAttendancesInput, UserUncheckedCreateWithoutUpdatedAttendancesInput>
    connectOrCreate?: UserCreateOrConnectWithoutUpdatedAttendancesInput
    upsert?: UserUpsertWithoutUpdatedAttendancesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutUpdatedAttendancesInput, UserUpdateWithoutUpdatedAttendancesInput>, UserUncheckedUpdateWithoutUpdatedAttendancesInput>
  }

  export type SessionCreateNestedOneWithoutLeaveRequestsInput = {
    create?: XOR<SessionCreateWithoutLeaveRequestsInput, SessionUncheckedCreateWithoutLeaveRequestsInput>
    connectOrCreate?: SessionCreateOrConnectWithoutLeaveRequestsInput
    connect?: SessionWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutLeaveRequestsInput = {
    create?: XOR<UserCreateWithoutLeaveRequestsInput, UserUncheckedCreateWithoutLeaveRequestsInput>
    connectOrCreate?: UserCreateOrConnectWithoutLeaveRequestsInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutApprovedLeaveRequestsInput = {
    create?: XOR<UserCreateWithoutApprovedLeaveRequestsInput, UserUncheckedCreateWithoutApprovedLeaveRequestsInput>
    connectOrCreate?: UserCreateOrConnectWithoutApprovedLeaveRequestsInput
    connect?: UserWhereUniqueInput
  }

  export type MakeUpSessionCreateNestedManyWithoutLeaveRequestInput = {
    create?: XOR<MakeUpSessionCreateWithoutLeaveRequestInput, MakeUpSessionUncheckedCreateWithoutLeaveRequestInput> | MakeUpSessionCreateWithoutLeaveRequestInput[] | MakeUpSessionUncheckedCreateWithoutLeaveRequestInput[]
    connectOrCreate?: MakeUpSessionCreateOrConnectWithoutLeaveRequestInput | MakeUpSessionCreateOrConnectWithoutLeaveRequestInput[]
    createMany?: MakeUpSessionCreateManyLeaveRequestInputEnvelope
    connect?: MakeUpSessionWhereUniqueInput | MakeUpSessionWhereUniqueInput[]
  }

  export type MakeUpSessionUncheckedCreateNestedManyWithoutLeaveRequestInput = {
    create?: XOR<MakeUpSessionCreateWithoutLeaveRequestInput, MakeUpSessionUncheckedCreateWithoutLeaveRequestInput> | MakeUpSessionCreateWithoutLeaveRequestInput[] | MakeUpSessionUncheckedCreateWithoutLeaveRequestInput[]
    connectOrCreate?: MakeUpSessionCreateOrConnectWithoutLeaveRequestInput | MakeUpSessionCreateOrConnectWithoutLeaveRequestInput[]
    createMany?: MakeUpSessionCreateManyLeaveRequestInputEnvelope
    connect?: MakeUpSessionWhereUniqueInput | MakeUpSessionWhereUniqueInput[]
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type SessionUpdateOneRequiredWithoutLeaveRequestsNestedInput = {
    create?: XOR<SessionCreateWithoutLeaveRequestsInput, SessionUncheckedCreateWithoutLeaveRequestsInput>
    connectOrCreate?: SessionCreateOrConnectWithoutLeaveRequestsInput
    upsert?: SessionUpsertWithoutLeaveRequestsInput
    connect?: SessionWhereUniqueInput
    update?: XOR<XOR<SessionUpdateToOneWithWhereWithoutLeaveRequestsInput, SessionUpdateWithoutLeaveRequestsInput>, SessionUncheckedUpdateWithoutLeaveRequestsInput>
  }

  export type UserUpdateOneRequiredWithoutLeaveRequestsNestedInput = {
    create?: XOR<UserCreateWithoutLeaveRequestsInput, UserUncheckedCreateWithoutLeaveRequestsInput>
    connectOrCreate?: UserCreateOrConnectWithoutLeaveRequestsInput
    upsert?: UserUpsertWithoutLeaveRequestsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutLeaveRequestsInput, UserUpdateWithoutLeaveRequestsInput>, UserUncheckedUpdateWithoutLeaveRequestsInput>
  }

  export type UserUpdateOneWithoutApprovedLeaveRequestsNestedInput = {
    create?: XOR<UserCreateWithoutApprovedLeaveRequestsInput, UserUncheckedCreateWithoutApprovedLeaveRequestsInput>
    connectOrCreate?: UserCreateOrConnectWithoutApprovedLeaveRequestsInput
    upsert?: UserUpsertWithoutApprovedLeaveRequestsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutApprovedLeaveRequestsInput, UserUpdateWithoutApprovedLeaveRequestsInput>, UserUncheckedUpdateWithoutApprovedLeaveRequestsInput>
  }

  export type MakeUpSessionUpdateManyWithoutLeaveRequestNestedInput = {
    create?: XOR<MakeUpSessionCreateWithoutLeaveRequestInput, MakeUpSessionUncheckedCreateWithoutLeaveRequestInput> | MakeUpSessionCreateWithoutLeaveRequestInput[] | MakeUpSessionUncheckedCreateWithoutLeaveRequestInput[]
    connectOrCreate?: MakeUpSessionCreateOrConnectWithoutLeaveRequestInput | MakeUpSessionCreateOrConnectWithoutLeaveRequestInput[]
    upsert?: MakeUpSessionUpsertWithWhereUniqueWithoutLeaveRequestInput | MakeUpSessionUpsertWithWhereUniqueWithoutLeaveRequestInput[]
    createMany?: MakeUpSessionCreateManyLeaveRequestInputEnvelope
    set?: MakeUpSessionWhereUniqueInput | MakeUpSessionWhereUniqueInput[]
    disconnect?: MakeUpSessionWhereUniqueInput | MakeUpSessionWhereUniqueInput[]
    delete?: MakeUpSessionWhereUniqueInput | MakeUpSessionWhereUniqueInput[]
    connect?: MakeUpSessionWhereUniqueInput | MakeUpSessionWhereUniqueInput[]
    update?: MakeUpSessionUpdateWithWhereUniqueWithoutLeaveRequestInput | MakeUpSessionUpdateWithWhereUniqueWithoutLeaveRequestInput[]
    updateMany?: MakeUpSessionUpdateManyWithWhereWithoutLeaveRequestInput | MakeUpSessionUpdateManyWithWhereWithoutLeaveRequestInput[]
    deleteMany?: MakeUpSessionScalarWhereInput | MakeUpSessionScalarWhereInput[]
  }

  export type MakeUpSessionUncheckedUpdateManyWithoutLeaveRequestNestedInput = {
    create?: XOR<MakeUpSessionCreateWithoutLeaveRequestInput, MakeUpSessionUncheckedCreateWithoutLeaveRequestInput> | MakeUpSessionCreateWithoutLeaveRequestInput[] | MakeUpSessionUncheckedCreateWithoutLeaveRequestInput[]
    connectOrCreate?: MakeUpSessionCreateOrConnectWithoutLeaveRequestInput | MakeUpSessionCreateOrConnectWithoutLeaveRequestInput[]
    upsert?: MakeUpSessionUpsertWithWhereUniqueWithoutLeaveRequestInput | MakeUpSessionUpsertWithWhereUniqueWithoutLeaveRequestInput[]
    createMany?: MakeUpSessionCreateManyLeaveRequestInputEnvelope
    set?: MakeUpSessionWhereUniqueInput | MakeUpSessionWhereUniqueInput[]
    disconnect?: MakeUpSessionWhereUniqueInput | MakeUpSessionWhereUniqueInput[]
    delete?: MakeUpSessionWhereUniqueInput | MakeUpSessionWhereUniqueInput[]
    connect?: MakeUpSessionWhereUniqueInput | MakeUpSessionWhereUniqueInput[]
    update?: MakeUpSessionUpdateWithWhereUniqueWithoutLeaveRequestInput | MakeUpSessionUpdateWithWhereUniqueWithoutLeaveRequestInput[]
    updateMany?: MakeUpSessionUpdateManyWithWhereWithoutLeaveRequestInput | MakeUpSessionUpdateManyWithWhereWithoutLeaveRequestInput[]
    deleteMany?: MakeUpSessionScalarWhereInput | MakeUpSessionScalarWhereInput[]
  }

  export type SessionCreateNestedOneWithoutMakeUpSessionsInput = {
    create?: XOR<SessionCreateWithoutMakeUpSessionsInput, SessionUncheckedCreateWithoutMakeUpSessionsInput>
    connectOrCreate?: SessionCreateOrConnectWithoutMakeUpSessionsInput
    connect?: SessionWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutMakeUpSessionsInput = {
    create?: XOR<UserCreateWithoutMakeUpSessionsInput, UserUncheckedCreateWithoutMakeUpSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutMakeUpSessionsInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutCreatedMakeUpSessionsInput = {
    create?: XOR<UserCreateWithoutCreatedMakeUpSessionsInput, UserUncheckedCreateWithoutCreatedMakeUpSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedMakeUpSessionsInput
    connect?: UserWhereUniqueInput
  }

  export type LeaveRequestCreateNestedOneWithoutMakeUpsInput = {
    create?: XOR<LeaveRequestCreateWithoutMakeUpsInput, LeaveRequestUncheckedCreateWithoutMakeUpsInput>
    connectOrCreate?: LeaveRequestCreateOrConnectWithoutMakeUpsInput
    connect?: LeaveRequestWhereUniqueInput
  }

  export type SessionUpdateOneRequiredWithoutMakeUpSessionsNestedInput = {
    create?: XOR<SessionCreateWithoutMakeUpSessionsInput, SessionUncheckedCreateWithoutMakeUpSessionsInput>
    connectOrCreate?: SessionCreateOrConnectWithoutMakeUpSessionsInput
    upsert?: SessionUpsertWithoutMakeUpSessionsInput
    connect?: SessionWhereUniqueInput
    update?: XOR<XOR<SessionUpdateToOneWithWhereWithoutMakeUpSessionsInput, SessionUpdateWithoutMakeUpSessionsInput>, SessionUncheckedUpdateWithoutMakeUpSessionsInput>
  }

  export type UserUpdateOneRequiredWithoutMakeUpSessionsNestedInput = {
    create?: XOR<UserCreateWithoutMakeUpSessionsInput, UserUncheckedCreateWithoutMakeUpSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutMakeUpSessionsInput
    upsert?: UserUpsertWithoutMakeUpSessionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutMakeUpSessionsInput, UserUpdateWithoutMakeUpSessionsInput>, UserUncheckedUpdateWithoutMakeUpSessionsInput>
  }

  export type UserUpdateOneRequiredWithoutCreatedMakeUpSessionsNestedInput = {
    create?: XOR<UserCreateWithoutCreatedMakeUpSessionsInput, UserUncheckedCreateWithoutCreatedMakeUpSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedMakeUpSessionsInput
    upsert?: UserUpsertWithoutCreatedMakeUpSessionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCreatedMakeUpSessionsInput, UserUpdateWithoutCreatedMakeUpSessionsInput>, UserUncheckedUpdateWithoutCreatedMakeUpSessionsInput>
  }

  export type LeaveRequestUpdateOneWithoutMakeUpsNestedInput = {
    create?: XOR<LeaveRequestCreateWithoutMakeUpsInput, LeaveRequestUncheckedCreateWithoutMakeUpsInput>
    connectOrCreate?: LeaveRequestCreateOrConnectWithoutMakeUpsInput
    upsert?: LeaveRequestUpsertWithoutMakeUpsInput
    disconnect?: LeaveRequestWhereInput | boolean
    delete?: LeaveRequestWhereInput | boolean
    connect?: LeaveRequestWhereUniqueInput
    update?: XOR<XOR<LeaveRequestUpdateToOneWithWhereWithoutMakeUpsInput, LeaveRequestUpdateWithoutMakeUpsInput>, LeaveRequestUncheckedUpdateWithoutMakeUpsInput>
  }

  export type SessionCreateNestedOneWithoutPerformancesInput = {
    create?: XOR<SessionCreateWithoutPerformancesInput, SessionUncheckedCreateWithoutPerformancesInput>
    connectOrCreate?: SessionCreateOrConnectWithoutPerformancesInput
    connect?: SessionWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutPerformancesInput = {
    create?: XOR<UserCreateWithoutPerformancesInput, UserUncheckedCreateWithoutPerformancesInput>
    connectOrCreate?: UserCreateOrConnectWithoutPerformancesInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutCreatedPerformancesInput = {
    create?: XOR<UserCreateWithoutCreatedPerformancesInput, UserUncheckedCreateWithoutCreatedPerformancesInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedPerformancesInput
    connect?: UserWhereUniqueInput
  }

  export type SessionUpdateOneRequiredWithoutPerformancesNestedInput = {
    create?: XOR<SessionCreateWithoutPerformancesInput, SessionUncheckedCreateWithoutPerformancesInput>
    connectOrCreate?: SessionCreateOrConnectWithoutPerformancesInput
    upsert?: SessionUpsertWithoutPerformancesInput
    connect?: SessionWhereUniqueInput
    update?: XOR<XOR<SessionUpdateToOneWithWhereWithoutPerformancesInput, SessionUpdateWithoutPerformancesInput>, SessionUncheckedUpdateWithoutPerformancesInput>
  }

  export type UserUpdateOneRequiredWithoutPerformancesNestedInput = {
    create?: XOR<UserCreateWithoutPerformancesInput, UserUncheckedCreateWithoutPerformancesInput>
    connectOrCreate?: UserCreateOrConnectWithoutPerformancesInput
    upsert?: UserUpsertWithoutPerformancesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutPerformancesInput, UserUpdateWithoutPerformancesInput>, UserUncheckedUpdateWithoutPerformancesInput>
  }

  export type UserUpdateOneRequiredWithoutCreatedPerformancesNestedInput = {
    create?: XOR<UserCreateWithoutCreatedPerformancesInput, UserUncheckedCreateWithoutCreatedPerformancesInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedPerformancesInput
    upsert?: UserUpsertWithoutCreatedPerformancesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCreatedPerformancesInput, UserUpdateWithoutCreatedPerformancesInput>, UserUncheckedUpdateWithoutCreatedPerformancesInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type EnrollmentCreateWithoutStudentInput = {
    course: CourseCreateNestedOneWithoutEnrollmentsInput
  }

  export type EnrollmentUncheckedCreateWithoutStudentInput = {
    id?: number
    courseId: number
  }

  export type EnrollmentCreateOrConnectWithoutStudentInput = {
    where: EnrollmentWhereUniqueInput
    create: XOR<EnrollmentCreateWithoutStudentInput, EnrollmentUncheckedCreateWithoutStudentInput>
  }

  export type EnrollmentCreateManyStudentInputEnvelope = {
    data: EnrollmentCreateManyStudentInput | EnrollmentCreateManyStudentInput[]
    skipDuplicates?: boolean
  }

  export type SessionCreateWithoutTeacherInput = {
    sessionDate: Date | string
    startTime: string
    endTime: string
    content?: string | null
    course: CourseCreateNestedOneWithoutSessionsInput
    attendanceRecords?: AttendanceRecordCreateNestedManyWithoutSessionInput
    performances?: StudentPerformanceCreateNestedManyWithoutSessionInput
    leaveRequests?: LeaveRequestCreateNestedManyWithoutSessionInput
    makeUpSessions?: MakeUpSessionCreateNestedManyWithoutOriginalSessionInput
  }

  export type SessionUncheckedCreateWithoutTeacherInput = {
    id?: number
    courseId: number
    sessionDate: Date | string
    startTime: string
    endTime: string
    content?: string | null
    attendanceRecords?: AttendanceRecordUncheckedCreateNestedManyWithoutSessionInput
    performances?: StudentPerformanceUncheckedCreateNestedManyWithoutSessionInput
    leaveRequests?: LeaveRequestUncheckedCreateNestedManyWithoutSessionInput
    makeUpSessions?: MakeUpSessionUncheckedCreateNestedManyWithoutOriginalSessionInput
  }

  export type SessionCreateOrConnectWithoutTeacherInput = {
    where: SessionWhereUniqueInput
    create: XOR<SessionCreateWithoutTeacherInput, SessionUncheckedCreateWithoutTeacherInput>
  }

  export type SessionCreateManyTeacherInputEnvelope = {
    data: SessionCreateManyTeacherInput | SessionCreateManyTeacherInput[]
    skipDuplicates?: boolean
  }

  export type AttendanceRecordCreateWithoutStudentInput = {
    status: string
    note?: string | null
    updatedAt?: Date | string
    session: SessionCreateNestedOneWithoutAttendanceRecordsInput
    updatedBy: UserCreateNestedOneWithoutUpdatedAttendancesInput
  }

  export type AttendanceRecordUncheckedCreateWithoutStudentInput = {
    id?: number
    sessionId: number
    status: string
    note?: string | null
    updatedById: number
    updatedAt?: Date | string
  }

  export type AttendanceRecordCreateOrConnectWithoutStudentInput = {
    where: AttendanceRecordWhereUniqueInput
    create: XOR<AttendanceRecordCreateWithoutStudentInput, AttendanceRecordUncheckedCreateWithoutStudentInput>
  }

  export type AttendanceRecordCreateManyStudentInputEnvelope = {
    data: AttendanceRecordCreateManyStudentInput | AttendanceRecordCreateManyStudentInput[]
    skipDuplicates?: boolean
  }

  export type AttendanceRecordCreateWithoutUpdatedByInput = {
    status: string
    note?: string | null
    updatedAt?: Date | string
    session: SessionCreateNestedOneWithoutAttendanceRecordsInput
    student: UserCreateNestedOneWithoutAttendanceRecordsInput
  }

  export type AttendanceRecordUncheckedCreateWithoutUpdatedByInput = {
    id?: number
    sessionId: number
    studentId: number
    status: string
    note?: string | null
    updatedAt?: Date | string
  }

  export type AttendanceRecordCreateOrConnectWithoutUpdatedByInput = {
    where: AttendanceRecordWhereUniqueInput
    create: XOR<AttendanceRecordCreateWithoutUpdatedByInput, AttendanceRecordUncheckedCreateWithoutUpdatedByInput>
  }

  export type AttendanceRecordCreateManyUpdatedByInputEnvelope = {
    data: AttendanceRecordCreateManyUpdatedByInput | AttendanceRecordCreateManyUpdatedByInput[]
    skipDuplicates?: boolean
  }

  export type LeaveRequestCreateWithoutStudentInput = {
    reason: string
    status: string
    approvedAt?: Date | string | null
    createdAt?: Date | string
    session: SessionCreateNestedOneWithoutLeaveRequestsInput
    approvedBy?: UserCreateNestedOneWithoutApprovedLeaveRequestsInput
    makeUps?: MakeUpSessionCreateNestedManyWithoutLeaveRequestInput
  }

  export type LeaveRequestUncheckedCreateWithoutStudentInput = {
    id?: number
    sessionId: number
    reason: string
    status: string
    approvedById?: number | null
    approvedAt?: Date | string | null
    createdAt?: Date | string
    makeUps?: MakeUpSessionUncheckedCreateNestedManyWithoutLeaveRequestInput
  }

  export type LeaveRequestCreateOrConnectWithoutStudentInput = {
    where: LeaveRequestWhereUniqueInput
    create: XOR<LeaveRequestCreateWithoutStudentInput, LeaveRequestUncheckedCreateWithoutStudentInput>
  }

  export type LeaveRequestCreateManyStudentInputEnvelope = {
    data: LeaveRequestCreateManyStudentInput | LeaveRequestCreateManyStudentInput[]
    skipDuplicates?: boolean
  }

  export type LeaveRequestCreateWithoutApprovedByInput = {
    reason: string
    status: string
    approvedAt?: Date | string | null
    createdAt?: Date | string
    session: SessionCreateNestedOneWithoutLeaveRequestsInput
    student: UserCreateNestedOneWithoutLeaveRequestsInput
    makeUps?: MakeUpSessionCreateNestedManyWithoutLeaveRequestInput
  }

  export type LeaveRequestUncheckedCreateWithoutApprovedByInput = {
    id?: number
    sessionId: number
    studentId: number
    reason: string
    status: string
    approvedAt?: Date | string | null
    createdAt?: Date | string
    makeUps?: MakeUpSessionUncheckedCreateNestedManyWithoutLeaveRequestInput
  }

  export type LeaveRequestCreateOrConnectWithoutApprovedByInput = {
    where: LeaveRequestWhereUniqueInput
    create: XOR<LeaveRequestCreateWithoutApprovedByInput, LeaveRequestUncheckedCreateWithoutApprovedByInput>
  }

  export type LeaveRequestCreateManyApprovedByInputEnvelope = {
    data: LeaveRequestCreateManyApprovedByInput | LeaveRequestCreateManyApprovedByInput[]
    skipDuplicates?: boolean
  }

  export type MakeUpSessionCreateWithoutStudentInput = {
    makeUpDate: Date | string
    startTime: string
    endTime: string
    attendanceStatus: string
    content?: string | null
    createdAt?: Date | string
    originalSession: SessionCreateNestedOneWithoutMakeUpSessionsInput
    createdBy: UserCreateNestedOneWithoutCreatedMakeUpSessionsInput
    leaveRequest?: LeaveRequestCreateNestedOneWithoutMakeUpsInput
  }

  export type MakeUpSessionUncheckedCreateWithoutStudentInput = {
    id?: number
    originalSessionId: number
    makeUpDate: Date | string
    startTime: string
    endTime: string
    attendanceStatus: string
    content?: string | null
    createdById: number
    createdAt?: Date | string
    leaveRequestId?: number | null
  }

  export type MakeUpSessionCreateOrConnectWithoutStudentInput = {
    where: MakeUpSessionWhereUniqueInput
    create: XOR<MakeUpSessionCreateWithoutStudentInput, MakeUpSessionUncheckedCreateWithoutStudentInput>
  }

  export type MakeUpSessionCreateManyStudentInputEnvelope = {
    data: MakeUpSessionCreateManyStudentInput | MakeUpSessionCreateManyStudentInput[]
    skipDuplicates?: boolean
  }

  export type MakeUpSessionCreateWithoutCreatedByInput = {
    makeUpDate: Date | string
    startTime: string
    endTime: string
    attendanceStatus: string
    content?: string | null
    createdAt?: Date | string
    originalSession: SessionCreateNestedOneWithoutMakeUpSessionsInput
    student: UserCreateNestedOneWithoutMakeUpSessionsInput
    leaveRequest?: LeaveRequestCreateNestedOneWithoutMakeUpsInput
  }

  export type MakeUpSessionUncheckedCreateWithoutCreatedByInput = {
    id?: number
    originalSessionId: number
    studentId: number
    makeUpDate: Date | string
    startTime: string
    endTime: string
    attendanceStatus: string
    content?: string | null
    createdAt?: Date | string
    leaveRequestId?: number | null
  }

  export type MakeUpSessionCreateOrConnectWithoutCreatedByInput = {
    where: MakeUpSessionWhereUniqueInput
    create: XOR<MakeUpSessionCreateWithoutCreatedByInput, MakeUpSessionUncheckedCreateWithoutCreatedByInput>
  }

  export type MakeUpSessionCreateManyCreatedByInputEnvelope = {
    data: MakeUpSessionCreateManyCreatedByInput | MakeUpSessionCreateManyCreatedByInput[]
    skipDuplicates?: boolean
  }

  export type StudentPerformanceCreateWithoutStudentInput = {
    performance: string
    createdAt?: Date | string
    session: SessionCreateNestedOneWithoutPerformancesInput
    createdBy: UserCreateNestedOneWithoutCreatedPerformancesInput
  }

  export type StudentPerformanceUncheckedCreateWithoutStudentInput = {
    id?: number
    sessionId: number
    performance: string
    createdById: number
    createdAt?: Date | string
  }

  export type StudentPerformanceCreateOrConnectWithoutStudentInput = {
    where: StudentPerformanceWhereUniqueInput
    create: XOR<StudentPerformanceCreateWithoutStudentInput, StudentPerformanceUncheckedCreateWithoutStudentInput>
  }

  export type StudentPerformanceCreateManyStudentInputEnvelope = {
    data: StudentPerformanceCreateManyStudentInput | StudentPerformanceCreateManyStudentInput[]
    skipDuplicates?: boolean
  }

  export type StudentPerformanceCreateWithoutCreatedByInput = {
    performance: string
    createdAt?: Date | string
    session: SessionCreateNestedOneWithoutPerformancesInput
    student: UserCreateNestedOneWithoutPerformancesInput
  }

  export type StudentPerformanceUncheckedCreateWithoutCreatedByInput = {
    id?: number
    sessionId: number
    studentId: number
    performance: string
    createdAt?: Date | string
  }

  export type StudentPerformanceCreateOrConnectWithoutCreatedByInput = {
    where: StudentPerformanceWhereUniqueInput
    create: XOR<StudentPerformanceCreateWithoutCreatedByInput, StudentPerformanceUncheckedCreateWithoutCreatedByInput>
  }

  export type StudentPerformanceCreateManyCreatedByInputEnvelope = {
    data: StudentPerformanceCreateManyCreatedByInput | StudentPerformanceCreateManyCreatedByInput[]
    skipDuplicates?: boolean
  }

  export type EnrollmentUpsertWithWhereUniqueWithoutStudentInput = {
    where: EnrollmentWhereUniqueInput
    update: XOR<EnrollmentUpdateWithoutStudentInput, EnrollmentUncheckedUpdateWithoutStudentInput>
    create: XOR<EnrollmentCreateWithoutStudentInput, EnrollmentUncheckedCreateWithoutStudentInput>
  }

  export type EnrollmentUpdateWithWhereUniqueWithoutStudentInput = {
    where: EnrollmentWhereUniqueInput
    data: XOR<EnrollmentUpdateWithoutStudentInput, EnrollmentUncheckedUpdateWithoutStudentInput>
  }

  export type EnrollmentUpdateManyWithWhereWithoutStudentInput = {
    where: EnrollmentScalarWhereInput
    data: XOR<EnrollmentUpdateManyMutationInput, EnrollmentUncheckedUpdateManyWithoutStudentInput>
  }

  export type EnrollmentScalarWhereInput = {
    AND?: EnrollmentScalarWhereInput | EnrollmentScalarWhereInput[]
    OR?: EnrollmentScalarWhereInput[]
    NOT?: EnrollmentScalarWhereInput | EnrollmentScalarWhereInput[]
    id?: IntFilter<"Enrollment"> | number
    courseId?: IntFilter<"Enrollment"> | number
    studentId?: IntFilter<"Enrollment"> | number
  }

  export type SessionUpsertWithWhereUniqueWithoutTeacherInput = {
    where: SessionWhereUniqueInput
    update: XOR<SessionUpdateWithoutTeacherInput, SessionUncheckedUpdateWithoutTeacherInput>
    create: XOR<SessionCreateWithoutTeacherInput, SessionUncheckedCreateWithoutTeacherInput>
  }

  export type SessionUpdateWithWhereUniqueWithoutTeacherInput = {
    where: SessionWhereUniqueInput
    data: XOR<SessionUpdateWithoutTeacherInput, SessionUncheckedUpdateWithoutTeacherInput>
  }

  export type SessionUpdateManyWithWhereWithoutTeacherInput = {
    where: SessionScalarWhereInput
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyWithoutTeacherInput>
  }

  export type SessionScalarWhereInput = {
    AND?: SessionScalarWhereInput | SessionScalarWhereInput[]
    OR?: SessionScalarWhereInput[]
    NOT?: SessionScalarWhereInput | SessionScalarWhereInput[]
    id?: IntFilter<"Session"> | number
    courseId?: IntFilter<"Session"> | number
    sessionDate?: DateTimeFilter<"Session"> | Date | string
    startTime?: StringFilter<"Session"> | string
    endTime?: StringFilter<"Session"> | string
    teacherId?: IntNullableFilter<"Session"> | number | null
    content?: StringNullableFilter<"Session"> | string | null
  }

  export type AttendanceRecordUpsertWithWhereUniqueWithoutStudentInput = {
    where: AttendanceRecordWhereUniqueInput
    update: XOR<AttendanceRecordUpdateWithoutStudentInput, AttendanceRecordUncheckedUpdateWithoutStudentInput>
    create: XOR<AttendanceRecordCreateWithoutStudentInput, AttendanceRecordUncheckedCreateWithoutStudentInput>
  }

  export type AttendanceRecordUpdateWithWhereUniqueWithoutStudentInput = {
    where: AttendanceRecordWhereUniqueInput
    data: XOR<AttendanceRecordUpdateWithoutStudentInput, AttendanceRecordUncheckedUpdateWithoutStudentInput>
  }

  export type AttendanceRecordUpdateManyWithWhereWithoutStudentInput = {
    where: AttendanceRecordScalarWhereInput
    data: XOR<AttendanceRecordUpdateManyMutationInput, AttendanceRecordUncheckedUpdateManyWithoutStudentInput>
  }

  export type AttendanceRecordScalarWhereInput = {
    AND?: AttendanceRecordScalarWhereInput | AttendanceRecordScalarWhereInput[]
    OR?: AttendanceRecordScalarWhereInput[]
    NOT?: AttendanceRecordScalarWhereInput | AttendanceRecordScalarWhereInput[]
    id?: IntFilter<"AttendanceRecord"> | number
    sessionId?: IntFilter<"AttendanceRecord"> | number
    studentId?: IntFilter<"AttendanceRecord"> | number
    status?: StringFilter<"AttendanceRecord"> | string
    note?: StringNullableFilter<"AttendanceRecord"> | string | null
    updatedById?: IntFilter<"AttendanceRecord"> | number
    updatedAt?: DateTimeFilter<"AttendanceRecord"> | Date | string
  }

  export type AttendanceRecordUpsertWithWhereUniqueWithoutUpdatedByInput = {
    where: AttendanceRecordWhereUniqueInput
    update: XOR<AttendanceRecordUpdateWithoutUpdatedByInput, AttendanceRecordUncheckedUpdateWithoutUpdatedByInput>
    create: XOR<AttendanceRecordCreateWithoutUpdatedByInput, AttendanceRecordUncheckedCreateWithoutUpdatedByInput>
  }

  export type AttendanceRecordUpdateWithWhereUniqueWithoutUpdatedByInput = {
    where: AttendanceRecordWhereUniqueInput
    data: XOR<AttendanceRecordUpdateWithoutUpdatedByInput, AttendanceRecordUncheckedUpdateWithoutUpdatedByInput>
  }

  export type AttendanceRecordUpdateManyWithWhereWithoutUpdatedByInput = {
    where: AttendanceRecordScalarWhereInput
    data: XOR<AttendanceRecordUpdateManyMutationInput, AttendanceRecordUncheckedUpdateManyWithoutUpdatedByInput>
  }

  export type LeaveRequestUpsertWithWhereUniqueWithoutStudentInput = {
    where: LeaveRequestWhereUniqueInput
    update: XOR<LeaveRequestUpdateWithoutStudentInput, LeaveRequestUncheckedUpdateWithoutStudentInput>
    create: XOR<LeaveRequestCreateWithoutStudentInput, LeaveRequestUncheckedCreateWithoutStudentInput>
  }

  export type LeaveRequestUpdateWithWhereUniqueWithoutStudentInput = {
    where: LeaveRequestWhereUniqueInput
    data: XOR<LeaveRequestUpdateWithoutStudentInput, LeaveRequestUncheckedUpdateWithoutStudentInput>
  }

  export type LeaveRequestUpdateManyWithWhereWithoutStudentInput = {
    where: LeaveRequestScalarWhereInput
    data: XOR<LeaveRequestUpdateManyMutationInput, LeaveRequestUncheckedUpdateManyWithoutStudentInput>
  }

  export type LeaveRequestScalarWhereInput = {
    AND?: LeaveRequestScalarWhereInput | LeaveRequestScalarWhereInput[]
    OR?: LeaveRequestScalarWhereInput[]
    NOT?: LeaveRequestScalarWhereInput | LeaveRequestScalarWhereInput[]
    id?: IntFilter<"LeaveRequest"> | number
    sessionId?: IntFilter<"LeaveRequest"> | number
    studentId?: IntFilter<"LeaveRequest"> | number
    reason?: StringFilter<"LeaveRequest"> | string
    status?: StringFilter<"LeaveRequest"> | string
    approvedById?: IntNullableFilter<"LeaveRequest"> | number | null
    approvedAt?: DateTimeNullableFilter<"LeaveRequest"> | Date | string | null
    createdAt?: DateTimeFilter<"LeaveRequest"> | Date | string
  }

  export type LeaveRequestUpsertWithWhereUniqueWithoutApprovedByInput = {
    where: LeaveRequestWhereUniqueInput
    update: XOR<LeaveRequestUpdateWithoutApprovedByInput, LeaveRequestUncheckedUpdateWithoutApprovedByInput>
    create: XOR<LeaveRequestCreateWithoutApprovedByInput, LeaveRequestUncheckedCreateWithoutApprovedByInput>
  }

  export type LeaveRequestUpdateWithWhereUniqueWithoutApprovedByInput = {
    where: LeaveRequestWhereUniqueInput
    data: XOR<LeaveRequestUpdateWithoutApprovedByInput, LeaveRequestUncheckedUpdateWithoutApprovedByInput>
  }

  export type LeaveRequestUpdateManyWithWhereWithoutApprovedByInput = {
    where: LeaveRequestScalarWhereInput
    data: XOR<LeaveRequestUpdateManyMutationInput, LeaveRequestUncheckedUpdateManyWithoutApprovedByInput>
  }

  export type MakeUpSessionUpsertWithWhereUniqueWithoutStudentInput = {
    where: MakeUpSessionWhereUniqueInput
    update: XOR<MakeUpSessionUpdateWithoutStudentInput, MakeUpSessionUncheckedUpdateWithoutStudentInput>
    create: XOR<MakeUpSessionCreateWithoutStudentInput, MakeUpSessionUncheckedCreateWithoutStudentInput>
  }

  export type MakeUpSessionUpdateWithWhereUniqueWithoutStudentInput = {
    where: MakeUpSessionWhereUniqueInput
    data: XOR<MakeUpSessionUpdateWithoutStudentInput, MakeUpSessionUncheckedUpdateWithoutStudentInput>
  }

  export type MakeUpSessionUpdateManyWithWhereWithoutStudentInput = {
    where: MakeUpSessionScalarWhereInput
    data: XOR<MakeUpSessionUpdateManyMutationInput, MakeUpSessionUncheckedUpdateManyWithoutStudentInput>
  }

  export type MakeUpSessionScalarWhereInput = {
    AND?: MakeUpSessionScalarWhereInput | MakeUpSessionScalarWhereInput[]
    OR?: MakeUpSessionScalarWhereInput[]
    NOT?: MakeUpSessionScalarWhereInput | MakeUpSessionScalarWhereInput[]
    id?: IntFilter<"MakeUpSession"> | number
    originalSessionId?: IntFilter<"MakeUpSession"> | number
    studentId?: IntFilter<"MakeUpSession"> | number
    makeUpDate?: DateTimeFilter<"MakeUpSession"> | Date | string
    startTime?: StringFilter<"MakeUpSession"> | string
    endTime?: StringFilter<"MakeUpSession"> | string
    attendanceStatus?: StringFilter<"MakeUpSession"> | string
    content?: StringNullableFilter<"MakeUpSession"> | string | null
    createdById?: IntFilter<"MakeUpSession"> | number
    createdAt?: DateTimeFilter<"MakeUpSession"> | Date | string
    leaveRequestId?: IntNullableFilter<"MakeUpSession"> | number | null
  }

  export type MakeUpSessionUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: MakeUpSessionWhereUniqueInput
    update: XOR<MakeUpSessionUpdateWithoutCreatedByInput, MakeUpSessionUncheckedUpdateWithoutCreatedByInput>
    create: XOR<MakeUpSessionCreateWithoutCreatedByInput, MakeUpSessionUncheckedCreateWithoutCreatedByInput>
  }

  export type MakeUpSessionUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: MakeUpSessionWhereUniqueInput
    data: XOR<MakeUpSessionUpdateWithoutCreatedByInput, MakeUpSessionUncheckedUpdateWithoutCreatedByInput>
  }

  export type MakeUpSessionUpdateManyWithWhereWithoutCreatedByInput = {
    where: MakeUpSessionScalarWhereInput
    data: XOR<MakeUpSessionUpdateManyMutationInput, MakeUpSessionUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type StudentPerformanceUpsertWithWhereUniqueWithoutStudentInput = {
    where: StudentPerformanceWhereUniqueInput
    update: XOR<StudentPerformanceUpdateWithoutStudentInput, StudentPerformanceUncheckedUpdateWithoutStudentInput>
    create: XOR<StudentPerformanceCreateWithoutStudentInput, StudentPerformanceUncheckedCreateWithoutStudentInput>
  }

  export type StudentPerformanceUpdateWithWhereUniqueWithoutStudentInput = {
    where: StudentPerformanceWhereUniqueInput
    data: XOR<StudentPerformanceUpdateWithoutStudentInput, StudentPerformanceUncheckedUpdateWithoutStudentInput>
  }

  export type StudentPerformanceUpdateManyWithWhereWithoutStudentInput = {
    where: StudentPerformanceScalarWhereInput
    data: XOR<StudentPerformanceUpdateManyMutationInput, StudentPerformanceUncheckedUpdateManyWithoutStudentInput>
  }

  export type StudentPerformanceScalarWhereInput = {
    AND?: StudentPerformanceScalarWhereInput | StudentPerformanceScalarWhereInput[]
    OR?: StudentPerformanceScalarWhereInput[]
    NOT?: StudentPerformanceScalarWhereInput | StudentPerformanceScalarWhereInput[]
    id?: IntFilter<"StudentPerformance"> | number
    sessionId?: IntFilter<"StudentPerformance"> | number
    studentId?: IntFilter<"StudentPerformance"> | number
    performance?: StringFilter<"StudentPerformance"> | string
    createdById?: IntFilter<"StudentPerformance"> | number
    createdAt?: DateTimeFilter<"StudentPerformance"> | Date | string
  }

  export type StudentPerformanceUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: StudentPerformanceWhereUniqueInput
    update: XOR<StudentPerformanceUpdateWithoutCreatedByInput, StudentPerformanceUncheckedUpdateWithoutCreatedByInput>
    create: XOR<StudentPerformanceCreateWithoutCreatedByInput, StudentPerformanceUncheckedCreateWithoutCreatedByInput>
  }

  export type StudentPerformanceUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: StudentPerformanceWhereUniqueInput
    data: XOR<StudentPerformanceUpdateWithoutCreatedByInput, StudentPerformanceUncheckedUpdateWithoutCreatedByInput>
  }

  export type StudentPerformanceUpdateManyWithWhereWithoutCreatedByInput = {
    where: StudentPerformanceScalarWhereInput
    data: XOR<StudentPerformanceUpdateManyMutationInput, StudentPerformanceUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type EnrollmentCreateWithoutCourseInput = {
    student: UserCreateNestedOneWithoutEnrollmentsInput
  }

  export type EnrollmentUncheckedCreateWithoutCourseInput = {
    id?: number
    studentId: number
  }

  export type EnrollmentCreateOrConnectWithoutCourseInput = {
    where: EnrollmentWhereUniqueInput
    create: XOR<EnrollmentCreateWithoutCourseInput, EnrollmentUncheckedCreateWithoutCourseInput>
  }

  export type EnrollmentCreateManyCourseInputEnvelope = {
    data: EnrollmentCreateManyCourseInput | EnrollmentCreateManyCourseInput[]
    skipDuplicates?: boolean
  }

  export type SessionCreateWithoutCourseInput = {
    sessionDate: Date | string
    startTime: string
    endTime: string
    content?: string | null
    teacher?: UserCreateNestedOneWithoutTeachingSessionsInput
    attendanceRecords?: AttendanceRecordCreateNestedManyWithoutSessionInput
    performances?: StudentPerformanceCreateNestedManyWithoutSessionInput
    leaveRequests?: LeaveRequestCreateNestedManyWithoutSessionInput
    makeUpSessions?: MakeUpSessionCreateNestedManyWithoutOriginalSessionInput
  }

  export type SessionUncheckedCreateWithoutCourseInput = {
    id?: number
    sessionDate: Date | string
    startTime: string
    endTime: string
    teacherId?: number | null
    content?: string | null
    attendanceRecords?: AttendanceRecordUncheckedCreateNestedManyWithoutSessionInput
    performances?: StudentPerformanceUncheckedCreateNestedManyWithoutSessionInput
    leaveRequests?: LeaveRequestUncheckedCreateNestedManyWithoutSessionInput
    makeUpSessions?: MakeUpSessionUncheckedCreateNestedManyWithoutOriginalSessionInput
  }

  export type SessionCreateOrConnectWithoutCourseInput = {
    where: SessionWhereUniqueInput
    create: XOR<SessionCreateWithoutCourseInput, SessionUncheckedCreateWithoutCourseInput>
  }

  export type SessionCreateManyCourseInputEnvelope = {
    data: SessionCreateManyCourseInput | SessionCreateManyCourseInput[]
    skipDuplicates?: boolean
  }

  export type EnrollmentUpsertWithWhereUniqueWithoutCourseInput = {
    where: EnrollmentWhereUniqueInput
    update: XOR<EnrollmentUpdateWithoutCourseInput, EnrollmentUncheckedUpdateWithoutCourseInput>
    create: XOR<EnrollmentCreateWithoutCourseInput, EnrollmentUncheckedCreateWithoutCourseInput>
  }

  export type EnrollmentUpdateWithWhereUniqueWithoutCourseInput = {
    where: EnrollmentWhereUniqueInput
    data: XOR<EnrollmentUpdateWithoutCourseInput, EnrollmentUncheckedUpdateWithoutCourseInput>
  }

  export type EnrollmentUpdateManyWithWhereWithoutCourseInput = {
    where: EnrollmentScalarWhereInput
    data: XOR<EnrollmentUpdateManyMutationInput, EnrollmentUncheckedUpdateManyWithoutCourseInput>
  }

  export type SessionUpsertWithWhereUniqueWithoutCourseInput = {
    where: SessionWhereUniqueInput
    update: XOR<SessionUpdateWithoutCourseInput, SessionUncheckedUpdateWithoutCourseInput>
    create: XOR<SessionCreateWithoutCourseInput, SessionUncheckedCreateWithoutCourseInput>
  }

  export type SessionUpdateWithWhereUniqueWithoutCourseInput = {
    where: SessionWhereUniqueInput
    data: XOR<SessionUpdateWithoutCourseInput, SessionUncheckedUpdateWithoutCourseInput>
  }

  export type SessionUpdateManyWithWhereWithoutCourseInput = {
    where: SessionScalarWhereInput
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyWithoutCourseInput>
  }

  export type CourseCreateWithoutEnrollmentsInput = {
    name: string
    level?: string | null
    startDate: Date | string
    endDate: Date | string
    createdAt?: Date | string
    sessions?: SessionCreateNestedManyWithoutCourseInput
  }

  export type CourseUncheckedCreateWithoutEnrollmentsInput = {
    id?: number
    name: string
    level?: string | null
    startDate: Date | string
    endDate: Date | string
    createdAt?: Date | string
    sessions?: SessionUncheckedCreateNestedManyWithoutCourseInput
  }

  export type CourseCreateOrConnectWithoutEnrollmentsInput = {
    where: CourseWhereUniqueInput
    create: XOR<CourseCreateWithoutEnrollmentsInput, CourseUncheckedCreateWithoutEnrollmentsInput>
  }

  export type UserCreateWithoutEnrollmentsInput = {
    name: string
    role: string
    email: string
    passwordHash: string
    grade?: number | null
    school?: string | null
    parentName?: string | null
    parentPhone?: string | null
    studentNo?: string | null
    createdAt?: Date | string
    teachingSessions?: SessionCreateNestedManyWithoutTeacherInput
    attendanceRecords?: AttendanceRecordCreateNestedManyWithoutStudentInput
    updatedAttendances?: AttendanceRecordCreateNestedManyWithoutUpdatedByInput
    leaveRequests?: LeaveRequestCreateNestedManyWithoutStudentInput
    approvedLeaveRequests?: LeaveRequestCreateNestedManyWithoutApprovedByInput
    makeUpSessions?: MakeUpSessionCreateNestedManyWithoutStudentInput
    createdMakeUpSessions?: MakeUpSessionCreateNestedManyWithoutCreatedByInput
    performances?: StudentPerformanceCreateNestedManyWithoutStudentInput
    createdPerformances?: StudentPerformanceCreateNestedManyWithoutCreatedByInput
  }

  export type UserUncheckedCreateWithoutEnrollmentsInput = {
    id?: number
    name: string
    role: string
    email: string
    passwordHash: string
    grade?: number | null
    school?: string | null
    parentName?: string | null
    parentPhone?: string | null
    studentNo?: string | null
    createdAt?: Date | string
    teachingSessions?: SessionUncheckedCreateNestedManyWithoutTeacherInput
    attendanceRecords?: AttendanceRecordUncheckedCreateNestedManyWithoutStudentInput
    updatedAttendances?: AttendanceRecordUncheckedCreateNestedManyWithoutUpdatedByInput
    leaveRequests?: LeaveRequestUncheckedCreateNestedManyWithoutStudentInput
    approvedLeaveRequests?: LeaveRequestUncheckedCreateNestedManyWithoutApprovedByInput
    makeUpSessions?: MakeUpSessionUncheckedCreateNestedManyWithoutStudentInput
    createdMakeUpSessions?: MakeUpSessionUncheckedCreateNestedManyWithoutCreatedByInput
    performances?: StudentPerformanceUncheckedCreateNestedManyWithoutStudentInput
    createdPerformances?: StudentPerformanceUncheckedCreateNestedManyWithoutCreatedByInput
  }

  export type UserCreateOrConnectWithoutEnrollmentsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutEnrollmentsInput, UserUncheckedCreateWithoutEnrollmentsInput>
  }

  export type CourseUpsertWithoutEnrollmentsInput = {
    update: XOR<CourseUpdateWithoutEnrollmentsInput, CourseUncheckedUpdateWithoutEnrollmentsInput>
    create: XOR<CourseCreateWithoutEnrollmentsInput, CourseUncheckedCreateWithoutEnrollmentsInput>
    where?: CourseWhereInput
  }

  export type CourseUpdateToOneWithWhereWithoutEnrollmentsInput = {
    where?: CourseWhereInput
    data: XOR<CourseUpdateWithoutEnrollmentsInput, CourseUncheckedUpdateWithoutEnrollmentsInput>
  }

  export type CourseUpdateWithoutEnrollmentsInput = {
    name?: StringFieldUpdateOperationsInput | string
    level?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sessions?: SessionUpdateManyWithoutCourseNestedInput
  }

  export type CourseUncheckedUpdateWithoutEnrollmentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    level?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sessions?: SessionUncheckedUpdateManyWithoutCourseNestedInput
  }

  export type UserUpsertWithoutEnrollmentsInput = {
    update: XOR<UserUpdateWithoutEnrollmentsInput, UserUncheckedUpdateWithoutEnrollmentsInput>
    create: XOR<UserCreateWithoutEnrollmentsInput, UserUncheckedCreateWithoutEnrollmentsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutEnrollmentsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutEnrollmentsInput, UserUncheckedUpdateWithoutEnrollmentsInput>
  }

  export type UserUpdateWithoutEnrollmentsInput = {
    name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    grade?: NullableIntFieldUpdateOperationsInput | number | null
    school?: NullableStringFieldUpdateOperationsInput | string | null
    parentName?: NullableStringFieldUpdateOperationsInput | string | null
    parentPhone?: NullableStringFieldUpdateOperationsInput | string | null
    studentNo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    teachingSessions?: SessionUpdateManyWithoutTeacherNestedInput
    attendanceRecords?: AttendanceRecordUpdateManyWithoutStudentNestedInput
    updatedAttendances?: AttendanceRecordUpdateManyWithoutUpdatedByNestedInput
    leaveRequests?: LeaveRequestUpdateManyWithoutStudentNestedInput
    approvedLeaveRequests?: LeaveRequestUpdateManyWithoutApprovedByNestedInput
    makeUpSessions?: MakeUpSessionUpdateManyWithoutStudentNestedInput
    createdMakeUpSessions?: MakeUpSessionUpdateManyWithoutCreatedByNestedInput
    performances?: StudentPerformanceUpdateManyWithoutStudentNestedInput
    createdPerformances?: StudentPerformanceUpdateManyWithoutCreatedByNestedInput
  }

  export type UserUncheckedUpdateWithoutEnrollmentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    grade?: NullableIntFieldUpdateOperationsInput | number | null
    school?: NullableStringFieldUpdateOperationsInput | string | null
    parentName?: NullableStringFieldUpdateOperationsInput | string | null
    parentPhone?: NullableStringFieldUpdateOperationsInput | string | null
    studentNo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    teachingSessions?: SessionUncheckedUpdateManyWithoutTeacherNestedInput
    attendanceRecords?: AttendanceRecordUncheckedUpdateManyWithoutStudentNestedInput
    updatedAttendances?: AttendanceRecordUncheckedUpdateManyWithoutUpdatedByNestedInput
    leaveRequests?: LeaveRequestUncheckedUpdateManyWithoutStudentNestedInput
    approvedLeaveRequests?: LeaveRequestUncheckedUpdateManyWithoutApprovedByNestedInput
    makeUpSessions?: MakeUpSessionUncheckedUpdateManyWithoutStudentNestedInput
    createdMakeUpSessions?: MakeUpSessionUncheckedUpdateManyWithoutCreatedByNestedInput
    performances?: StudentPerformanceUncheckedUpdateManyWithoutStudentNestedInput
    createdPerformances?: StudentPerformanceUncheckedUpdateManyWithoutCreatedByNestedInput
  }

  export type CourseCreateWithoutSessionsInput = {
    name: string
    level?: string | null
    startDate: Date | string
    endDate: Date | string
    createdAt?: Date | string
    enrollments?: EnrollmentCreateNestedManyWithoutCourseInput
  }

  export type CourseUncheckedCreateWithoutSessionsInput = {
    id?: number
    name: string
    level?: string | null
    startDate: Date | string
    endDate: Date | string
    createdAt?: Date | string
    enrollments?: EnrollmentUncheckedCreateNestedManyWithoutCourseInput
  }

  export type CourseCreateOrConnectWithoutSessionsInput = {
    where: CourseWhereUniqueInput
    create: XOR<CourseCreateWithoutSessionsInput, CourseUncheckedCreateWithoutSessionsInput>
  }

  export type UserCreateWithoutTeachingSessionsInput = {
    name: string
    role: string
    email: string
    passwordHash: string
    grade?: number | null
    school?: string | null
    parentName?: string | null
    parentPhone?: string | null
    studentNo?: string | null
    createdAt?: Date | string
    enrollments?: EnrollmentCreateNestedManyWithoutStudentInput
    attendanceRecords?: AttendanceRecordCreateNestedManyWithoutStudentInput
    updatedAttendances?: AttendanceRecordCreateNestedManyWithoutUpdatedByInput
    leaveRequests?: LeaveRequestCreateNestedManyWithoutStudentInput
    approvedLeaveRequests?: LeaveRequestCreateNestedManyWithoutApprovedByInput
    makeUpSessions?: MakeUpSessionCreateNestedManyWithoutStudentInput
    createdMakeUpSessions?: MakeUpSessionCreateNestedManyWithoutCreatedByInput
    performances?: StudentPerformanceCreateNestedManyWithoutStudentInput
    createdPerformances?: StudentPerformanceCreateNestedManyWithoutCreatedByInput
  }

  export type UserUncheckedCreateWithoutTeachingSessionsInput = {
    id?: number
    name: string
    role: string
    email: string
    passwordHash: string
    grade?: number | null
    school?: string | null
    parentName?: string | null
    parentPhone?: string | null
    studentNo?: string | null
    createdAt?: Date | string
    enrollments?: EnrollmentUncheckedCreateNestedManyWithoutStudentInput
    attendanceRecords?: AttendanceRecordUncheckedCreateNestedManyWithoutStudentInput
    updatedAttendances?: AttendanceRecordUncheckedCreateNestedManyWithoutUpdatedByInput
    leaveRequests?: LeaveRequestUncheckedCreateNestedManyWithoutStudentInput
    approvedLeaveRequests?: LeaveRequestUncheckedCreateNestedManyWithoutApprovedByInput
    makeUpSessions?: MakeUpSessionUncheckedCreateNestedManyWithoutStudentInput
    createdMakeUpSessions?: MakeUpSessionUncheckedCreateNestedManyWithoutCreatedByInput
    performances?: StudentPerformanceUncheckedCreateNestedManyWithoutStudentInput
    createdPerformances?: StudentPerformanceUncheckedCreateNestedManyWithoutCreatedByInput
  }

  export type UserCreateOrConnectWithoutTeachingSessionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTeachingSessionsInput, UserUncheckedCreateWithoutTeachingSessionsInput>
  }

  export type AttendanceRecordCreateWithoutSessionInput = {
    status: string
    note?: string | null
    updatedAt?: Date | string
    student: UserCreateNestedOneWithoutAttendanceRecordsInput
    updatedBy: UserCreateNestedOneWithoutUpdatedAttendancesInput
  }

  export type AttendanceRecordUncheckedCreateWithoutSessionInput = {
    id?: number
    studentId: number
    status: string
    note?: string | null
    updatedById: number
    updatedAt?: Date | string
  }

  export type AttendanceRecordCreateOrConnectWithoutSessionInput = {
    where: AttendanceRecordWhereUniqueInput
    create: XOR<AttendanceRecordCreateWithoutSessionInput, AttendanceRecordUncheckedCreateWithoutSessionInput>
  }

  export type AttendanceRecordCreateManySessionInputEnvelope = {
    data: AttendanceRecordCreateManySessionInput | AttendanceRecordCreateManySessionInput[]
    skipDuplicates?: boolean
  }

  export type StudentPerformanceCreateWithoutSessionInput = {
    performance: string
    createdAt?: Date | string
    student: UserCreateNestedOneWithoutPerformancesInput
    createdBy: UserCreateNestedOneWithoutCreatedPerformancesInput
  }

  export type StudentPerformanceUncheckedCreateWithoutSessionInput = {
    id?: number
    studentId: number
    performance: string
    createdById: number
    createdAt?: Date | string
  }

  export type StudentPerformanceCreateOrConnectWithoutSessionInput = {
    where: StudentPerformanceWhereUniqueInput
    create: XOR<StudentPerformanceCreateWithoutSessionInput, StudentPerformanceUncheckedCreateWithoutSessionInput>
  }

  export type StudentPerformanceCreateManySessionInputEnvelope = {
    data: StudentPerformanceCreateManySessionInput | StudentPerformanceCreateManySessionInput[]
    skipDuplicates?: boolean
  }

  export type LeaveRequestCreateWithoutSessionInput = {
    reason: string
    status: string
    approvedAt?: Date | string | null
    createdAt?: Date | string
    student: UserCreateNestedOneWithoutLeaveRequestsInput
    approvedBy?: UserCreateNestedOneWithoutApprovedLeaveRequestsInput
    makeUps?: MakeUpSessionCreateNestedManyWithoutLeaveRequestInput
  }

  export type LeaveRequestUncheckedCreateWithoutSessionInput = {
    id?: number
    studentId: number
    reason: string
    status: string
    approvedById?: number | null
    approvedAt?: Date | string | null
    createdAt?: Date | string
    makeUps?: MakeUpSessionUncheckedCreateNestedManyWithoutLeaveRequestInput
  }

  export type LeaveRequestCreateOrConnectWithoutSessionInput = {
    where: LeaveRequestWhereUniqueInput
    create: XOR<LeaveRequestCreateWithoutSessionInput, LeaveRequestUncheckedCreateWithoutSessionInput>
  }

  export type LeaveRequestCreateManySessionInputEnvelope = {
    data: LeaveRequestCreateManySessionInput | LeaveRequestCreateManySessionInput[]
    skipDuplicates?: boolean
  }

  export type MakeUpSessionCreateWithoutOriginalSessionInput = {
    makeUpDate: Date | string
    startTime: string
    endTime: string
    attendanceStatus: string
    content?: string | null
    createdAt?: Date | string
    student: UserCreateNestedOneWithoutMakeUpSessionsInput
    createdBy: UserCreateNestedOneWithoutCreatedMakeUpSessionsInput
    leaveRequest?: LeaveRequestCreateNestedOneWithoutMakeUpsInput
  }

  export type MakeUpSessionUncheckedCreateWithoutOriginalSessionInput = {
    id?: number
    studentId: number
    makeUpDate: Date | string
    startTime: string
    endTime: string
    attendanceStatus: string
    content?: string | null
    createdById: number
    createdAt?: Date | string
    leaveRequestId?: number | null
  }

  export type MakeUpSessionCreateOrConnectWithoutOriginalSessionInput = {
    where: MakeUpSessionWhereUniqueInput
    create: XOR<MakeUpSessionCreateWithoutOriginalSessionInput, MakeUpSessionUncheckedCreateWithoutOriginalSessionInput>
  }

  export type MakeUpSessionCreateManyOriginalSessionInputEnvelope = {
    data: MakeUpSessionCreateManyOriginalSessionInput | MakeUpSessionCreateManyOriginalSessionInput[]
    skipDuplicates?: boolean
  }

  export type CourseUpsertWithoutSessionsInput = {
    update: XOR<CourseUpdateWithoutSessionsInput, CourseUncheckedUpdateWithoutSessionsInput>
    create: XOR<CourseCreateWithoutSessionsInput, CourseUncheckedCreateWithoutSessionsInput>
    where?: CourseWhereInput
  }

  export type CourseUpdateToOneWithWhereWithoutSessionsInput = {
    where?: CourseWhereInput
    data: XOR<CourseUpdateWithoutSessionsInput, CourseUncheckedUpdateWithoutSessionsInput>
  }

  export type CourseUpdateWithoutSessionsInput = {
    name?: StringFieldUpdateOperationsInput | string
    level?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    enrollments?: EnrollmentUpdateManyWithoutCourseNestedInput
  }

  export type CourseUncheckedUpdateWithoutSessionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    level?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    enrollments?: EnrollmentUncheckedUpdateManyWithoutCourseNestedInput
  }

  export type UserUpsertWithoutTeachingSessionsInput = {
    update: XOR<UserUpdateWithoutTeachingSessionsInput, UserUncheckedUpdateWithoutTeachingSessionsInput>
    create: XOR<UserCreateWithoutTeachingSessionsInput, UserUncheckedCreateWithoutTeachingSessionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutTeachingSessionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutTeachingSessionsInput, UserUncheckedUpdateWithoutTeachingSessionsInput>
  }

  export type UserUpdateWithoutTeachingSessionsInput = {
    name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    grade?: NullableIntFieldUpdateOperationsInput | number | null
    school?: NullableStringFieldUpdateOperationsInput | string | null
    parentName?: NullableStringFieldUpdateOperationsInput | string | null
    parentPhone?: NullableStringFieldUpdateOperationsInput | string | null
    studentNo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    enrollments?: EnrollmentUpdateManyWithoutStudentNestedInput
    attendanceRecords?: AttendanceRecordUpdateManyWithoutStudentNestedInput
    updatedAttendances?: AttendanceRecordUpdateManyWithoutUpdatedByNestedInput
    leaveRequests?: LeaveRequestUpdateManyWithoutStudentNestedInput
    approvedLeaveRequests?: LeaveRequestUpdateManyWithoutApprovedByNestedInput
    makeUpSessions?: MakeUpSessionUpdateManyWithoutStudentNestedInput
    createdMakeUpSessions?: MakeUpSessionUpdateManyWithoutCreatedByNestedInput
    performances?: StudentPerformanceUpdateManyWithoutStudentNestedInput
    createdPerformances?: StudentPerformanceUpdateManyWithoutCreatedByNestedInput
  }

  export type UserUncheckedUpdateWithoutTeachingSessionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    grade?: NullableIntFieldUpdateOperationsInput | number | null
    school?: NullableStringFieldUpdateOperationsInput | string | null
    parentName?: NullableStringFieldUpdateOperationsInput | string | null
    parentPhone?: NullableStringFieldUpdateOperationsInput | string | null
    studentNo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    enrollments?: EnrollmentUncheckedUpdateManyWithoutStudentNestedInput
    attendanceRecords?: AttendanceRecordUncheckedUpdateManyWithoutStudentNestedInput
    updatedAttendances?: AttendanceRecordUncheckedUpdateManyWithoutUpdatedByNestedInput
    leaveRequests?: LeaveRequestUncheckedUpdateManyWithoutStudentNestedInput
    approvedLeaveRequests?: LeaveRequestUncheckedUpdateManyWithoutApprovedByNestedInput
    makeUpSessions?: MakeUpSessionUncheckedUpdateManyWithoutStudentNestedInput
    createdMakeUpSessions?: MakeUpSessionUncheckedUpdateManyWithoutCreatedByNestedInput
    performances?: StudentPerformanceUncheckedUpdateManyWithoutStudentNestedInput
    createdPerformances?: StudentPerformanceUncheckedUpdateManyWithoutCreatedByNestedInput
  }

  export type AttendanceRecordUpsertWithWhereUniqueWithoutSessionInput = {
    where: AttendanceRecordWhereUniqueInput
    update: XOR<AttendanceRecordUpdateWithoutSessionInput, AttendanceRecordUncheckedUpdateWithoutSessionInput>
    create: XOR<AttendanceRecordCreateWithoutSessionInput, AttendanceRecordUncheckedCreateWithoutSessionInput>
  }

  export type AttendanceRecordUpdateWithWhereUniqueWithoutSessionInput = {
    where: AttendanceRecordWhereUniqueInput
    data: XOR<AttendanceRecordUpdateWithoutSessionInput, AttendanceRecordUncheckedUpdateWithoutSessionInput>
  }

  export type AttendanceRecordUpdateManyWithWhereWithoutSessionInput = {
    where: AttendanceRecordScalarWhereInput
    data: XOR<AttendanceRecordUpdateManyMutationInput, AttendanceRecordUncheckedUpdateManyWithoutSessionInput>
  }

  export type StudentPerformanceUpsertWithWhereUniqueWithoutSessionInput = {
    where: StudentPerformanceWhereUniqueInput
    update: XOR<StudentPerformanceUpdateWithoutSessionInput, StudentPerformanceUncheckedUpdateWithoutSessionInput>
    create: XOR<StudentPerformanceCreateWithoutSessionInput, StudentPerformanceUncheckedCreateWithoutSessionInput>
  }

  export type StudentPerformanceUpdateWithWhereUniqueWithoutSessionInput = {
    where: StudentPerformanceWhereUniqueInput
    data: XOR<StudentPerformanceUpdateWithoutSessionInput, StudentPerformanceUncheckedUpdateWithoutSessionInput>
  }

  export type StudentPerformanceUpdateManyWithWhereWithoutSessionInput = {
    where: StudentPerformanceScalarWhereInput
    data: XOR<StudentPerformanceUpdateManyMutationInput, StudentPerformanceUncheckedUpdateManyWithoutSessionInput>
  }

  export type LeaveRequestUpsertWithWhereUniqueWithoutSessionInput = {
    where: LeaveRequestWhereUniqueInput
    update: XOR<LeaveRequestUpdateWithoutSessionInput, LeaveRequestUncheckedUpdateWithoutSessionInput>
    create: XOR<LeaveRequestCreateWithoutSessionInput, LeaveRequestUncheckedCreateWithoutSessionInput>
  }

  export type LeaveRequestUpdateWithWhereUniqueWithoutSessionInput = {
    where: LeaveRequestWhereUniqueInput
    data: XOR<LeaveRequestUpdateWithoutSessionInput, LeaveRequestUncheckedUpdateWithoutSessionInput>
  }

  export type LeaveRequestUpdateManyWithWhereWithoutSessionInput = {
    where: LeaveRequestScalarWhereInput
    data: XOR<LeaveRequestUpdateManyMutationInput, LeaveRequestUncheckedUpdateManyWithoutSessionInput>
  }

  export type MakeUpSessionUpsertWithWhereUniqueWithoutOriginalSessionInput = {
    where: MakeUpSessionWhereUniqueInput
    update: XOR<MakeUpSessionUpdateWithoutOriginalSessionInput, MakeUpSessionUncheckedUpdateWithoutOriginalSessionInput>
    create: XOR<MakeUpSessionCreateWithoutOriginalSessionInput, MakeUpSessionUncheckedCreateWithoutOriginalSessionInput>
  }

  export type MakeUpSessionUpdateWithWhereUniqueWithoutOriginalSessionInput = {
    where: MakeUpSessionWhereUniqueInput
    data: XOR<MakeUpSessionUpdateWithoutOriginalSessionInput, MakeUpSessionUncheckedUpdateWithoutOriginalSessionInput>
  }

  export type MakeUpSessionUpdateManyWithWhereWithoutOriginalSessionInput = {
    where: MakeUpSessionScalarWhereInput
    data: XOR<MakeUpSessionUpdateManyMutationInput, MakeUpSessionUncheckedUpdateManyWithoutOriginalSessionInput>
  }

  export type SessionCreateWithoutAttendanceRecordsInput = {
    sessionDate: Date | string
    startTime: string
    endTime: string
    content?: string | null
    course: CourseCreateNestedOneWithoutSessionsInput
    teacher?: UserCreateNestedOneWithoutTeachingSessionsInput
    performances?: StudentPerformanceCreateNestedManyWithoutSessionInput
    leaveRequests?: LeaveRequestCreateNestedManyWithoutSessionInput
    makeUpSessions?: MakeUpSessionCreateNestedManyWithoutOriginalSessionInput
  }

  export type SessionUncheckedCreateWithoutAttendanceRecordsInput = {
    id?: number
    courseId: number
    sessionDate: Date | string
    startTime: string
    endTime: string
    teacherId?: number | null
    content?: string | null
    performances?: StudentPerformanceUncheckedCreateNestedManyWithoutSessionInput
    leaveRequests?: LeaveRequestUncheckedCreateNestedManyWithoutSessionInput
    makeUpSessions?: MakeUpSessionUncheckedCreateNestedManyWithoutOriginalSessionInput
  }

  export type SessionCreateOrConnectWithoutAttendanceRecordsInput = {
    where: SessionWhereUniqueInput
    create: XOR<SessionCreateWithoutAttendanceRecordsInput, SessionUncheckedCreateWithoutAttendanceRecordsInput>
  }

  export type UserCreateWithoutAttendanceRecordsInput = {
    name: string
    role: string
    email: string
    passwordHash: string
    grade?: number | null
    school?: string | null
    parentName?: string | null
    parentPhone?: string | null
    studentNo?: string | null
    createdAt?: Date | string
    enrollments?: EnrollmentCreateNestedManyWithoutStudentInput
    teachingSessions?: SessionCreateNestedManyWithoutTeacherInput
    updatedAttendances?: AttendanceRecordCreateNestedManyWithoutUpdatedByInput
    leaveRequests?: LeaveRequestCreateNestedManyWithoutStudentInput
    approvedLeaveRequests?: LeaveRequestCreateNestedManyWithoutApprovedByInput
    makeUpSessions?: MakeUpSessionCreateNestedManyWithoutStudentInput
    createdMakeUpSessions?: MakeUpSessionCreateNestedManyWithoutCreatedByInput
    performances?: StudentPerformanceCreateNestedManyWithoutStudentInput
    createdPerformances?: StudentPerformanceCreateNestedManyWithoutCreatedByInput
  }

  export type UserUncheckedCreateWithoutAttendanceRecordsInput = {
    id?: number
    name: string
    role: string
    email: string
    passwordHash: string
    grade?: number | null
    school?: string | null
    parentName?: string | null
    parentPhone?: string | null
    studentNo?: string | null
    createdAt?: Date | string
    enrollments?: EnrollmentUncheckedCreateNestedManyWithoutStudentInput
    teachingSessions?: SessionUncheckedCreateNestedManyWithoutTeacherInput
    updatedAttendances?: AttendanceRecordUncheckedCreateNestedManyWithoutUpdatedByInput
    leaveRequests?: LeaveRequestUncheckedCreateNestedManyWithoutStudentInput
    approvedLeaveRequests?: LeaveRequestUncheckedCreateNestedManyWithoutApprovedByInput
    makeUpSessions?: MakeUpSessionUncheckedCreateNestedManyWithoutStudentInput
    createdMakeUpSessions?: MakeUpSessionUncheckedCreateNestedManyWithoutCreatedByInput
    performances?: StudentPerformanceUncheckedCreateNestedManyWithoutStudentInput
    createdPerformances?: StudentPerformanceUncheckedCreateNestedManyWithoutCreatedByInput
  }

  export type UserCreateOrConnectWithoutAttendanceRecordsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAttendanceRecordsInput, UserUncheckedCreateWithoutAttendanceRecordsInput>
  }

  export type UserCreateWithoutUpdatedAttendancesInput = {
    name: string
    role: string
    email: string
    passwordHash: string
    grade?: number | null
    school?: string | null
    parentName?: string | null
    parentPhone?: string | null
    studentNo?: string | null
    createdAt?: Date | string
    enrollments?: EnrollmentCreateNestedManyWithoutStudentInput
    teachingSessions?: SessionCreateNestedManyWithoutTeacherInput
    attendanceRecords?: AttendanceRecordCreateNestedManyWithoutStudentInput
    leaveRequests?: LeaveRequestCreateNestedManyWithoutStudentInput
    approvedLeaveRequests?: LeaveRequestCreateNestedManyWithoutApprovedByInput
    makeUpSessions?: MakeUpSessionCreateNestedManyWithoutStudentInput
    createdMakeUpSessions?: MakeUpSessionCreateNestedManyWithoutCreatedByInput
    performances?: StudentPerformanceCreateNestedManyWithoutStudentInput
    createdPerformances?: StudentPerformanceCreateNestedManyWithoutCreatedByInput
  }

  export type UserUncheckedCreateWithoutUpdatedAttendancesInput = {
    id?: number
    name: string
    role: string
    email: string
    passwordHash: string
    grade?: number | null
    school?: string | null
    parentName?: string | null
    parentPhone?: string | null
    studentNo?: string | null
    createdAt?: Date | string
    enrollments?: EnrollmentUncheckedCreateNestedManyWithoutStudentInput
    teachingSessions?: SessionUncheckedCreateNestedManyWithoutTeacherInput
    attendanceRecords?: AttendanceRecordUncheckedCreateNestedManyWithoutStudentInput
    leaveRequests?: LeaveRequestUncheckedCreateNestedManyWithoutStudentInput
    approvedLeaveRequests?: LeaveRequestUncheckedCreateNestedManyWithoutApprovedByInput
    makeUpSessions?: MakeUpSessionUncheckedCreateNestedManyWithoutStudentInput
    createdMakeUpSessions?: MakeUpSessionUncheckedCreateNestedManyWithoutCreatedByInput
    performances?: StudentPerformanceUncheckedCreateNestedManyWithoutStudentInput
    createdPerformances?: StudentPerformanceUncheckedCreateNestedManyWithoutCreatedByInput
  }

  export type UserCreateOrConnectWithoutUpdatedAttendancesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUpdatedAttendancesInput, UserUncheckedCreateWithoutUpdatedAttendancesInput>
  }

  export type SessionUpsertWithoutAttendanceRecordsInput = {
    update: XOR<SessionUpdateWithoutAttendanceRecordsInput, SessionUncheckedUpdateWithoutAttendanceRecordsInput>
    create: XOR<SessionCreateWithoutAttendanceRecordsInput, SessionUncheckedCreateWithoutAttendanceRecordsInput>
    where?: SessionWhereInput
  }

  export type SessionUpdateToOneWithWhereWithoutAttendanceRecordsInput = {
    where?: SessionWhereInput
    data: XOR<SessionUpdateWithoutAttendanceRecordsInput, SessionUncheckedUpdateWithoutAttendanceRecordsInput>
  }

  export type SessionUpdateWithoutAttendanceRecordsInput = {
    sessionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    course?: CourseUpdateOneRequiredWithoutSessionsNestedInput
    teacher?: UserUpdateOneWithoutTeachingSessionsNestedInput
    performances?: StudentPerformanceUpdateManyWithoutSessionNestedInput
    leaveRequests?: LeaveRequestUpdateManyWithoutSessionNestedInput
    makeUpSessions?: MakeUpSessionUpdateManyWithoutOriginalSessionNestedInput
  }

  export type SessionUncheckedUpdateWithoutAttendanceRecordsInput = {
    id?: IntFieldUpdateOperationsInput | number
    courseId?: IntFieldUpdateOperationsInput | number
    sessionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    teacherId?: NullableIntFieldUpdateOperationsInput | number | null
    content?: NullableStringFieldUpdateOperationsInput | string | null
    performances?: StudentPerformanceUncheckedUpdateManyWithoutSessionNestedInput
    leaveRequests?: LeaveRequestUncheckedUpdateManyWithoutSessionNestedInput
    makeUpSessions?: MakeUpSessionUncheckedUpdateManyWithoutOriginalSessionNestedInput
  }

  export type UserUpsertWithoutAttendanceRecordsInput = {
    update: XOR<UserUpdateWithoutAttendanceRecordsInput, UserUncheckedUpdateWithoutAttendanceRecordsInput>
    create: XOR<UserCreateWithoutAttendanceRecordsInput, UserUncheckedCreateWithoutAttendanceRecordsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAttendanceRecordsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAttendanceRecordsInput, UserUncheckedUpdateWithoutAttendanceRecordsInput>
  }

  export type UserUpdateWithoutAttendanceRecordsInput = {
    name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    grade?: NullableIntFieldUpdateOperationsInput | number | null
    school?: NullableStringFieldUpdateOperationsInput | string | null
    parentName?: NullableStringFieldUpdateOperationsInput | string | null
    parentPhone?: NullableStringFieldUpdateOperationsInput | string | null
    studentNo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    enrollments?: EnrollmentUpdateManyWithoutStudentNestedInput
    teachingSessions?: SessionUpdateManyWithoutTeacherNestedInput
    updatedAttendances?: AttendanceRecordUpdateManyWithoutUpdatedByNestedInput
    leaveRequests?: LeaveRequestUpdateManyWithoutStudentNestedInput
    approvedLeaveRequests?: LeaveRequestUpdateManyWithoutApprovedByNestedInput
    makeUpSessions?: MakeUpSessionUpdateManyWithoutStudentNestedInput
    createdMakeUpSessions?: MakeUpSessionUpdateManyWithoutCreatedByNestedInput
    performances?: StudentPerformanceUpdateManyWithoutStudentNestedInput
    createdPerformances?: StudentPerformanceUpdateManyWithoutCreatedByNestedInput
  }

  export type UserUncheckedUpdateWithoutAttendanceRecordsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    grade?: NullableIntFieldUpdateOperationsInput | number | null
    school?: NullableStringFieldUpdateOperationsInput | string | null
    parentName?: NullableStringFieldUpdateOperationsInput | string | null
    parentPhone?: NullableStringFieldUpdateOperationsInput | string | null
    studentNo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    enrollments?: EnrollmentUncheckedUpdateManyWithoutStudentNestedInput
    teachingSessions?: SessionUncheckedUpdateManyWithoutTeacherNestedInput
    updatedAttendances?: AttendanceRecordUncheckedUpdateManyWithoutUpdatedByNestedInput
    leaveRequests?: LeaveRequestUncheckedUpdateManyWithoutStudentNestedInput
    approvedLeaveRequests?: LeaveRequestUncheckedUpdateManyWithoutApprovedByNestedInput
    makeUpSessions?: MakeUpSessionUncheckedUpdateManyWithoutStudentNestedInput
    createdMakeUpSessions?: MakeUpSessionUncheckedUpdateManyWithoutCreatedByNestedInput
    performances?: StudentPerformanceUncheckedUpdateManyWithoutStudentNestedInput
    createdPerformances?: StudentPerformanceUncheckedUpdateManyWithoutCreatedByNestedInput
  }

  export type UserUpsertWithoutUpdatedAttendancesInput = {
    update: XOR<UserUpdateWithoutUpdatedAttendancesInput, UserUncheckedUpdateWithoutUpdatedAttendancesInput>
    create: XOR<UserCreateWithoutUpdatedAttendancesInput, UserUncheckedCreateWithoutUpdatedAttendancesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutUpdatedAttendancesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutUpdatedAttendancesInput, UserUncheckedUpdateWithoutUpdatedAttendancesInput>
  }

  export type UserUpdateWithoutUpdatedAttendancesInput = {
    name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    grade?: NullableIntFieldUpdateOperationsInput | number | null
    school?: NullableStringFieldUpdateOperationsInput | string | null
    parentName?: NullableStringFieldUpdateOperationsInput | string | null
    parentPhone?: NullableStringFieldUpdateOperationsInput | string | null
    studentNo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    enrollments?: EnrollmentUpdateManyWithoutStudentNestedInput
    teachingSessions?: SessionUpdateManyWithoutTeacherNestedInput
    attendanceRecords?: AttendanceRecordUpdateManyWithoutStudentNestedInput
    leaveRequests?: LeaveRequestUpdateManyWithoutStudentNestedInput
    approvedLeaveRequests?: LeaveRequestUpdateManyWithoutApprovedByNestedInput
    makeUpSessions?: MakeUpSessionUpdateManyWithoutStudentNestedInput
    createdMakeUpSessions?: MakeUpSessionUpdateManyWithoutCreatedByNestedInput
    performances?: StudentPerformanceUpdateManyWithoutStudentNestedInput
    createdPerformances?: StudentPerformanceUpdateManyWithoutCreatedByNestedInput
  }

  export type UserUncheckedUpdateWithoutUpdatedAttendancesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    grade?: NullableIntFieldUpdateOperationsInput | number | null
    school?: NullableStringFieldUpdateOperationsInput | string | null
    parentName?: NullableStringFieldUpdateOperationsInput | string | null
    parentPhone?: NullableStringFieldUpdateOperationsInput | string | null
    studentNo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    enrollments?: EnrollmentUncheckedUpdateManyWithoutStudentNestedInput
    teachingSessions?: SessionUncheckedUpdateManyWithoutTeacherNestedInput
    attendanceRecords?: AttendanceRecordUncheckedUpdateManyWithoutStudentNestedInput
    leaveRequests?: LeaveRequestUncheckedUpdateManyWithoutStudentNestedInput
    approvedLeaveRequests?: LeaveRequestUncheckedUpdateManyWithoutApprovedByNestedInput
    makeUpSessions?: MakeUpSessionUncheckedUpdateManyWithoutStudentNestedInput
    createdMakeUpSessions?: MakeUpSessionUncheckedUpdateManyWithoutCreatedByNestedInput
    performances?: StudentPerformanceUncheckedUpdateManyWithoutStudentNestedInput
    createdPerformances?: StudentPerformanceUncheckedUpdateManyWithoutCreatedByNestedInput
  }

  export type SessionCreateWithoutLeaveRequestsInput = {
    sessionDate: Date | string
    startTime: string
    endTime: string
    content?: string | null
    course: CourseCreateNestedOneWithoutSessionsInput
    teacher?: UserCreateNestedOneWithoutTeachingSessionsInput
    attendanceRecords?: AttendanceRecordCreateNestedManyWithoutSessionInput
    performances?: StudentPerformanceCreateNestedManyWithoutSessionInput
    makeUpSessions?: MakeUpSessionCreateNestedManyWithoutOriginalSessionInput
  }

  export type SessionUncheckedCreateWithoutLeaveRequestsInput = {
    id?: number
    courseId: number
    sessionDate: Date | string
    startTime: string
    endTime: string
    teacherId?: number | null
    content?: string | null
    attendanceRecords?: AttendanceRecordUncheckedCreateNestedManyWithoutSessionInput
    performances?: StudentPerformanceUncheckedCreateNestedManyWithoutSessionInput
    makeUpSessions?: MakeUpSessionUncheckedCreateNestedManyWithoutOriginalSessionInput
  }

  export type SessionCreateOrConnectWithoutLeaveRequestsInput = {
    where: SessionWhereUniqueInput
    create: XOR<SessionCreateWithoutLeaveRequestsInput, SessionUncheckedCreateWithoutLeaveRequestsInput>
  }

  export type UserCreateWithoutLeaveRequestsInput = {
    name: string
    role: string
    email: string
    passwordHash: string
    grade?: number | null
    school?: string | null
    parentName?: string | null
    parentPhone?: string | null
    studentNo?: string | null
    createdAt?: Date | string
    enrollments?: EnrollmentCreateNestedManyWithoutStudentInput
    teachingSessions?: SessionCreateNestedManyWithoutTeacherInput
    attendanceRecords?: AttendanceRecordCreateNestedManyWithoutStudentInput
    updatedAttendances?: AttendanceRecordCreateNestedManyWithoutUpdatedByInput
    approvedLeaveRequests?: LeaveRequestCreateNestedManyWithoutApprovedByInput
    makeUpSessions?: MakeUpSessionCreateNestedManyWithoutStudentInput
    createdMakeUpSessions?: MakeUpSessionCreateNestedManyWithoutCreatedByInput
    performances?: StudentPerformanceCreateNestedManyWithoutStudentInput
    createdPerformances?: StudentPerformanceCreateNestedManyWithoutCreatedByInput
  }

  export type UserUncheckedCreateWithoutLeaveRequestsInput = {
    id?: number
    name: string
    role: string
    email: string
    passwordHash: string
    grade?: number | null
    school?: string | null
    parentName?: string | null
    parentPhone?: string | null
    studentNo?: string | null
    createdAt?: Date | string
    enrollments?: EnrollmentUncheckedCreateNestedManyWithoutStudentInput
    teachingSessions?: SessionUncheckedCreateNestedManyWithoutTeacherInput
    attendanceRecords?: AttendanceRecordUncheckedCreateNestedManyWithoutStudentInput
    updatedAttendances?: AttendanceRecordUncheckedCreateNestedManyWithoutUpdatedByInput
    approvedLeaveRequests?: LeaveRequestUncheckedCreateNestedManyWithoutApprovedByInput
    makeUpSessions?: MakeUpSessionUncheckedCreateNestedManyWithoutStudentInput
    createdMakeUpSessions?: MakeUpSessionUncheckedCreateNestedManyWithoutCreatedByInput
    performances?: StudentPerformanceUncheckedCreateNestedManyWithoutStudentInput
    createdPerformances?: StudentPerformanceUncheckedCreateNestedManyWithoutCreatedByInput
  }

  export type UserCreateOrConnectWithoutLeaveRequestsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutLeaveRequestsInput, UserUncheckedCreateWithoutLeaveRequestsInput>
  }

  export type UserCreateWithoutApprovedLeaveRequestsInput = {
    name: string
    role: string
    email: string
    passwordHash: string
    grade?: number | null
    school?: string | null
    parentName?: string | null
    parentPhone?: string | null
    studentNo?: string | null
    createdAt?: Date | string
    enrollments?: EnrollmentCreateNestedManyWithoutStudentInput
    teachingSessions?: SessionCreateNestedManyWithoutTeacherInput
    attendanceRecords?: AttendanceRecordCreateNestedManyWithoutStudentInput
    updatedAttendances?: AttendanceRecordCreateNestedManyWithoutUpdatedByInput
    leaveRequests?: LeaveRequestCreateNestedManyWithoutStudentInput
    makeUpSessions?: MakeUpSessionCreateNestedManyWithoutStudentInput
    createdMakeUpSessions?: MakeUpSessionCreateNestedManyWithoutCreatedByInput
    performances?: StudentPerformanceCreateNestedManyWithoutStudentInput
    createdPerformances?: StudentPerformanceCreateNestedManyWithoutCreatedByInput
  }

  export type UserUncheckedCreateWithoutApprovedLeaveRequestsInput = {
    id?: number
    name: string
    role: string
    email: string
    passwordHash: string
    grade?: number | null
    school?: string | null
    parentName?: string | null
    parentPhone?: string | null
    studentNo?: string | null
    createdAt?: Date | string
    enrollments?: EnrollmentUncheckedCreateNestedManyWithoutStudentInput
    teachingSessions?: SessionUncheckedCreateNestedManyWithoutTeacherInput
    attendanceRecords?: AttendanceRecordUncheckedCreateNestedManyWithoutStudentInput
    updatedAttendances?: AttendanceRecordUncheckedCreateNestedManyWithoutUpdatedByInput
    leaveRequests?: LeaveRequestUncheckedCreateNestedManyWithoutStudentInput
    makeUpSessions?: MakeUpSessionUncheckedCreateNestedManyWithoutStudentInput
    createdMakeUpSessions?: MakeUpSessionUncheckedCreateNestedManyWithoutCreatedByInput
    performances?: StudentPerformanceUncheckedCreateNestedManyWithoutStudentInput
    createdPerformances?: StudentPerformanceUncheckedCreateNestedManyWithoutCreatedByInput
  }

  export type UserCreateOrConnectWithoutApprovedLeaveRequestsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutApprovedLeaveRequestsInput, UserUncheckedCreateWithoutApprovedLeaveRequestsInput>
  }

  export type MakeUpSessionCreateWithoutLeaveRequestInput = {
    makeUpDate: Date | string
    startTime: string
    endTime: string
    attendanceStatus: string
    content?: string | null
    createdAt?: Date | string
    originalSession: SessionCreateNestedOneWithoutMakeUpSessionsInput
    student: UserCreateNestedOneWithoutMakeUpSessionsInput
    createdBy: UserCreateNestedOneWithoutCreatedMakeUpSessionsInput
  }

  export type MakeUpSessionUncheckedCreateWithoutLeaveRequestInput = {
    id?: number
    originalSessionId: number
    studentId: number
    makeUpDate: Date | string
    startTime: string
    endTime: string
    attendanceStatus: string
    content?: string | null
    createdById: number
    createdAt?: Date | string
  }

  export type MakeUpSessionCreateOrConnectWithoutLeaveRequestInput = {
    where: MakeUpSessionWhereUniqueInput
    create: XOR<MakeUpSessionCreateWithoutLeaveRequestInput, MakeUpSessionUncheckedCreateWithoutLeaveRequestInput>
  }

  export type MakeUpSessionCreateManyLeaveRequestInputEnvelope = {
    data: MakeUpSessionCreateManyLeaveRequestInput | MakeUpSessionCreateManyLeaveRequestInput[]
    skipDuplicates?: boolean
  }

  export type SessionUpsertWithoutLeaveRequestsInput = {
    update: XOR<SessionUpdateWithoutLeaveRequestsInput, SessionUncheckedUpdateWithoutLeaveRequestsInput>
    create: XOR<SessionCreateWithoutLeaveRequestsInput, SessionUncheckedCreateWithoutLeaveRequestsInput>
    where?: SessionWhereInput
  }

  export type SessionUpdateToOneWithWhereWithoutLeaveRequestsInput = {
    where?: SessionWhereInput
    data: XOR<SessionUpdateWithoutLeaveRequestsInput, SessionUncheckedUpdateWithoutLeaveRequestsInput>
  }

  export type SessionUpdateWithoutLeaveRequestsInput = {
    sessionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    course?: CourseUpdateOneRequiredWithoutSessionsNestedInput
    teacher?: UserUpdateOneWithoutTeachingSessionsNestedInput
    attendanceRecords?: AttendanceRecordUpdateManyWithoutSessionNestedInput
    performances?: StudentPerformanceUpdateManyWithoutSessionNestedInput
    makeUpSessions?: MakeUpSessionUpdateManyWithoutOriginalSessionNestedInput
  }

  export type SessionUncheckedUpdateWithoutLeaveRequestsInput = {
    id?: IntFieldUpdateOperationsInput | number
    courseId?: IntFieldUpdateOperationsInput | number
    sessionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    teacherId?: NullableIntFieldUpdateOperationsInput | number | null
    content?: NullableStringFieldUpdateOperationsInput | string | null
    attendanceRecords?: AttendanceRecordUncheckedUpdateManyWithoutSessionNestedInput
    performances?: StudentPerformanceUncheckedUpdateManyWithoutSessionNestedInput
    makeUpSessions?: MakeUpSessionUncheckedUpdateManyWithoutOriginalSessionNestedInput
  }

  export type UserUpsertWithoutLeaveRequestsInput = {
    update: XOR<UserUpdateWithoutLeaveRequestsInput, UserUncheckedUpdateWithoutLeaveRequestsInput>
    create: XOR<UserCreateWithoutLeaveRequestsInput, UserUncheckedCreateWithoutLeaveRequestsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutLeaveRequestsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutLeaveRequestsInput, UserUncheckedUpdateWithoutLeaveRequestsInput>
  }

  export type UserUpdateWithoutLeaveRequestsInput = {
    name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    grade?: NullableIntFieldUpdateOperationsInput | number | null
    school?: NullableStringFieldUpdateOperationsInput | string | null
    parentName?: NullableStringFieldUpdateOperationsInput | string | null
    parentPhone?: NullableStringFieldUpdateOperationsInput | string | null
    studentNo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    enrollments?: EnrollmentUpdateManyWithoutStudentNestedInput
    teachingSessions?: SessionUpdateManyWithoutTeacherNestedInput
    attendanceRecords?: AttendanceRecordUpdateManyWithoutStudentNestedInput
    updatedAttendances?: AttendanceRecordUpdateManyWithoutUpdatedByNestedInput
    approvedLeaveRequests?: LeaveRequestUpdateManyWithoutApprovedByNestedInput
    makeUpSessions?: MakeUpSessionUpdateManyWithoutStudentNestedInput
    createdMakeUpSessions?: MakeUpSessionUpdateManyWithoutCreatedByNestedInput
    performances?: StudentPerformanceUpdateManyWithoutStudentNestedInput
    createdPerformances?: StudentPerformanceUpdateManyWithoutCreatedByNestedInput
  }

  export type UserUncheckedUpdateWithoutLeaveRequestsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    grade?: NullableIntFieldUpdateOperationsInput | number | null
    school?: NullableStringFieldUpdateOperationsInput | string | null
    parentName?: NullableStringFieldUpdateOperationsInput | string | null
    parentPhone?: NullableStringFieldUpdateOperationsInput | string | null
    studentNo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    enrollments?: EnrollmentUncheckedUpdateManyWithoutStudentNestedInput
    teachingSessions?: SessionUncheckedUpdateManyWithoutTeacherNestedInput
    attendanceRecords?: AttendanceRecordUncheckedUpdateManyWithoutStudentNestedInput
    updatedAttendances?: AttendanceRecordUncheckedUpdateManyWithoutUpdatedByNestedInput
    approvedLeaveRequests?: LeaveRequestUncheckedUpdateManyWithoutApprovedByNestedInput
    makeUpSessions?: MakeUpSessionUncheckedUpdateManyWithoutStudentNestedInput
    createdMakeUpSessions?: MakeUpSessionUncheckedUpdateManyWithoutCreatedByNestedInput
    performances?: StudentPerformanceUncheckedUpdateManyWithoutStudentNestedInput
    createdPerformances?: StudentPerformanceUncheckedUpdateManyWithoutCreatedByNestedInput
  }

  export type UserUpsertWithoutApprovedLeaveRequestsInput = {
    update: XOR<UserUpdateWithoutApprovedLeaveRequestsInput, UserUncheckedUpdateWithoutApprovedLeaveRequestsInput>
    create: XOR<UserCreateWithoutApprovedLeaveRequestsInput, UserUncheckedCreateWithoutApprovedLeaveRequestsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutApprovedLeaveRequestsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutApprovedLeaveRequestsInput, UserUncheckedUpdateWithoutApprovedLeaveRequestsInput>
  }

  export type UserUpdateWithoutApprovedLeaveRequestsInput = {
    name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    grade?: NullableIntFieldUpdateOperationsInput | number | null
    school?: NullableStringFieldUpdateOperationsInput | string | null
    parentName?: NullableStringFieldUpdateOperationsInput | string | null
    parentPhone?: NullableStringFieldUpdateOperationsInput | string | null
    studentNo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    enrollments?: EnrollmentUpdateManyWithoutStudentNestedInput
    teachingSessions?: SessionUpdateManyWithoutTeacherNestedInput
    attendanceRecords?: AttendanceRecordUpdateManyWithoutStudentNestedInput
    updatedAttendances?: AttendanceRecordUpdateManyWithoutUpdatedByNestedInput
    leaveRequests?: LeaveRequestUpdateManyWithoutStudentNestedInput
    makeUpSessions?: MakeUpSessionUpdateManyWithoutStudentNestedInput
    createdMakeUpSessions?: MakeUpSessionUpdateManyWithoutCreatedByNestedInput
    performances?: StudentPerformanceUpdateManyWithoutStudentNestedInput
    createdPerformances?: StudentPerformanceUpdateManyWithoutCreatedByNestedInput
  }

  export type UserUncheckedUpdateWithoutApprovedLeaveRequestsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    grade?: NullableIntFieldUpdateOperationsInput | number | null
    school?: NullableStringFieldUpdateOperationsInput | string | null
    parentName?: NullableStringFieldUpdateOperationsInput | string | null
    parentPhone?: NullableStringFieldUpdateOperationsInput | string | null
    studentNo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    enrollments?: EnrollmentUncheckedUpdateManyWithoutStudentNestedInput
    teachingSessions?: SessionUncheckedUpdateManyWithoutTeacherNestedInput
    attendanceRecords?: AttendanceRecordUncheckedUpdateManyWithoutStudentNestedInput
    updatedAttendances?: AttendanceRecordUncheckedUpdateManyWithoutUpdatedByNestedInput
    leaveRequests?: LeaveRequestUncheckedUpdateManyWithoutStudentNestedInput
    makeUpSessions?: MakeUpSessionUncheckedUpdateManyWithoutStudentNestedInput
    createdMakeUpSessions?: MakeUpSessionUncheckedUpdateManyWithoutCreatedByNestedInput
    performances?: StudentPerformanceUncheckedUpdateManyWithoutStudentNestedInput
    createdPerformances?: StudentPerformanceUncheckedUpdateManyWithoutCreatedByNestedInput
  }

  export type MakeUpSessionUpsertWithWhereUniqueWithoutLeaveRequestInput = {
    where: MakeUpSessionWhereUniqueInput
    update: XOR<MakeUpSessionUpdateWithoutLeaveRequestInput, MakeUpSessionUncheckedUpdateWithoutLeaveRequestInput>
    create: XOR<MakeUpSessionCreateWithoutLeaveRequestInput, MakeUpSessionUncheckedCreateWithoutLeaveRequestInput>
  }

  export type MakeUpSessionUpdateWithWhereUniqueWithoutLeaveRequestInput = {
    where: MakeUpSessionWhereUniqueInput
    data: XOR<MakeUpSessionUpdateWithoutLeaveRequestInput, MakeUpSessionUncheckedUpdateWithoutLeaveRequestInput>
  }

  export type MakeUpSessionUpdateManyWithWhereWithoutLeaveRequestInput = {
    where: MakeUpSessionScalarWhereInput
    data: XOR<MakeUpSessionUpdateManyMutationInput, MakeUpSessionUncheckedUpdateManyWithoutLeaveRequestInput>
  }

  export type SessionCreateWithoutMakeUpSessionsInput = {
    sessionDate: Date | string
    startTime: string
    endTime: string
    content?: string | null
    course: CourseCreateNestedOneWithoutSessionsInput
    teacher?: UserCreateNestedOneWithoutTeachingSessionsInput
    attendanceRecords?: AttendanceRecordCreateNestedManyWithoutSessionInput
    performances?: StudentPerformanceCreateNestedManyWithoutSessionInput
    leaveRequests?: LeaveRequestCreateNestedManyWithoutSessionInput
  }

  export type SessionUncheckedCreateWithoutMakeUpSessionsInput = {
    id?: number
    courseId: number
    sessionDate: Date | string
    startTime: string
    endTime: string
    teacherId?: number | null
    content?: string | null
    attendanceRecords?: AttendanceRecordUncheckedCreateNestedManyWithoutSessionInput
    performances?: StudentPerformanceUncheckedCreateNestedManyWithoutSessionInput
    leaveRequests?: LeaveRequestUncheckedCreateNestedManyWithoutSessionInput
  }

  export type SessionCreateOrConnectWithoutMakeUpSessionsInput = {
    where: SessionWhereUniqueInput
    create: XOR<SessionCreateWithoutMakeUpSessionsInput, SessionUncheckedCreateWithoutMakeUpSessionsInput>
  }

  export type UserCreateWithoutMakeUpSessionsInput = {
    name: string
    role: string
    email: string
    passwordHash: string
    grade?: number | null
    school?: string | null
    parentName?: string | null
    parentPhone?: string | null
    studentNo?: string | null
    createdAt?: Date | string
    enrollments?: EnrollmentCreateNestedManyWithoutStudentInput
    teachingSessions?: SessionCreateNestedManyWithoutTeacherInput
    attendanceRecords?: AttendanceRecordCreateNestedManyWithoutStudentInput
    updatedAttendances?: AttendanceRecordCreateNestedManyWithoutUpdatedByInput
    leaveRequests?: LeaveRequestCreateNestedManyWithoutStudentInput
    approvedLeaveRequests?: LeaveRequestCreateNestedManyWithoutApprovedByInput
    createdMakeUpSessions?: MakeUpSessionCreateNestedManyWithoutCreatedByInput
    performances?: StudentPerformanceCreateNestedManyWithoutStudentInput
    createdPerformances?: StudentPerformanceCreateNestedManyWithoutCreatedByInput
  }

  export type UserUncheckedCreateWithoutMakeUpSessionsInput = {
    id?: number
    name: string
    role: string
    email: string
    passwordHash: string
    grade?: number | null
    school?: string | null
    parentName?: string | null
    parentPhone?: string | null
    studentNo?: string | null
    createdAt?: Date | string
    enrollments?: EnrollmentUncheckedCreateNestedManyWithoutStudentInput
    teachingSessions?: SessionUncheckedCreateNestedManyWithoutTeacherInput
    attendanceRecords?: AttendanceRecordUncheckedCreateNestedManyWithoutStudentInput
    updatedAttendances?: AttendanceRecordUncheckedCreateNestedManyWithoutUpdatedByInput
    leaveRequests?: LeaveRequestUncheckedCreateNestedManyWithoutStudentInput
    approvedLeaveRequests?: LeaveRequestUncheckedCreateNestedManyWithoutApprovedByInput
    createdMakeUpSessions?: MakeUpSessionUncheckedCreateNestedManyWithoutCreatedByInput
    performances?: StudentPerformanceUncheckedCreateNestedManyWithoutStudentInput
    createdPerformances?: StudentPerformanceUncheckedCreateNestedManyWithoutCreatedByInput
  }

  export type UserCreateOrConnectWithoutMakeUpSessionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutMakeUpSessionsInput, UserUncheckedCreateWithoutMakeUpSessionsInput>
  }

  export type UserCreateWithoutCreatedMakeUpSessionsInput = {
    name: string
    role: string
    email: string
    passwordHash: string
    grade?: number | null
    school?: string | null
    parentName?: string | null
    parentPhone?: string | null
    studentNo?: string | null
    createdAt?: Date | string
    enrollments?: EnrollmentCreateNestedManyWithoutStudentInput
    teachingSessions?: SessionCreateNestedManyWithoutTeacherInput
    attendanceRecords?: AttendanceRecordCreateNestedManyWithoutStudentInput
    updatedAttendances?: AttendanceRecordCreateNestedManyWithoutUpdatedByInput
    leaveRequests?: LeaveRequestCreateNestedManyWithoutStudentInput
    approvedLeaveRequests?: LeaveRequestCreateNestedManyWithoutApprovedByInput
    makeUpSessions?: MakeUpSessionCreateNestedManyWithoutStudentInput
    performances?: StudentPerformanceCreateNestedManyWithoutStudentInput
    createdPerformances?: StudentPerformanceCreateNestedManyWithoutCreatedByInput
  }

  export type UserUncheckedCreateWithoutCreatedMakeUpSessionsInput = {
    id?: number
    name: string
    role: string
    email: string
    passwordHash: string
    grade?: number | null
    school?: string | null
    parentName?: string | null
    parentPhone?: string | null
    studentNo?: string | null
    createdAt?: Date | string
    enrollments?: EnrollmentUncheckedCreateNestedManyWithoutStudentInput
    teachingSessions?: SessionUncheckedCreateNestedManyWithoutTeacherInput
    attendanceRecords?: AttendanceRecordUncheckedCreateNestedManyWithoutStudentInput
    updatedAttendances?: AttendanceRecordUncheckedCreateNestedManyWithoutUpdatedByInput
    leaveRequests?: LeaveRequestUncheckedCreateNestedManyWithoutStudentInput
    approvedLeaveRequests?: LeaveRequestUncheckedCreateNestedManyWithoutApprovedByInput
    makeUpSessions?: MakeUpSessionUncheckedCreateNestedManyWithoutStudentInput
    performances?: StudentPerformanceUncheckedCreateNestedManyWithoutStudentInput
    createdPerformances?: StudentPerformanceUncheckedCreateNestedManyWithoutCreatedByInput
  }

  export type UserCreateOrConnectWithoutCreatedMakeUpSessionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCreatedMakeUpSessionsInput, UserUncheckedCreateWithoutCreatedMakeUpSessionsInput>
  }

  export type LeaveRequestCreateWithoutMakeUpsInput = {
    reason: string
    status: string
    approvedAt?: Date | string | null
    createdAt?: Date | string
    session: SessionCreateNestedOneWithoutLeaveRequestsInput
    student: UserCreateNestedOneWithoutLeaveRequestsInput
    approvedBy?: UserCreateNestedOneWithoutApprovedLeaveRequestsInput
  }

  export type LeaveRequestUncheckedCreateWithoutMakeUpsInput = {
    id?: number
    sessionId: number
    studentId: number
    reason: string
    status: string
    approvedById?: number | null
    approvedAt?: Date | string | null
    createdAt?: Date | string
  }

  export type LeaveRequestCreateOrConnectWithoutMakeUpsInput = {
    where: LeaveRequestWhereUniqueInput
    create: XOR<LeaveRequestCreateWithoutMakeUpsInput, LeaveRequestUncheckedCreateWithoutMakeUpsInput>
  }

  export type SessionUpsertWithoutMakeUpSessionsInput = {
    update: XOR<SessionUpdateWithoutMakeUpSessionsInput, SessionUncheckedUpdateWithoutMakeUpSessionsInput>
    create: XOR<SessionCreateWithoutMakeUpSessionsInput, SessionUncheckedCreateWithoutMakeUpSessionsInput>
    where?: SessionWhereInput
  }

  export type SessionUpdateToOneWithWhereWithoutMakeUpSessionsInput = {
    where?: SessionWhereInput
    data: XOR<SessionUpdateWithoutMakeUpSessionsInput, SessionUncheckedUpdateWithoutMakeUpSessionsInput>
  }

  export type SessionUpdateWithoutMakeUpSessionsInput = {
    sessionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    course?: CourseUpdateOneRequiredWithoutSessionsNestedInput
    teacher?: UserUpdateOneWithoutTeachingSessionsNestedInput
    attendanceRecords?: AttendanceRecordUpdateManyWithoutSessionNestedInput
    performances?: StudentPerformanceUpdateManyWithoutSessionNestedInput
    leaveRequests?: LeaveRequestUpdateManyWithoutSessionNestedInput
  }

  export type SessionUncheckedUpdateWithoutMakeUpSessionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    courseId?: IntFieldUpdateOperationsInput | number
    sessionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    teacherId?: NullableIntFieldUpdateOperationsInput | number | null
    content?: NullableStringFieldUpdateOperationsInput | string | null
    attendanceRecords?: AttendanceRecordUncheckedUpdateManyWithoutSessionNestedInput
    performances?: StudentPerformanceUncheckedUpdateManyWithoutSessionNestedInput
    leaveRequests?: LeaveRequestUncheckedUpdateManyWithoutSessionNestedInput
  }

  export type UserUpsertWithoutMakeUpSessionsInput = {
    update: XOR<UserUpdateWithoutMakeUpSessionsInput, UserUncheckedUpdateWithoutMakeUpSessionsInput>
    create: XOR<UserCreateWithoutMakeUpSessionsInput, UserUncheckedCreateWithoutMakeUpSessionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutMakeUpSessionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutMakeUpSessionsInput, UserUncheckedUpdateWithoutMakeUpSessionsInput>
  }

  export type UserUpdateWithoutMakeUpSessionsInput = {
    name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    grade?: NullableIntFieldUpdateOperationsInput | number | null
    school?: NullableStringFieldUpdateOperationsInput | string | null
    parentName?: NullableStringFieldUpdateOperationsInput | string | null
    parentPhone?: NullableStringFieldUpdateOperationsInput | string | null
    studentNo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    enrollments?: EnrollmentUpdateManyWithoutStudentNestedInput
    teachingSessions?: SessionUpdateManyWithoutTeacherNestedInput
    attendanceRecords?: AttendanceRecordUpdateManyWithoutStudentNestedInput
    updatedAttendances?: AttendanceRecordUpdateManyWithoutUpdatedByNestedInput
    leaveRequests?: LeaveRequestUpdateManyWithoutStudentNestedInput
    approvedLeaveRequests?: LeaveRequestUpdateManyWithoutApprovedByNestedInput
    createdMakeUpSessions?: MakeUpSessionUpdateManyWithoutCreatedByNestedInput
    performances?: StudentPerformanceUpdateManyWithoutStudentNestedInput
    createdPerformances?: StudentPerformanceUpdateManyWithoutCreatedByNestedInput
  }

  export type UserUncheckedUpdateWithoutMakeUpSessionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    grade?: NullableIntFieldUpdateOperationsInput | number | null
    school?: NullableStringFieldUpdateOperationsInput | string | null
    parentName?: NullableStringFieldUpdateOperationsInput | string | null
    parentPhone?: NullableStringFieldUpdateOperationsInput | string | null
    studentNo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    enrollments?: EnrollmentUncheckedUpdateManyWithoutStudentNestedInput
    teachingSessions?: SessionUncheckedUpdateManyWithoutTeacherNestedInput
    attendanceRecords?: AttendanceRecordUncheckedUpdateManyWithoutStudentNestedInput
    updatedAttendances?: AttendanceRecordUncheckedUpdateManyWithoutUpdatedByNestedInput
    leaveRequests?: LeaveRequestUncheckedUpdateManyWithoutStudentNestedInput
    approvedLeaveRequests?: LeaveRequestUncheckedUpdateManyWithoutApprovedByNestedInput
    createdMakeUpSessions?: MakeUpSessionUncheckedUpdateManyWithoutCreatedByNestedInput
    performances?: StudentPerformanceUncheckedUpdateManyWithoutStudentNestedInput
    createdPerformances?: StudentPerformanceUncheckedUpdateManyWithoutCreatedByNestedInput
  }

  export type UserUpsertWithoutCreatedMakeUpSessionsInput = {
    update: XOR<UserUpdateWithoutCreatedMakeUpSessionsInput, UserUncheckedUpdateWithoutCreatedMakeUpSessionsInput>
    create: XOR<UserCreateWithoutCreatedMakeUpSessionsInput, UserUncheckedCreateWithoutCreatedMakeUpSessionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCreatedMakeUpSessionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCreatedMakeUpSessionsInput, UserUncheckedUpdateWithoutCreatedMakeUpSessionsInput>
  }

  export type UserUpdateWithoutCreatedMakeUpSessionsInput = {
    name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    grade?: NullableIntFieldUpdateOperationsInput | number | null
    school?: NullableStringFieldUpdateOperationsInput | string | null
    parentName?: NullableStringFieldUpdateOperationsInput | string | null
    parentPhone?: NullableStringFieldUpdateOperationsInput | string | null
    studentNo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    enrollments?: EnrollmentUpdateManyWithoutStudentNestedInput
    teachingSessions?: SessionUpdateManyWithoutTeacherNestedInput
    attendanceRecords?: AttendanceRecordUpdateManyWithoutStudentNestedInput
    updatedAttendances?: AttendanceRecordUpdateManyWithoutUpdatedByNestedInput
    leaveRequests?: LeaveRequestUpdateManyWithoutStudentNestedInput
    approvedLeaveRequests?: LeaveRequestUpdateManyWithoutApprovedByNestedInput
    makeUpSessions?: MakeUpSessionUpdateManyWithoutStudentNestedInput
    performances?: StudentPerformanceUpdateManyWithoutStudentNestedInput
    createdPerformances?: StudentPerformanceUpdateManyWithoutCreatedByNestedInput
  }

  export type UserUncheckedUpdateWithoutCreatedMakeUpSessionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    grade?: NullableIntFieldUpdateOperationsInput | number | null
    school?: NullableStringFieldUpdateOperationsInput | string | null
    parentName?: NullableStringFieldUpdateOperationsInput | string | null
    parentPhone?: NullableStringFieldUpdateOperationsInput | string | null
    studentNo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    enrollments?: EnrollmentUncheckedUpdateManyWithoutStudentNestedInput
    teachingSessions?: SessionUncheckedUpdateManyWithoutTeacherNestedInput
    attendanceRecords?: AttendanceRecordUncheckedUpdateManyWithoutStudentNestedInput
    updatedAttendances?: AttendanceRecordUncheckedUpdateManyWithoutUpdatedByNestedInput
    leaveRequests?: LeaveRequestUncheckedUpdateManyWithoutStudentNestedInput
    approvedLeaveRequests?: LeaveRequestUncheckedUpdateManyWithoutApprovedByNestedInput
    makeUpSessions?: MakeUpSessionUncheckedUpdateManyWithoutStudentNestedInput
    performances?: StudentPerformanceUncheckedUpdateManyWithoutStudentNestedInput
    createdPerformances?: StudentPerformanceUncheckedUpdateManyWithoutCreatedByNestedInput
  }

  export type LeaveRequestUpsertWithoutMakeUpsInput = {
    update: XOR<LeaveRequestUpdateWithoutMakeUpsInput, LeaveRequestUncheckedUpdateWithoutMakeUpsInput>
    create: XOR<LeaveRequestCreateWithoutMakeUpsInput, LeaveRequestUncheckedCreateWithoutMakeUpsInput>
    where?: LeaveRequestWhereInput
  }

  export type LeaveRequestUpdateToOneWithWhereWithoutMakeUpsInput = {
    where?: LeaveRequestWhereInput
    data: XOR<LeaveRequestUpdateWithoutMakeUpsInput, LeaveRequestUncheckedUpdateWithoutMakeUpsInput>
  }

  export type LeaveRequestUpdateWithoutMakeUpsInput = {
    reason?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    session?: SessionUpdateOneRequiredWithoutLeaveRequestsNestedInput
    student?: UserUpdateOneRequiredWithoutLeaveRequestsNestedInput
    approvedBy?: UserUpdateOneWithoutApprovedLeaveRequestsNestedInput
  }

  export type LeaveRequestUncheckedUpdateWithoutMakeUpsInput = {
    id?: IntFieldUpdateOperationsInput | number
    sessionId?: IntFieldUpdateOperationsInput | number
    studentId?: IntFieldUpdateOperationsInput | number
    reason?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    approvedById?: NullableIntFieldUpdateOperationsInput | number | null
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionCreateWithoutPerformancesInput = {
    sessionDate: Date | string
    startTime: string
    endTime: string
    content?: string | null
    course: CourseCreateNestedOneWithoutSessionsInput
    teacher?: UserCreateNestedOneWithoutTeachingSessionsInput
    attendanceRecords?: AttendanceRecordCreateNestedManyWithoutSessionInput
    leaveRequests?: LeaveRequestCreateNestedManyWithoutSessionInput
    makeUpSessions?: MakeUpSessionCreateNestedManyWithoutOriginalSessionInput
  }

  export type SessionUncheckedCreateWithoutPerformancesInput = {
    id?: number
    courseId: number
    sessionDate: Date | string
    startTime: string
    endTime: string
    teacherId?: number | null
    content?: string | null
    attendanceRecords?: AttendanceRecordUncheckedCreateNestedManyWithoutSessionInput
    leaveRequests?: LeaveRequestUncheckedCreateNestedManyWithoutSessionInput
    makeUpSessions?: MakeUpSessionUncheckedCreateNestedManyWithoutOriginalSessionInput
  }

  export type SessionCreateOrConnectWithoutPerformancesInput = {
    where: SessionWhereUniqueInput
    create: XOR<SessionCreateWithoutPerformancesInput, SessionUncheckedCreateWithoutPerformancesInput>
  }

  export type UserCreateWithoutPerformancesInput = {
    name: string
    role: string
    email: string
    passwordHash: string
    grade?: number | null
    school?: string | null
    parentName?: string | null
    parentPhone?: string | null
    studentNo?: string | null
    createdAt?: Date | string
    enrollments?: EnrollmentCreateNestedManyWithoutStudentInput
    teachingSessions?: SessionCreateNestedManyWithoutTeacherInput
    attendanceRecords?: AttendanceRecordCreateNestedManyWithoutStudentInput
    updatedAttendances?: AttendanceRecordCreateNestedManyWithoutUpdatedByInput
    leaveRequests?: LeaveRequestCreateNestedManyWithoutStudentInput
    approvedLeaveRequests?: LeaveRequestCreateNestedManyWithoutApprovedByInput
    makeUpSessions?: MakeUpSessionCreateNestedManyWithoutStudentInput
    createdMakeUpSessions?: MakeUpSessionCreateNestedManyWithoutCreatedByInput
    createdPerformances?: StudentPerformanceCreateNestedManyWithoutCreatedByInput
  }

  export type UserUncheckedCreateWithoutPerformancesInput = {
    id?: number
    name: string
    role: string
    email: string
    passwordHash: string
    grade?: number | null
    school?: string | null
    parentName?: string | null
    parentPhone?: string | null
    studentNo?: string | null
    createdAt?: Date | string
    enrollments?: EnrollmentUncheckedCreateNestedManyWithoutStudentInput
    teachingSessions?: SessionUncheckedCreateNestedManyWithoutTeacherInput
    attendanceRecords?: AttendanceRecordUncheckedCreateNestedManyWithoutStudentInput
    updatedAttendances?: AttendanceRecordUncheckedCreateNestedManyWithoutUpdatedByInput
    leaveRequests?: LeaveRequestUncheckedCreateNestedManyWithoutStudentInput
    approvedLeaveRequests?: LeaveRequestUncheckedCreateNestedManyWithoutApprovedByInput
    makeUpSessions?: MakeUpSessionUncheckedCreateNestedManyWithoutStudentInput
    createdMakeUpSessions?: MakeUpSessionUncheckedCreateNestedManyWithoutCreatedByInput
    createdPerformances?: StudentPerformanceUncheckedCreateNestedManyWithoutCreatedByInput
  }

  export type UserCreateOrConnectWithoutPerformancesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPerformancesInput, UserUncheckedCreateWithoutPerformancesInput>
  }

  export type UserCreateWithoutCreatedPerformancesInput = {
    name: string
    role: string
    email: string
    passwordHash: string
    grade?: number | null
    school?: string | null
    parentName?: string | null
    parentPhone?: string | null
    studentNo?: string | null
    createdAt?: Date | string
    enrollments?: EnrollmentCreateNestedManyWithoutStudentInput
    teachingSessions?: SessionCreateNestedManyWithoutTeacherInput
    attendanceRecords?: AttendanceRecordCreateNestedManyWithoutStudentInput
    updatedAttendances?: AttendanceRecordCreateNestedManyWithoutUpdatedByInput
    leaveRequests?: LeaveRequestCreateNestedManyWithoutStudentInput
    approvedLeaveRequests?: LeaveRequestCreateNestedManyWithoutApprovedByInput
    makeUpSessions?: MakeUpSessionCreateNestedManyWithoutStudentInput
    createdMakeUpSessions?: MakeUpSessionCreateNestedManyWithoutCreatedByInput
    performances?: StudentPerformanceCreateNestedManyWithoutStudentInput
  }

  export type UserUncheckedCreateWithoutCreatedPerformancesInput = {
    id?: number
    name: string
    role: string
    email: string
    passwordHash: string
    grade?: number | null
    school?: string | null
    parentName?: string | null
    parentPhone?: string | null
    studentNo?: string | null
    createdAt?: Date | string
    enrollments?: EnrollmentUncheckedCreateNestedManyWithoutStudentInput
    teachingSessions?: SessionUncheckedCreateNestedManyWithoutTeacherInput
    attendanceRecords?: AttendanceRecordUncheckedCreateNestedManyWithoutStudentInput
    updatedAttendances?: AttendanceRecordUncheckedCreateNestedManyWithoutUpdatedByInput
    leaveRequests?: LeaveRequestUncheckedCreateNestedManyWithoutStudentInput
    approvedLeaveRequests?: LeaveRequestUncheckedCreateNestedManyWithoutApprovedByInput
    makeUpSessions?: MakeUpSessionUncheckedCreateNestedManyWithoutStudentInput
    createdMakeUpSessions?: MakeUpSessionUncheckedCreateNestedManyWithoutCreatedByInput
    performances?: StudentPerformanceUncheckedCreateNestedManyWithoutStudentInput
  }

  export type UserCreateOrConnectWithoutCreatedPerformancesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCreatedPerformancesInput, UserUncheckedCreateWithoutCreatedPerformancesInput>
  }

  export type SessionUpsertWithoutPerformancesInput = {
    update: XOR<SessionUpdateWithoutPerformancesInput, SessionUncheckedUpdateWithoutPerformancesInput>
    create: XOR<SessionCreateWithoutPerformancesInput, SessionUncheckedCreateWithoutPerformancesInput>
    where?: SessionWhereInput
  }

  export type SessionUpdateToOneWithWhereWithoutPerformancesInput = {
    where?: SessionWhereInput
    data: XOR<SessionUpdateWithoutPerformancesInput, SessionUncheckedUpdateWithoutPerformancesInput>
  }

  export type SessionUpdateWithoutPerformancesInput = {
    sessionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    course?: CourseUpdateOneRequiredWithoutSessionsNestedInput
    teacher?: UserUpdateOneWithoutTeachingSessionsNestedInput
    attendanceRecords?: AttendanceRecordUpdateManyWithoutSessionNestedInput
    leaveRequests?: LeaveRequestUpdateManyWithoutSessionNestedInput
    makeUpSessions?: MakeUpSessionUpdateManyWithoutOriginalSessionNestedInput
  }

  export type SessionUncheckedUpdateWithoutPerformancesInput = {
    id?: IntFieldUpdateOperationsInput | number
    courseId?: IntFieldUpdateOperationsInput | number
    sessionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    teacherId?: NullableIntFieldUpdateOperationsInput | number | null
    content?: NullableStringFieldUpdateOperationsInput | string | null
    attendanceRecords?: AttendanceRecordUncheckedUpdateManyWithoutSessionNestedInput
    leaveRequests?: LeaveRequestUncheckedUpdateManyWithoutSessionNestedInput
    makeUpSessions?: MakeUpSessionUncheckedUpdateManyWithoutOriginalSessionNestedInput
  }

  export type UserUpsertWithoutPerformancesInput = {
    update: XOR<UserUpdateWithoutPerformancesInput, UserUncheckedUpdateWithoutPerformancesInput>
    create: XOR<UserCreateWithoutPerformancesInput, UserUncheckedCreateWithoutPerformancesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutPerformancesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutPerformancesInput, UserUncheckedUpdateWithoutPerformancesInput>
  }

  export type UserUpdateWithoutPerformancesInput = {
    name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    grade?: NullableIntFieldUpdateOperationsInput | number | null
    school?: NullableStringFieldUpdateOperationsInput | string | null
    parentName?: NullableStringFieldUpdateOperationsInput | string | null
    parentPhone?: NullableStringFieldUpdateOperationsInput | string | null
    studentNo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    enrollments?: EnrollmentUpdateManyWithoutStudentNestedInput
    teachingSessions?: SessionUpdateManyWithoutTeacherNestedInput
    attendanceRecords?: AttendanceRecordUpdateManyWithoutStudentNestedInput
    updatedAttendances?: AttendanceRecordUpdateManyWithoutUpdatedByNestedInput
    leaveRequests?: LeaveRequestUpdateManyWithoutStudentNestedInput
    approvedLeaveRequests?: LeaveRequestUpdateManyWithoutApprovedByNestedInput
    makeUpSessions?: MakeUpSessionUpdateManyWithoutStudentNestedInput
    createdMakeUpSessions?: MakeUpSessionUpdateManyWithoutCreatedByNestedInput
    createdPerformances?: StudentPerformanceUpdateManyWithoutCreatedByNestedInput
  }

  export type UserUncheckedUpdateWithoutPerformancesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    grade?: NullableIntFieldUpdateOperationsInput | number | null
    school?: NullableStringFieldUpdateOperationsInput | string | null
    parentName?: NullableStringFieldUpdateOperationsInput | string | null
    parentPhone?: NullableStringFieldUpdateOperationsInput | string | null
    studentNo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    enrollments?: EnrollmentUncheckedUpdateManyWithoutStudentNestedInput
    teachingSessions?: SessionUncheckedUpdateManyWithoutTeacherNestedInput
    attendanceRecords?: AttendanceRecordUncheckedUpdateManyWithoutStudentNestedInput
    updatedAttendances?: AttendanceRecordUncheckedUpdateManyWithoutUpdatedByNestedInput
    leaveRequests?: LeaveRequestUncheckedUpdateManyWithoutStudentNestedInput
    approvedLeaveRequests?: LeaveRequestUncheckedUpdateManyWithoutApprovedByNestedInput
    makeUpSessions?: MakeUpSessionUncheckedUpdateManyWithoutStudentNestedInput
    createdMakeUpSessions?: MakeUpSessionUncheckedUpdateManyWithoutCreatedByNestedInput
    createdPerformances?: StudentPerformanceUncheckedUpdateManyWithoutCreatedByNestedInput
  }

  export type UserUpsertWithoutCreatedPerformancesInput = {
    update: XOR<UserUpdateWithoutCreatedPerformancesInput, UserUncheckedUpdateWithoutCreatedPerformancesInput>
    create: XOR<UserCreateWithoutCreatedPerformancesInput, UserUncheckedCreateWithoutCreatedPerformancesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCreatedPerformancesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCreatedPerformancesInput, UserUncheckedUpdateWithoutCreatedPerformancesInput>
  }

  export type UserUpdateWithoutCreatedPerformancesInput = {
    name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    grade?: NullableIntFieldUpdateOperationsInput | number | null
    school?: NullableStringFieldUpdateOperationsInput | string | null
    parentName?: NullableStringFieldUpdateOperationsInput | string | null
    parentPhone?: NullableStringFieldUpdateOperationsInput | string | null
    studentNo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    enrollments?: EnrollmentUpdateManyWithoutStudentNestedInput
    teachingSessions?: SessionUpdateManyWithoutTeacherNestedInput
    attendanceRecords?: AttendanceRecordUpdateManyWithoutStudentNestedInput
    updatedAttendances?: AttendanceRecordUpdateManyWithoutUpdatedByNestedInput
    leaveRequests?: LeaveRequestUpdateManyWithoutStudentNestedInput
    approvedLeaveRequests?: LeaveRequestUpdateManyWithoutApprovedByNestedInput
    makeUpSessions?: MakeUpSessionUpdateManyWithoutStudentNestedInput
    createdMakeUpSessions?: MakeUpSessionUpdateManyWithoutCreatedByNestedInput
    performances?: StudentPerformanceUpdateManyWithoutStudentNestedInput
  }

  export type UserUncheckedUpdateWithoutCreatedPerformancesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    grade?: NullableIntFieldUpdateOperationsInput | number | null
    school?: NullableStringFieldUpdateOperationsInput | string | null
    parentName?: NullableStringFieldUpdateOperationsInput | string | null
    parentPhone?: NullableStringFieldUpdateOperationsInput | string | null
    studentNo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    enrollments?: EnrollmentUncheckedUpdateManyWithoutStudentNestedInput
    teachingSessions?: SessionUncheckedUpdateManyWithoutTeacherNestedInput
    attendanceRecords?: AttendanceRecordUncheckedUpdateManyWithoutStudentNestedInput
    updatedAttendances?: AttendanceRecordUncheckedUpdateManyWithoutUpdatedByNestedInput
    leaveRequests?: LeaveRequestUncheckedUpdateManyWithoutStudentNestedInput
    approvedLeaveRequests?: LeaveRequestUncheckedUpdateManyWithoutApprovedByNestedInput
    makeUpSessions?: MakeUpSessionUncheckedUpdateManyWithoutStudentNestedInput
    createdMakeUpSessions?: MakeUpSessionUncheckedUpdateManyWithoutCreatedByNestedInput
    performances?: StudentPerformanceUncheckedUpdateManyWithoutStudentNestedInput
  }

  export type EnrollmentCreateManyStudentInput = {
    id?: number
    courseId: number
  }

  export type SessionCreateManyTeacherInput = {
    id?: number
    courseId: number
    sessionDate: Date | string
    startTime: string
    endTime: string
    content?: string | null
  }

  export type AttendanceRecordCreateManyStudentInput = {
    id?: number
    sessionId: number
    status: string
    note?: string | null
    updatedById: number
    updatedAt?: Date | string
  }

  export type AttendanceRecordCreateManyUpdatedByInput = {
    id?: number
    sessionId: number
    studentId: number
    status: string
    note?: string | null
    updatedAt?: Date | string
  }

  export type LeaveRequestCreateManyStudentInput = {
    id?: number
    sessionId: number
    reason: string
    status: string
    approvedById?: number | null
    approvedAt?: Date | string | null
    createdAt?: Date | string
  }

  export type LeaveRequestCreateManyApprovedByInput = {
    id?: number
    sessionId: number
    studentId: number
    reason: string
    status: string
    approvedAt?: Date | string | null
    createdAt?: Date | string
  }

  export type MakeUpSessionCreateManyStudentInput = {
    id?: number
    originalSessionId: number
    makeUpDate: Date | string
    startTime: string
    endTime: string
    attendanceStatus: string
    content?: string | null
    createdById: number
    createdAt?: Date | string
    leaveRequestId?: number | null
  }

  export type MakeUpSessionCreateManyCreatedByInput = {
    id?: number
    originalSessionId: number
    studentId: number
    makeUpDate: Date | string
    startTime: string
    endTime: string
    attendanceStatus: string
    content?: string | null
    createdAt?: Date | string
    leaveRequestId?: number | null
  }

  export type StudentPerformanceCreateManyStudentInput = {
    id?: number
    sessionId: number
    performance: string
    createdById: number
    createdAt?: Date | string
  }

  export type StudentPerformanceCreateManyCreatedByInput = {
    id?: number
    sessionId: number
    studentId: number
    performance: string
    createdAt?: Date | string
  }

  export type EnrollmentUpdateWithoutStudentInput = {
    course?: CourseUpdateOneRequiredWithoutEnrollmentsNestedInput
  }

  export type EnrollmentUncheckedUpdateWithoutStudentInput = {
    id?: IntFieldUpdateOperationsInput | number
    courseId?: IntFieldUpdateOperationsInput | number
  }

  export type EnrollmentUncheckedUpdateManyWithoutStudentInput = {
    id?: IntFieldUpdateOperationsInput | number
    courseId?: IntFieldUpdateOperationsInput | number
  }

  export type SessionUpdateWithoutTeacherInput = {
    sessionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    course?: CourseUpdateOneRequiredWithoutSessionsNestedInput
    attendanceRecords?: AttendanceRecordUpdateManyWithoutSessionNestedInput
    performances?: StudentPerformanceUpdateManyWithoutSessionNestedInput
    leaveRequests?: LeaveRequestUpdateManyWithoutSessionNestedInput
    makeUpSessions?: MakeUpSessionUpdateManyWithoutOriginalSessionNestedInput
  }

  export type SessionUncheckedUpdateWithoutTeacherInput = {
    id?: IntFieldUpdateOperationsInput | number
    courseId?: IntFieldUpdateOperationsInput | number
    sessionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    attendanceRecords?: AttendanceRecordUncheckedUpdateManyWithoutSessionNestedInput
    performances?: StudentPerformanceUncheckedUpdateManyWithoutSessionNestedInput
    leaveRequests?: LeaveRequestUncheckedUpdateManyWithoutSessionNestedInput
    makeUpSessions?: MakeUpSessionUncheckedUpdateManyWithoutOriginalSessionNestedInput
  }

  export type SessionUncheckedUpdateManyWithoutTeacherInput = {
    id?: IntFieldUpdateOperationsInput | number
    courseId?: IntFieldUpdateOperationsInput | number
    sessionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AttendanceRecordUpdateWithoutStudentInput = {
    status?: StringFieldUpdateOperationsInput | string
    note?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    session?: SessionUpdateOneRequiredWithoutAttendanceRecordsNestedInput
    updatedBy?: UserUpdateOneRequiredWithoutUpdatedAttendancesNestedInput
  }

  export type AttendanceRecordUncheckedUpdateWithoutStudentInput = {
    id?: IntFieldUpdateOperationsInput | number
    sessionId?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    note?: NullableStringFieldUpdateOperationsInput | string | null
    updatedById?: IntFieldUpdateOperationsInput | number
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AttendanceRecordUncheckedUpdateManyWithoutStudentInput = {
    id?: IntFieldUpdateOperationsInput | number
    sessionId?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    note?: NullableStringFieldUpdateOperationsInput | string | null
    updatedById?: IntFieldUpdateOperationsInput | number
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AttendanceRecordUpdateWithoutUpdatedByInput = {
    status?: StringFieldUpdateOperationsInput | string
    note?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    session?: SessionUpdateOneRequiredWithoutAttendanceRecordsNestedInput
    student?: UserUpdateOneRequiredWithoutAttendanceRecordsNestedInput
  }

  export type AttendanceRecordUncheckedUpdateWithoutUpdatedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    sessionId?: IntFieldUpdateOperationsInput | number
    studentId?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    note?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AttendanceRecordUncheckedUpdateManyWithoutUpdatedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    sessionId?: IntFieldUpdateOperationsInput | number
    studentId?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    note?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LeaveRequestUpdateWithoutStudentInput = {
    reason?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    session?: SessionUpdateOneRequiredWithoutLeaveRequestsNestedInput
    approvedBy?: UserUpdateOneWithoutApprovedLeaveRequestsNestedInput
    makeUps?: MakeUpSessionUpdateManyWithoutLeaveRequestNestedInput
  }

  export type LeaveRequestUncheckedUpdateWithoutStudentInput = {
    id?: IntFieldUpdateOperationsInput | number
    sessionId?: IntFieldUpdateOperationsInput | number
    reason?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    approvedById?: NullableIntFieldUpdateOperationsInput | number | null
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    makeUps?: MakeUpSessionUncheckedUpdateManyWithoutLeaveRequestNestedInput
  }

  export type LeaveRequestUncheckedUpdateManyWithoutStudentInput = {
    id?: IntFieldUpdateOperationsInput | number
    sessionId?: IntFieldUpdateOperationsInput | number
    reason?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    approvedById?: NullableIntFieldUpdateOperationsInput | number | null
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LeaveRequestUpdateWithoutApprovedByInput = {
    reason?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    session?: SessionUpdateOneRequiredWithoutLeaveRequestsNestedInput
    student?: UserUpdateOneRequiredWithoutLeaveRequestsNestedInput
    makeUps?: MakeUpSessionUpdateManyWithoutLeaveRequestNestedInput
  }

  export type LeaveRequestUncheckedUpdateWithoutApprovedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    sessionId?: IntFieldUpdateOperationsInput | number
    studentId?: IntFieldUpdateOperationsInput | number
    reason?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    makeUps?: MakeUpSessionUncheckedUpdateManyWithoutLeaveRequestNestedInput
  }

  export type LeaveRequestUncheckedUpdateManyWithoutApprovedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    sessionId?: IntFieldUpdateOperationsInput | number
    studentId?: IntFieldUpdateOperationsInput | number
    reason?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MakeUpSessionUpdateWithoutStudentInput = {
    makeUpDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    attendanceStatus?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    originalSession?: SessionUpdateOneRequiredWithoutMakeUpSessionsNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedMakeUpSessionsNestedInput
    leaveRequest?: LeaveRequestUpdateOneWithoutMakeUpsNestedInput
  }

  export type MakeUpSessionUncheckedUpdateWithoutStudentInput = {
    id?: IntFieldUpdateOperationsInput | number
    originalSessionId?: IntFieldUpdateOperationsInput | number
    makeUpDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    attendanceStatus?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    leaveRequestId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type MakeUpSessionUncheckedUpdateManyWithoutStudentInput = {
    id?: IntFieldUpdateOperationsInput | number
    originalSessionId?: IntFieldUpdateOperationsInput | number
    makeUpDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    attendanceStatus?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    leaveRequestId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type MakeUpSessionUpdateWithoutCreatedByInput = {
    makeUpDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    attendanceStatus?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    originalSession?: SessionUpdateOneRequiredWithoutMakeUpSessionsNestedInput
    student?: UserUpdateOneRequiredWithoutMakeUpSessionsNestedInput
    leaveRequest?: LeaveRequestUpdateOneWithoutMakeUpsNestedInput
  }

  export type MakeUpSessionUncheckedUpdateWithoutCreatedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    originalSessionId?: IntFieldUpdateOperationsInput | number
    studentId?: IntFieldUpdateOperationsInput | number
    makeUpDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    attendanceStatus?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    leaveRequestId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type MakeUpSessionUncheckedUpdateManyWithoutCreatedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    originalSessionId?: IntFieldUpdateOperationsInput | number
    studentId?: IntFieldUpdateOperationsInput | number
    makeUpDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    attendanceStatus?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    leaveRequestId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type StudentPerformanceUpdateWithoutStudentInput = {
    performance?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    session?: SessionUpdateOneRequiredWithoutPerformancesNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedPerformancesNestedInput
  }

  export type StudentPerformanceUncheckedUpdateWithoutStudentInput = {
    id?: IntFieldUpdateOperationsInput | number
    sessionId?: IntFieldUpdateOperationsInput | number
    performance?: StringFieldUpdateOperationsInput | string
    createdById?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StudentPerformanceUncheckedUpdateManyWithoutStudentInput = {
    id?: IntFieldUpdateOperationsInput | number
    sessionId?: IntFieldUpdateOperationsInput | number
    performance?: StringFieldUpdateOperationsInput | string
    createdById?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StudentPerformanceUpdateWithoutCreatedByInput = {
    performance?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    session?: SessionUpdateOneRequiredWithoutPerformancesNestedInput
    student?: UserUpdateOneRequiredWithoutPerformancesNestedInput
  }

  export type StudentPerformanceUncheckedUpdateWithoutCreatedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    sessionId?: IntFieldUpdateOperationsInput | number
    studentId?: IntFieldUpdateOperationsInput | number
    performance?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StudentPerformanceUncheckedUpdateManyWithoutCreatedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    sessionId?: IntFieldUpdateOperationsInput | number
    studentId?: IntFieldUpdateOperationsInput | number
    performance?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EnrollmentCreateManyCourseInput = {
    id?: number
    studentId: number
  }

  export type SessionCreateManyCourseInput = {
    id?: number
    sessionDate: Date | string
    startTime: string
    endTime: string
    teacherId?: number | null
    content?: string | null
  }

  export type EnrollmentUpdateWithoutCourseInput = {
    student?: UserUpdateOneRequiredWithoutEnrollmentsNestedInput
  }

  export type EnrollmentUncheckedUpdateWithoutCourseInput = {
    id?: IntFieldUpdateOperationsInput | number
    studentId?: IntFieldUpdateOperationsInput | number
  }

  export type EnrollmentUncheckedUpdateManyWithoutCourseInput = {
    id?: IntFieldUpdateOperationsInput | number
    studentId?: IntFieldUpdateOperationsInput | number
  }

  export type SessionUpdateWithoutCourseInput = {
    sessionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    teacher?: UserUpdateOneWithoutTeachingSessionsNestedInput
    attendanceRecords?: AttendanceRecordUpdateManyWithoutSessionNestedInput
    performances?: StudentPerformanceUpdateManyWithoutSessionNestedInput
    leaveRequests?: LeaveRequestUpdateManyWithoutSessionNestedInput
    makeUpSessions?: MakeUpSessionUpdateManyWithoutOriginalSessionNestedInput
  }

  export type SessionUncheckedUpdateWithoutCourseInput = {
    id?: IntFieldUpdateOperationsInput | number
    sessionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    teacherId?: NullableIntFieldUpdateOperationsInput | number | null
    content?: NullableStringFieldUpdateOperationsInput | string | null
    attendanceRecords?: AttendanceRecordUncheckedUpdateManyWithoutSessionNestedInput
    performances?: StudentPerformanceUncheckedUpdateManyWithoutSessionNestedInput
    leaveRequests?: LeaveRequestUncheckedUpdateManyWithoutSessionNestedInput
    makeUpSessions?: MakeUpSessionUncheckedUpdateManyWithoutOriginalSessionNestedInput
  }

  export type SessionUncheckedUpdateManyWithoutCourseInput = {
    id?: IntFieldUpdateOperationsInput | number
    sessionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    teacherId?: NullableIntFieldUpdateOperationsInput | number | null
    content?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AttendanceRecordCreateManySessionInput = {
    id?: number
    studentId: number
    status: string
    note?: string | null
    updatedById: number
    updatedAt?: Date | string
  }

  export type StudentPerformanceCreateManySessionInput = {
    id?: number
    studentId: number
    performance: string
    createdById: number
    createdAt?: Date | string
  }

  export type LeaveRequestCreateManySessionInput = {
    id?: number
    studentId: number
    reason: string
    status: string
    approvedById?: number | null
    approvedAt?: Date | string | null
    createdAt?: Date | string
  }

  export type MakeUpSessionCreateManyOriginalSessionInput = {
    id?: number
    studentId: number
    makeUpDate: Date | string
    startTime: string
    endTime: string
    attendanceStatus: string
    content?: string | null
    createdById: number
    createdAt?: Date | string
    leaveRequestId?: number | null
  }

  export type AttendanceRecordUpdateWithoutSessionInput = {
    status?: StringFieldUpdateOperationsInput | string
    note?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    student?: UserUpdateOneRequiredWithoutAttendanceRecordsNestedInput
    updatedBy?: UserUpdateOneRequiredWithoutUpdatedAttendancesNestedInput
  }

  export type AttendanceRecordUncheckedUpdateWithoutSessionInput = {
    id?: IntFieldUpdateOperationsInput | number
    studentId?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    note?: NullableStringFieldUpdateOperationsInput | string | null
    updatedById?: IntFieldUpdateOperationsInput | number
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AttendanceRecordUncheckedUpdateManyWithoutSessionInput = {
    id?: IntFieldUpdateOperationsInput | number
    studentId?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    note?: NullableStringFieldUpdateOperationsInput | string | null
    updatedById?: IntFieldUpdateOperationsInput | number
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StudentPerformanceUpdateWithoutSessionInput = {
    performance?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    student?: UserUpdateOneRequiredWithoutPerformancesNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedPerformancesNestedInput
  }

  export type StudentPerformanceUncheckedUpdateWithoutSessionInput = {
    id?: IntFieldUpdateOperationsInput | number
    studentId?: IntFieldUpdateOperationsInput | number
    performance?: StringFieldUpdateOperationsInput | string
    createdById?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StudentPerformanceUncheckedUpdateManyWithoutSessionInput = {
    id?: IntFieldUpdateOperationsInput | number
    studentId?: IntFieldUpdateOperationsInput | number
    performance?: StringFieldUpdateOperationsInput | string
    createdById?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LeaveRequestUpdateWithoutSessionInput = {
    reason?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    student?: UserUpdateOneRequiredWithoutLeaveRequestsNestedInput
    approvedBy?: UserUpdateOneWithoutApprovedLeaveRequestsNestedInput
    makeUps?: MakeUpSessionUpdateManyWithoutLeaveRequestNestedInput
  }

  export type LeaveRequestUncheckedUpdateWithoutSessionInput = {
    id?: IntFieldUpdateOperationsInput | number
    studentId?: IntFieldUpdateOperationsInput | number
    reason?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    approvedById?: NullableIntFieldUpdateOperationsInput | number | null
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    makeUps?: MakeUpSessionUncheckedUpdateManyWithoutLeaveRequestNestedInput
  }

  export type LeaveRequestUncheckedUpdateManyWithoutSessionInput = {
    id?: IntFieldUpdateOperationsInput | number
    studentId?: IntFieldUpdateOperationsInput | number
    reason?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    approvedById?: NullableIntFieldUpdateOperationsInput | number | null
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MakeUpSessionUpdateWithoutOriginalSessionInput = {
    makeUpDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    attendanceStatus?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    student?: UserUpdateOneRequiredWithoutMakeUpSessionsNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedMakeUpSessionsNestedInput
    leaveRequest?: LeaveRequestUpdateOneWithoutMakeUpsNestedInput
  }

  export type MakeUpSessionUncheckedUpdateWithoutOriginalSessionInput = {
    id?: IntFieldUpdateOperationsInput | number
    studentId?: IntFieldUpdateOperationsInput | number
    makeUpDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    attendanceStatus?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    leaveRequestId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type MakeUpSessionUncheckedUpdateManyWithoutOriginalSessionInput = {
    id?: IntFieldUpdateOperationsInput | number
    studentId?: IntFieldUpdateOperationsInput | number
    makeUpDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    attendanceStatus?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    leaveRequestId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type MakeUpSessionCreateManyLeaveRequestInput = {
    id?: number
    originalSessionId: number
    studentId: number
    makeUpDate: Date | string
    startTime: string
    endTime: string
    attendanceStatus: string
    content?: string | null
    createdById: number
    createdAt?: Date | string
  }

  export type MakeUpSessionUpdateWithoutLeaveRequestInput = {
    makeUpDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    attendanceStatus?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    originalSession?: SessionUpdateOneRequiredWithoutMakeUpSessionsNestedInput
    student?: UserUpdateOneRequiredWithoutMakeUpSessionsNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedMakeUpSessionsNestedInput
  }

  export type MakeUpSessionUncheckedUpdateWithoutLeaveRequestInput = {
    id?: IntFieldUpdateOperationsInput | number
    originalSessionId?: IntFieldUpdateOperationsInput | number
    studentId?: IntFieldUpdateOperationsInput | number
    makeUpDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    attendanceStatus?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MakeUpSessionUncheckedUpdateManyWithoutLeaveRequestInput = {
    id?: IntFieldUpdateOperationsInput | number
    originalSessionId?: IntFieldUpdateOperationsInput | number
    studentId?: IntFieldUpdateOperationsInput | number
    makeUpDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    attendanceStatus?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CourseCountOutputTypeDefaultArgs instead
     */
    export type CourseCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CourseCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SessionCountOutputTypeDefaultArgs instead
     */
    export type SessionCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SessionCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use LeaveRequestCountOutputTypeDefaultArgs instead
     */
    export type LeaveRequestCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = LeaveRequestCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CourseDefaultArgs instead
     */
    export type CourseArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CourseDefaultArgs<ExtArgs>
    /**
     * @deprecated Use EnrollmentDefaultArgs instead
     */
    export type EnrollmentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = EnrollmentDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SessionDefaultArgs instead
     */
    export type SessionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SessionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AttendanceRecordDefaultArgs instead
     */
    export type AttendanceRecordArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AttendanceRecordDefaultArgs<ExtArgs>
    /**
     * @deprecated Use LeaveRequestDefaultArgs instead
     */
    export type LeaveRequestArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = LeaveRequestDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MakeUpSessionDefaultArgs instead
     */
    export type MakeUpSessionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MakeUpSessionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use StudentPerformanceDefaultArgs instead
     */
    export type StudentPerformanceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = StudentPerformanceDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}